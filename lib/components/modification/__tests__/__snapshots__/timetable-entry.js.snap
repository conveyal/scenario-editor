// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component TimetableEntry snapshot(mount) 1`] = `
<TimetableEntry
  bidirectional={false}
  modificationStops={Array []}
  projectTimetables={Array []}
  timetable={
    Object {
      "_id": "timetable-id",
      "dwellTime": 10,
      "dwellTimes": Array [
        12,
      ],
      "endTime": 57600,
      "exactTimes": false,
      "friday": true,
      "headwaySecs": 900,
      "modificationId": "1234",
      "modificationName": "Test Modification",
      "monday": true,
      "name": "Test timetable",
      "patternTrips": Array [
        "abcd",
      ],
      "phaseAtStop": "",
      "phaseFromStop": "",
      "phaseFromTimetable": "",
      "phaseSeconds": 300,
      "saturday": false,
      "segmentSpeeds": Array [],
      "sourceTrip": "abcd",
      "startTime": 28800,
      "sunday": false,
      "thursday": true,
      "tuesday": true,
      "wednesday": true,
    }
  }
  update={[MockFunction]}
>
  <Stack
    spacing={4}
  >
    <Styled(div)
      __css={
        Object {
          "& > *:not(style) ~ *:not(style)": Object {
            "marginBottom": 0,
            "marginEnd": 0,
            "marginStart": 0,
            "marginTop": 4,
          },
        }
      }
      className="chakra-stack"
      display="flex"
      flexDirection="column"
    >
      <div
        className="chakra-stack css-egoftb"
      >
        <FormControl
          key=".0"
        >
          <Styled(div)
            __css={
              Object {
                "position": "relative",
                "width": "100%",
              }
            }
            className="chakra-form-control"
            role="group"
          >
            <div
              className="chakra-form-control css-1kxonj9"
              role="group"
            >
              <FormLabel>
                <Styled(label)
                  __css={
                    Object {
                      "_disabled": Object {
                        "opacity": 0.4,
                      },
                      "display": "block",
                      "fontSize": "md",
                      "fontWeight": "medium",
                      "marginEnd": 3,
                      "mb": 2,
                      "opacity": 1,
                      "textAlign": "start",
                      "transition": "all 0.2s",
                    }
                  }
                  className="chakra-form__label"
                  htmlFor="field-1"
                  id="field-1-label"
                >
                  <label
                    className="chakra-form__label css-10m1y3x"
                    htmlFor="field-1"
                    id="field-1-label"
                  >
                    Days active
                  </label>
                </Styled(label)>
              </FormLabel>
              <SimpleGrid
                columns={5}
              >
                <Grid
                  templateColumns="repeat(5, minmax(0, 1fr))"
                >
                  <Styled(div)
                    __css={
                      Object {
                        "display": "grid",
                        "gridArea": undefined,
                        "gridAutoColumns": undefined,
                        "gridAutoFlow": undefined,
                        "gridAutoRows": undefined,
                        "gridColumn": undefined,
                        "gridColumnGap": undefined,
                        "gridGap": undefined,
                        "gridRow": undefined,
                        "gridRowGap": undefined,
                        "gridTemplateAreas": undefined,
                        "gridTemplateColumns": "repeat(5, minmax(0, 1fr))",
                        "gridTemplateRows": undefined,
                      }
                    }
                  >
                    <div
                      className="css-nturbv"
                    >
                      <Day
                        day="Monday"
                        isChecked={true}
                        key="Monday"
                        update={[MockFunction]}
                      >
                        <Checkbox
                          fontWeight="normal"
                          isChecked={true}
                          onChange={[Function]}
                        >
                          <Styled(label)
                            __css={Object {}}
                            className="chakra-checkbox"
                            fontWeight="normal"
                            onClick={[Function]}
                          >
                            <label
                              className="chakra-checkbox css-fnpc6t"
                              onClick={[Function]}
                            >
                              <input
                                checked={true}
                                className="chakra-checkbox__input"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                style={
                                  Object {
                                    "border": "0px",
                                    "clip": "rect(0px, 0px, 0px, 0px)",
                                    "height": "1px",
                                    "margin": "-1px",
                                    "overflow": "hidden",
                                    "padding": "0px",
                                    "position": "absolute",
                                    "whiteSpace": "nowrap",
                                    "width": "1px",
                                  }
                                }
                                type="checkbox"
                              />
                              <Styled(span)
                                __css={
                                  Object {
                                    "_checked": Object {
                                      "_disabled": Object {
                                        "bg": "gray.200",
                                        "borderColor": "gray.200",
                                        "color": "gray.500",
                                      },
                                      "_hover": Object {
                                        "bg": "blue.600",
                                        "borderColor": "blue.600",
                                      },
                                      "bg": "blue.500",
                                      "borderColor": "blue.500",
                                      "color": "white",
                                    },
                                    "_disabled": Object {
                                      "bg": "gray.100",
                                      "borderColor": "gray.100",
                                    },
                                    "_focus": Object {
                                      "boxShadow": "outline",
                                    },
                                    "_indeterminate": Object {
                                      "bg": "blue.500",
                                      "borderColor": "blue.500",
                                      "color": "white",
                                    },
                                    "_invalid": Object {
                                      "borderColor": "red.500",
                                    },
                                    "border": "2px solid",
                                    "borderColor": "inherit",
                                    "borderRadius": "sm",
                                    "color": "white",
                                    "h": 4,
                                    "transition": "box-shadow 250ms",
                                    "w": 4,
                                  }
                                }
                                aria-hidden={true}
                                className="chakra-checkbox__control"
                                data-checked=""
                                onMouseDown={[Function]}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <span
                                  aria-hidden={true}
                                  className="chakra-checkbox__control css-joz5u0"
                                  data-checked=""
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  <CheckboxIcon
                                    __css={
                                      Object {
                                        "color": undefined,
                                        "fontSize": "0.625rem",
                                        "opacity": 1,
                                        "transform": "scale(1)",
                                        "transition": "transform 200ms",
                                      }
                                    }
                                    isChecked={true}
                                  >
                                    <CheckboxTransition
                                      open={true}
                                    >
                                      <AnimatePresence
                                        initial={false}
                                      >
                                        <PresenceChild
                                          initial={false}
                                          isPresent={true}
                                          key=""
                                          presenceAffectsLayout={true}
                                        >
                                          <ForwardRef(MotionComponent)
                                            animate="checked"
                                            exit="unchecked"
                                            initial="unchecked"
                                            style={
                                              Object {
                                                "alignItems": "center",
                                                "display": "flex",
                                                "height": "100%",
                                                "justifyContent": "center",
                                              }
                                            }
                                            variants={
                                              Object {
                                                "checked": Object {
                                                  "scale": 1,
                                                },
                                                "unchecked": Object {
                                                  "scale": 0.5,
                                                },
                                              }
                                            }
                                          >
                                            <div
                                              style={
                                                Object {
                                                  "alignItems": "center",
                                                  "display": "flex",
                                                  "height": "100%",
                                                  "justifyContent": "center",
                                                  "transform": "none",
                                                }
                                              }
                                            >
                                              <CheckIcon
                                                __css={
                                                  Object {
                                                    "color": undefined,
                                                    "fontSize": "0.625rem",
                                                    "opacity": 1,
                                                    "transform": "scale(1)",
                                                    "transition": "transform 200ms",
                                                  }
                                                }
                                              >
                                                <ForwardRef(MotionComponent)
                                                  __css={
                                                    Object {
                                                      "color": undefined,
                                                      "fontSize": "0.625rem",
                                                      "opacity": 1,
                                                      "transform": "scale(1)",
                                                      "transition": "transform 200ms",
                                                    }
                                                  }
                                                  style={
                                                    Object {
                                                      "fill": "none",
                                                      "stroke": "currentColor",
                                                      "strokeDasharray": 16,
                                                      "strokeWidth": 2,
                                                    }
                                                  }
                                                  variants={
                                                    Object {
                                                      "checked": Object {
                                                        "opacity": 1,
                                                        "strokeDashoffset": 0,
                                                        "transition": Object {
                                                          "duration": 0.2,
                                                        },
                                                      },
                                                      "unchecked": Object {
                                                        "opacity": 0,
                                                        "strokeDashoffset": 16,
                                                      },
                                                    }
                                                  }
                                                  viewBox="0 0 12 10"
                                                  width="1.2em"
                                                >
                                                  <Styled(svg)
                                                    __css={
                                                      Object {
                                                        "color": undefined,
                                                        "fontSize": "0.625rem",
                                                        "opacity": 1,
                                                        "transform": "scale(1)",
                                                        "transition": "transform 200ms",
                                                      }
                                                    }
                                                    style={
                                                      Object {
                                                        "fill": "none",
                                                        "opacity": 1,
                                                        "stroke": "currentColor",
                                                        "strokeDasharray": 16,
                                                        "strokeDashoffset": 0,
                                                        "strokeWidth": 2,
                                                      }
                                                    }
                                                    viewBox="0 0 12 10"
                                                    width="1.2em"
                                                  >
                                                    <svg
                                                      className="css-da6t8b"
                                                      style={
                                                        Object {
                                                          "fill": "none",
                                                          "opacity": 1,
                                                          "stroke": "currentColor",
                                                          "strokeDasharray": 16,
                                                          "strokeDashoffset": 0,
                                                          "strokeWidth": 2,
                                                        }
                                                      }
                                                      viewBox="0 0 12 10"
                                                    >
                                                      <polyline
                                                        points="1.5 6 4.5 9 10.5 1"
                                                      />
                                                    </svg>
                                                  </Styled(svg)>
                                                  <Component
                                                    __css={
                                                      Object {
                                                        "color": undefined,
                                                        "fontSize": "0.625rem",
                                                        "opacity": 1,
                                                        "transform": "scale(1)",
                                                        "transition": "transform 200ms",
                                                      }
                                                    }
                                                    key="animation"
                                                    style={
                                                      Object {
                                                        "fill": "none",
                                                        "stroke": "currentColor",
                                                        "strokeDasharray": 16,
                                                        "strokeWidth": 2,
                                                      }
                                                    }
                                                    variants={
                                                      Object {
                                                        "checked": Object {
                                                          "opacity": 1,
                                                          "strokeDashoffset": 0,
                                                          "transition": Object {
                                                            "duration": 0.2,
                                                          },
                                                        },
                                                        "unchecked": Object {
                                                          "opacity": 0,
                                                          "strokeDashoffset": 16,
                                                        },
                                                      }
                                                    }
                                                    viewBox="0 0 12 10"
                                                    visualElement={
                                                      Object {
                                                        "addChild": [Function],
                                                        "addValue": [Function],
                                                        "addVariantChild": [Function],
                                                        "animationState": Object {
                                                          "animateChanges": [Function],
                                                          "getState": [Function],
                                                          "isAnimated": [Function],
                                                          "setActive": [Function],
                                                          "setAnimateFunction": [Function],
                                                        },
                                                        "blockInitialAnimation": true,
                                                        "build": [Function],
                                                        "clearAllListeners": [Function],
                                                        "clearState": [Function],
                                                        "current": <svg
                                                          class="css-da6t8b"
                                                          style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                          viewBox="0 0 12 10"
                                                        >
                                                          <polyline
                                                            points="1.5 6 4.5 9 10.5 1"
                                                          />
                                                        </svg>,
                                                        "depth": 1,
                                                        "enableLayoutProjection": [Function],
                                                        "forEachValue": [Function],
                                                        "getBaseTarget": [Function],
                                                        "getClosestVariantNode": [Function],
                                                        "getDefaultTransition": [Function],
                                                        "getInstance": [Function],
                                                        "getLatestValues": [Function],
                                                        "getLayoutId": [Function],
                                                        "getLayoutState": [Function],
                                                        "getProjectionAnimationProgress": [Function],
                                                        "getProps": [Function],
                                                        "getStaticValue": [Function],
                                                        "getValue": [Function],
                                                        "getVariant": [Function],
                                                        "getVariantContext": [Function],
                                                        "hasValue": [Function],
                                                        "isHoverEventsEnabled": true,
                                                        "isMounted": [Function],
                                                        "isPresenceRoot": false,
                                                        "isPresent": true,
                                                        "isStatic": false,
                                                        "isVisible": undefined,
                                                        "lockProjectionTarget": [Function],
                                                        "makeTargetAnimatable": [Function],
                                                        "manuallyAnimateOnMount": false,
                                                        "measureViewportBox": [Function],
                                                        "notifyAnimationComplete": [Function],
                                                        "notifyAnimationStart": [Function],
                                                        "notifyBeforeLayoutMeasure": [Function],
                                                        "notifyLayoutAnimationComplete": [Function],
                                                        "notifyLayoutMeasure": [Function],
                                                        "notifyLayoutReady": [Function],
                                                        "notifyLayoutUpdate": [Function],
                                                        "notifyRender": [Function],
                                                        "notifySetAxisTarget": [Function],
                                                        "notifyUpdate": [Function],
                                                        "notifyViewportBoxUpdate": [Function],
                                                        "onAnimationComplete": [Function],
                                                        "onAnimationStart": [Function],
                                                        "onBeforeLayoutMeasure": [Function],
                                                        "onLayoutAnimationComplete": [Function],
                                                        "onLayoutMeasure": [Function],
                                                        "onLayoutUpdate": [Function],
                                                        "onRender": [Function],
                                                        "onSetAxisTarget": [Function],
                                                        "onUpdate": [Function],
                                                        "onViewportBoxUpdate": [Function],
                                                        "path": Array [
                                                          Object {
                                                            "addChild": [Function],
                                                            "addValue": [Function],
                                                            "addVariantChild": [Function],
                                                            "animationState": Object {
                                                              "animateChanges": [Function],
                                                              "getState": [Function],
                                                              "isAnimated": [Function],
                                                              "setActive": [Function],
                                                              "setAnimateFunction": [Function],
                                                            },
                                                            "blockInitialAnimation": true,
                                                            "build": [Function],
                                                            "clearAllListeners": [Function],
                                                            "clearState": [Function],
                                                            "current": <div
                                                              style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                            >
                                                              <svg
                                                                class="css-da6t8b"
                                                                style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                viewBox="0 0 12 10"
                                                              >
                                                                <polyline
                                                                  points="1.5 6 4.5 9 10.5 1"
                                                                />
                                                              </svg>
                                                            </div>,
                                                            "depth": 0,
                                                            "enableLayoutProjection": [Function],
                                                            "forEachValue": [Function],
                                                            "getBaseTarget": [Function],
                                                            "getClosestVariantNode": [Function],
                                                            "getDefaultTransition": [Function],
                                                            "getInstance": [Function],
                                                            "getLatestValues": [Function],
                                                            "getLayoutId": [Function],
                                                            "getLayoutState": [Function],
                                                            "getProjectionAnimationProgress": [Function],
                                                            "getProps": [Function],
                                                            "getStaticValue": [Function],
                                                            "getValue": [Function],
                                                            "getVariant": [Function],
                                                            "getVariantContext": [Function],
                                                            "hasValue": [Function],
                                                            "isHoverEventsEnabled": true,
                                                            "isMounted": [Function],
                                                            "isPresenceRoot": true,
                                                            "isPresent": true,
                                                            "isStatic": false,
                                                            "isVisible": undefined,
                                                            "lockProjectionTarget": [Function],
                                                            "makeTargetAnimatable": [Function],
                                                            "manuallyAnimateOnMount": false,
                                                            "measureViewportBox": [Function],
                                                            "notifyAnimationComplete": [Function],
                                                            "notifyAnimationStart": [Function],
                                                            "notifyBeforeLayoutMeasure": [Function],
                                                            "notifyLayoutAnimationComplete": [Function],
                                                            "notifyLayoutMeasure": [Function],
                                                            "notifyLayoutReady": [Function],
                                                            "notifyLayoutUpdate": [Function],
                                                            "notifyRender": [Function],
                                                            "notifySetAxisTarget": [Function],
                                                            "notifyUpdate": [Function],
                                                            "notifyViewportBoxUpdate": [Function],
                                                            "onAnimationComplete": [Function],
                                                            "onAnimationStart": [Function],
                                                            "onBeforeLayoutMeasure": [Function],
                                                            "onLayoutAnimationComplete": [Function],
                                                            "onLayoutMeasure": [Function],
                                                            "onLayoutUpdate": [Function],
                                                            "onRender": [Function],
                                                            "onSetAxisTarget": [Function],
                                                            "onUpdate": [Function],
                                                            "onViewportBoxUpdate": [Function],
                                                            "path": Array [],
                                                            "pointTo": [Function],
                                                            "presence": 0,
                                                            "presenceId": 0,
                                                            "projection": Object {
                                                              "isEnabled": false,
                                                              "isTargetLocked": false,
                                                              "target": Object {
                                                                "x": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                                "y": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                              },
                                                              "targetFinal": Object {
                                                                "x": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                                "y": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                              },
                                                            },
                                                            "readValue": [Function],
                                                            "rebaseProjectionTarget": [Function],
                                                            "ref": [Function],
                                                            "removeValue": [Function],
                                                            "resetTransform": [Function],
                                                            "scheduleRender": [Function],
                                                            "scheduleUpdateLayoutProjection": [Function],
                                                            "setBaseTarget": [Function],
                                                            "setCrossfader": [Function],
                                                            "setProjectionTargetAxis": [Function],
                                                            "setProps": [Function],
                                                            "setStaticValue": [Function],
                                                            "setVisibility": [Function],
                                                            "snapshotViewportBox": [Function],
                                                            "sortNodePosition": [Function],
                                                            "startLayoutAnimation": [Function],
                                                            "stopLayoutAnimation": [Function],
                                                            "suspendHoverEvents": [Function],
                                                            "syncRender": [Function],
                                                            "treeType": "dom",
                                                            "unlockProjectionTarget": [Function],
                                                            "updateLayoutMeasurement": [Function],
                                                            "updateLayoutProjection": [Function],
                                                            "updatePropListeners": [Function],
                                                            "variantChildren": Set {
                                                              [Circular],
                                                            },
                                                            "withoutTransform": [Function],
                                                          },
                                                        ],
                                                        "pointTo": [Function],
                                                        "presence": 0,
                                                        "presenceId": 0,
                                                        "projection": Object {
                                                          "isEnabled": false,
                                                          "isTargetLocked": false,
                                                          "target": Object {
                                                            "x": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                            "y": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                          },
                                                          "targetFinal": Object {
                                                            "x": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                            "y": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                          },
                                                        },
                                                        "readValue": [Function],
                                                        "rebaseProjectionTarget": [Function],
                                                        "ref": [Function],
                                                        "removeValue": [Function],
                                                        "resetTransform": [Function],
                                                        "scheduleRender": [Function],
                                                        "scheduleUpdateLayoutProjection": [Function],
                                                        "setBaseTarget": [Function],
                                                        "setCrossfader": [Function],
                                                        "setProjectionTargetAxis": [Function],
                                                        "setProps": [Function],
                                                        "setStaticValue": [Function],
                                                        "setVisibility": [Function],
                                                        "snapshotViewportBox": [Function],
                                                        "sortNodePosition": [Function],
                                                        "startLayoutAnimation": [Function],
                                                        "stopLayoutAnimation": [Function],
                                                        "suspendHoverEvents": [Function],
                                                        "syncRender": [Function],
                                                        "treeType": "dom",
                                                        "unlockProjectionTarget": [Function],
                                                        "updateLayoutMeasurement": [Function],
                                                        "updateLayoutProjection": [Function],
                                                        "updatePropListeners": [Function],
                                                        "variantChildren": Set {},
                                                        "withoutTransform": [Function],
                                                      }
                                                    }
                                                    width="1.2em"
                                                  />
                                                </ForwardRef(MotionComponent)>
                                              </CheckIcon>
                                            </div>
                                            <Component
                                              animate="checked"
                                              exit="unchecked"
                                              initial="unchecked"
                                              key="animation"
                                              style={
                                                Object {
                                                  "alignItems": "center",
                                                  "display": "flex",
                                                  "height": "100%",
                                                  "justifyContent": "center",
                                                }
                                              }
                                              variants={
                                                Object {
                                                  "checked": Object {
                                                    "scale": 1,
                                                  },
                                                  "unchecked": Object {
                                                    "scale": 0.5,
                                                  },
                                                }
                                              }
                                              visualElement={
                                                Object {
                                                  "addChild": [Function],
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": true,
                                                  "build": [Function],
                                                  "clearAllListeners": [Function],
                                                  "clearState": [Function],
                                                  "current": <div
                                                    style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                  >
                                                    <svg
                                                      class="css-da6t8b"
                                                      style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                      viewBox="0 0 12 10"
                                                    >
                                                      <polyline
                                                        points="1.5 6 4.5 9 10.5 1"
                                                      />
                                                    </svg>
                                                  </div>,
                                                  "depth": 0,
                                                  "enableLayoutProjection": [Function],
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getLayoutState": [Function],
                                                  "getProjectionAnimationProgress": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isHoverEventsEnabled": true,
                                                  "isMounted": [Function],
                                                  "isPresenceRoot": true,
                                                  "isPresent": true,
                                                  "isStatic": false,
                                                  "isVisible": undefined,
                                                  "lockProjectionTarget": [Function],
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutReady": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "path": Array [],
                                                  "pointTo": [Function],
                                                  "presence": 0,
                                                  "presenceId": 0,
                                                  "projection": Object {
                                                    "isEnabled": false,
                                                    "isTargetLocked": false,
                                                    "target": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                    "targetFinal": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                  },
                                                  "readValue": [Function],
                                                  "rebaseProjectionTarget": [Function],
                                                  "ref": [Function],
                                                  "removeValue": [Function],
                                                  "resetTransform": [Function],
                                                  "scheduleRender": [Function],
                                                  "scheduleUpdateLayoutProjection": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setCrossfader": [Function],
                                                  "setProjectionTargetAxis": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "snapshotViewportBox": [Function],
                                                  "sortNodePosition": [Function],
                                                  "startLayoutAnimation": [Function],
                                                  "stopLayoutAnimation": [Function],
                                                  "suspendHoverEvents": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unlockProjectionTarget": [Function],
                                                  "updateLayoutMeasurement": [Function],
                                                  "updateLayoutProjection": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": Set {
                                                    Object {
                                                      "addChild": [Function],
                                                      "addValue": [Function],
                                                      "addVariantChild": [Function],
                                                      "animationState": Object {
                                                        "animateChanges": [Function],
                                                        "getState": [Function],
                                                        "isAnimated": [Function],
                                                        "setActive": [Function],
                                                        "setAnimateFunction": [Function],
                                                      },
                                                      "blockInitialAnimation": true,
                                                      "build": [Function],
                                                      "clearAllListeners": [Function],
                                                      "clearState": [Function],
                                                      "current": <svg
                                                        class="css-da6t8b"
                                                        style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                        viewBox="0 0 12 10"
                                                      >
                                                        <polyline
                                                          points="1.5 6 4.5 9 10.5 1"
                                                        />
                                                      </svg>,
                                                      "depth": 1,
                                                      "enableLayoutProjection": [Function],
                                                      "forEachValue": [Function],
                                                      "getBaseTarget": [Function],
                                                      "getClosestVariantNode": [Function],
                                                      "getDefaultTransition": [Function],
                                                      "getInstance": [Function],
                                                      "getLatestValues": [Function],
                                                      "getLayoutId": [Function],
                                                      "getLayoutState": [Function],
                                                      "getProjectionAnimationProgress": [Function],
                                                      "getProps": [Function],
                                                      "getStaticValue": [Function],
                                                      "getValue": [Function],
                                                      "getVariant": [Function],
                                                      "getVariantContext": [Function],
                                                      "hasValue": [Function],
                                                      "isHoverEventsEnabled": true,
                                                      "isMounted": [Function],
                                                      "isPresenceRoot": false,
                                                      "isPresent": true,
                                                      "isStatic": false,
                                                      "isVisible": undefined,
                                                      "lockProjectionTarget": [Function],
                                                      "makeTargetAnimatable": [Function],
                                                      "manuallyAnimateOnMount": false,
                                                      "measureViewportBox": [Function],
                                                      "notifyAnimationComplete": [Function],
                                                      "notifyAnimationStart": [Function],
                                                      "notifyBeforeLayoutMeasure": [Function],
                                                      "notifyLayoutAnimationComplete": [Function],
                                                      "notifyLayoutMeasure": [Function],
                                                      "notifyLayoutReady": [Function],
                                                      "notifyLayoutUpdate": [Function],
                                                      "notifyRender": [Function],
                                                      "notifySetAxisTarget": [Function],
                                                      "notifyUpdate": [Function],
                                                      "notifyViewportBoxUpdate": [Function],
                                                      "onAnimationComplete": [Function],
                                                      "onAnimationStart": [Function],
                                                      "onBeforeLayoutMeasure": [Function],
                                                      "onLayoutAnimationComplete": [Function],
                                                      "onLayoutMeasure": [Function],
                                                      "onLayoutUpdate": [Function],
                                                      "onRender": [Function],
                                                      "onSetAxisTarget": [Function],
                                                      "onUpdate": [Function],
                                                      "onViewportBoxUpdate": [Function],
                                                      "path": Array [
                                                        [Circular],
                                                      ],
                                                      "pointTo": [Function],
                                                      "presence": 0,
                                                      "presenceId": 0,
                                                      "projection": Object {
                                                        "isEnabled": false,
                                                        "isTargetLocked": false,
                                                        "target": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                        "targetFinal": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                      },
                                                      "readValue": [Function],
                                                      "rebaseProjectionTarget": [Function],
                                                      "ref": [Function],
                                                      "removeValue": [Function],
                                                      "resetTransform": [Function],
                                                      "scheduleRender": [Function],
                                                      "scheduleUpdateLayoutProjection": [Function],
                                                      "setBaseTarget": [Function],
                                                      "setCrossfader": [Function],
                                                      "setProjectionTargetAxis": [Function],
                                                      "setProps": [Function],
                                                      "setStaticValue": [Function],
                                                      "setVisibility": [Function],
                                                      "snapshotViewportBox": [Function],
                                                      "sortNodePosition": [Function],
                                                      "startLayoutAnimation": [Function],
                                                      "stopLayoutAnimation": [Function],
                                                      "suspendHoverEvents": [Function],
                                                      "syncRender": [Function],
                                                      "treeType": "dom",
                                                      "unlockProjectionTarget": [Function],
                                                      "updateLayoutMeasurement": [Function],
                                                      "updateLayoutProjection": [Function],
                                                      "updatePropListeners": [Function],
                                                      "variantChildren": Set {},
                                                      "withoutTransform": [Function],
                                                    },
                                                  },
                                                  "withoutTransform": [Function],
                                                }
                                              }
                                            />
                                            <Component
                                              animate="checked"
                                              exit="unchecked"
                                              initial="unchecked"
                                              key="exit"
                                              style={
                                                Object {
                                                  "alignItems": "center",
                                                  "display": "flex",
                                                  "height": "100%",
                                                  "justifyContent": "center",
                                                }
                                              }
                                              variants={
                                                Object {
                                                  "checked": Object {
                                                    "scale": 1,
                                                  },
                                                  "unchecked": Object {
                                                    "scale": 0.5,
                                                  },
                                                }
                                              }
                                              visualElement={
                                                Object {
                                                  "addChild": [Function],
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": true,
                                                  "build": [Function],
                                                  "clearAllListeners": [Function],
                                                  "clearState": [Function],
                                                  "current": <div
                                                    style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                  >
                                                    <svg
                                                      class="css-da6t8b"
                                                      style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                      viewBox="0 0 12 10"
                                                    >
                                                      <polyline
                                                        points="1.5 6 4.5 9 10.5 1"
                                                      />
                                                    </svg>
                                                  </div>,
                                                  "depth": 0,
                                                  "enableLayoutProjection": [Function],
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getLayoutState": [Function],
                                                  "getProjectionAnimationProgress": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isHoverEventsEnabled": true,
                                                  "isMounted": [Function],
                                                  "isPresenceRoot": true,
                                                  "isPresent": true,
                                                  "isStatic": false,
                                                  "isVisible": undefined,
                                                  "lockProjectionTarget": [Function],
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutReady": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "path": Array [],
                                                  "pointTo": [Function],
                                                  "presence": 0,
                                                  "presenceId": 0,
                                                  "projection": Object {
                                                    "isEnabled": false,
                                                    "isTargetLocked": false,
                                                    "target": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                    "targetFinal": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                  },
                                                  "readValue": [Function],
                                                  "rebaseProjectionTarget": [Function],
                                                  "ref": [Function],
                                                  "removeValue": [Function],
                                                  "resetTransform": [Function],
                                                  "scheduleRender": [Function],
                                                  "scheduleUpdateLayoutProjection": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setCrossfader": [Function],
                                                  "setProjectionTargetAxis": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "snapshotViewportBox": [Function],
                                                  "sortNodePosition": [Function],
                                                  "startLayoutAnimation": [Function],
                                                  "stopLayoutAnimation": [Function],
                                                  "suspendHoverEvents": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unlockProjectionTarget": [Function],
                                                  "updateLayoutMeasurement": [Function],
                                                  "updateLayoutProjection": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": Set {
                                                    Object {
                                                      "addChild": [Function],
                                                      "addValue": [Function],
                                                      "addVariantChild": [Function],
                                                      "animationState": Object {
                                                        "animateChanges": [Function],
                                                        "getState": [Function],
                                                        "isAnimated": [Function],
                                                        "setActive": [Function],
                                                        "setAnimateFunction": [Function],
                                                      },
                                                      "blockInitialAnimation": true,
                                                      "build": [Function],
                                                      "clearAllListeners": [Function],
                                                      "clearState": [Function],
                                                      "current": <svg
                                                        class="css-da6t8b"
                                                        style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                        viewBox="0 0 12 10"
                                                      >
                                                        <polyline
                                                          points="1.5 6 4.5 9 10.5 1"
                                                        />
                                                      </svg>,
                                                      "depth": 1,
                                                      "enableLayoutProjection": [Function],
                                                      "forEachValue": [Function],
                                                      "getBaseTarget": [Function],
                                                      "getClosestVariantNode": [Function],
                                                      "getDefaultTransition": [Function],
                                                      "getInstance": [Function],
                                                      "getLatestValues": [Function],
                                                      "getLayoutId": [Function],
                                                      "getLayoutState": [Function],
                                                      "getProjectionAnimationProgress": [Function],
                                                      "getProps": [Function],
                                                      "getStaticValue": [Function],
                                                      "getValue": [Function],
                                                      "getVariant": [Function],
                                                      "getVariantContext": [Function],
                                                      "hasValue": [Function],
                                                      "isHoverEventsEnabled": true,
                                                      "isMounted": [Function],
                                                      "isPresenceRoot": false,
                                                      "isPresent": true,
                                                      "isStatic": false,
                                                      "isVisible": undefined,
                                                      "lockProjectionTarget": [Function],
                                                      "makeTargetAnimatable": [Function],
                                                      "manuallyAnimateOnMount": false,
                                                      "measureViewportBox": [Function],
                                                      "notifyAnimationComplete": [Function],
                                                      "notifyAnimationStart": [Function],
                                                      "notifyBeforeLayoutMeasure": [Function],
                                                      "notifyLayoutAnimationComplete": [Function],
                                                      "notifyLayoutMeasure": [Function],
                                                      "notifyLayoutReady": [Function],
                                                      "notifyLayoutUpdate": [Function],
                                                      "notifyRender": [Function],
                                                      "notifySetAxisTarget": [Function],
                                                      "notifyUpdate": [Function],
                                                      "notifyViewportBoxUpdate": [Function],
                                                      "onAnimationComplete": [Function],
                                                      "onAnimationStart": [Function],
                                                      "onBeforeLayoutMeasure": [Function],
                                                      "onLayoutAnimationComplete": [Function],
                                                      "onLayoutMeasure": [Function],
                                                      "onLayoutUpdate": [Function],
                                                      "onRender": [Function],
                                                      "onSetAxisTarget": [Function],
                                                      "onUpdate": [Function],
                                                      "onViewportBoxUpdate": [Function],
                                                      "path": Array [
                                                        [Circular],
                                                      ],
                                                      "pointTo": [Function],
                                                      "presence": 0,
                                                      "presenceId": 0,
                                                      "projection": Object {
                                                        "isEnabled": false,
                                                        "isTargetLocked": false,
                                                        "target": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                        "targetFinal": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                      },
                                                      "readValue": [Function],
                                                      "rebaseProjectionTarget": [Function],
                                                      "ref": [Function],
                                                      "removeValue": [Function],
                                                      "resetTransform": [Function],
                                                      "scheduleRender": [Function],
                                                      "scheduleUpdateLayoutProjection": [Function],
                                                      "setBaseTarget": [Function],
                                                      "setCrossfader": [Function],
                                                      "setProjectionTargetAxis": [Function],
                                                      "setProps": [Function],
                                                      "setStaticValue": [Function],
                                                      "setVisibility": [Function],
                                                      "snapshotViewportBox": [Function],
                                                      "sortNodePosition": [Function],
                                                      "startLayoutAnimation": [Function],
                                                      "stopLayoutAnimation": [Function],
                                                      "suspendHoverEvents": [Function],
                                                      "syncRender": [Function],
                                                      "treeType": "dom",
                                                      "unlockProjectionTarget": [Function],
                                                      "updateLayoutMeasurement": [Function],
                                                      "updateLayoutProjection": [Function],
                                                      "updatePropListeners": [Function],
                                                      "variantChildren": Set {},
                                                      "withoutTransform": [Function],
                                                    },
                                                  },
                                                  "withoutTransform": [Function],
                                                }
                                              }
                                            />
                                          </ForwardRef(MotionComponent)>
                                        </PresenceChild>
                                      </AnimatePresence>
                                    </CheckboxTransition>
                                  </CheckboxIcon>
                                </span>
                              </Styled(span)>
                              <Styled(span)
                                __css={
                                  Object {
                                    "_disabled": Object {
                                      "opacity": 0.4,
                                    },
                                    "fontSize": "md",
                                    "marginStart": "0.5rem",
                                    "userSelect": "none",
                                  }
                                }
                                className="chakra-checkbox__label"
                                data-checked=""
                                onMouseDown={[Function]}
                                onTouchStart={[Function]}
                              >
                                <span
                                  className="chakra-checkbox__label css-1sgc0qu"
                                  data-checked=""
                                  onMouseDown={[Function]}
                                  onTouchStart={[Function]}
                                >
                                  Mon
                                </span>
                              </Styled(span)>
                            </label>
                          </Styled(label)>
                        </Checkbox>
                      </Day>
                      <Day
                        day="Tuesday"
                        isChecked={true}
                        key="Tuesday"
                        update={[MockFunction]}
                      >
                        <Checkbox
                          fontWeight="normal"
                          isChecked={true}
                          onChange={[Function]}
                        >
                          <Styled(label)
                            __css={Object {}}
                            className="chakra-checkbox"
                            fontWeight="normal"
                            onClick={[Function]}
                          >
                            <label
                              className="chakra-checkbox css-fnpc6t"
                              onClick={[Function]}
                            >
                              <input
                                checked={true}
                                className="chakra-checkbox__input"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                style={
                                  Object {
                                    "border": "0px",
                                    "clip": "rect(0px, 0px, 0px, 0px)",
                                    "height": "1px",
                                    "margin": "-1px",
                                    "overflow": "hidden",
                                    "padding": "0px",
                                    "position": "absolute",
                                    "whiteSpace": "nowrap",
                                    "width": "1px",
                                  }
                                }
                                type="checkbox"
                              />
                              <Styled(span)
                                __css={
                                  Object {
                                    "_checked": Object {
                                      "_disabled": Object {
                                        "bg": "gray.200",
                                        "borderColor": "gray.200",
                                        "color": "gray.500",
                                      },
                                      "_hover": Object {
                                        "bg": "blue.600",
                                        "borderColor": "blue.600",
                                      },
                                      "bg": "blue.500",
                                      "borderColor": "blue.500",
                                      "color": "white",
                                    },
                                    "_disabled": Object {
                                      "bg": "gray.100",
                                      "borderColor": "gray.100",
                                    },
                                    "_focus": Object {
                                      "boxShadow": "outline",
                                    },
                                    "_indeterminate": Object {
                                      "bg": "blue.500",
                                      "borderColor": "blue.500",
                                      "color": "white",
                                    },
                                    "_invalid": Object {
                                      "borderColor": "red.500",
                                    },
                                    "border": "2px solid",
                                    "borderColor": "inherit",
                                    "borderRadius": "sm",
                                    "color": "white",
                                    "h": 4,
                                    "transition": "box-shadow 250ms",
                                    "w": 4,
                                  }
                                }
                                aria-hidden={true}
                                className="chakra-checkbox__control"
                                data-checked=""
                                onMouseDown={[Function]}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <span
                                  aria-hidden={true}
                                  className="chakra-checkbox__control css-joz5u0"
                                  data-checked=""
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  <CheckboxIcon
                                    __css={
                                      Object {
                                        "color": undefined,
                                        "fontSize": "0.625rem",
                                        "opacity": 1,
                                        "transform": "scale(1)",
                                        "transition": "transform 200ms",
                                      }
                                    }
                                    isChecked={true}
                                  >
                                    <CheckboxTransition
                                      open={true}
                                    >
                                      <AnimatePresence
                                        initial={false}
                                      >
                                        <PresenceChild
                                          initial={false}
                                          isPresent={true}
                                          key=""
                                          presenceAffectsLayout={true}
                                        >
                                          <ForwardRef(MotionComponent)
                                            animate="checked"
                                            exit="unchecked"
                                            initial="unchecked"
                                            style={
                                              Object {
                                                "alignItems": "center",
                                                "display": "flex",
                                                "height": "100%",
                                                "justifyContent": "center",
                                              }
                                            }
                                            variants={
                                              Object {
                                                "checked": Object {
                                                  "scale": 1,
                                                },
                                                "unchecked": Object {
                                                  "scale": 0.5,
                                                },
                                              }
                                            }
                                          >
                                            <div
                                              style={
                                                Object {
                                                  "alignItems": "center",
                                                  "display": "flex",
                                                  "height": "100%",
                                                  "justifyContent": "center",
                                                  "transform": "none",
                                                }
                                              }
                                            >
                                              <CheckIcon
                                                __css={
                                                  Object {
                                                    "color": undefined,
                                                    "fontSize": "0.625rem",
                                                    "opacity": 1,
                                                    "transform": "scale(1)",
                                                    "transition": "transform 200ms",
                                                  }
                                                }
                                              >
                                                <ForwardRef(MotionComponent)
                                                  __css={
                                                    Object {
                                                      "color": undefined,
                                                      "fontSize": "0.625rem",
                                                      "opacity": 1,
                                                      "transform": "scale(1)",
                                                      "transition": "transform 200ms",
                                                    }
                                                  }
                                                  style={
                                                    Object {
                                                      "fill": "none",
                                                      "stroke": "currentColor",
                                                      "strokeDasharray": 16,
                                                      "strokeWidth": 2,
                                                    }
                                                  }
                                                  variants={
                                                    Object {
                                                      "checked": Object {
                                                        "opacity": 1,
                                                        "strokeDashoffset": 0,
                                                        "transition": Object {
                                                          "duration": 0.2,
                                                        },
                                                      },
                                                      "unchecked": Object {
                                                        "opacity": 0,
                                                        "strokeDashoffset": 16,
                                                      },
                                                    }
                                                  }
                                                  viewBox="0 0 12 10"
                                                  width="1.2em"
                                                >
                                                  <Styled(svg)
                                                    __css={
                                                      Object {
                                                        "color": undefined,
                                                        "fontSize": "0.625rem",
                                                        "opacity": 1,
                                                        "transform": "scale(1)",
                                                        "transition": "transform 200ms",
                                                      }
                                                    }
                                                    style={
                                                      Object {
                                                        "fill": "none",
                                                        "opacity": 1,
                                                        "stroke": "currentColor",
                                                        "strokeDasharray": 16,
                                                        "strokeDashoffset": 0,
                                                        "strokeWidth": 2,
                                                      }
                                                    }
                                                    viewBox="0 0 12 10"
                                                    width="1.2em"
                                                  >
                                                    <svg
                                                      className="css-da6t8b"
                                                      style={
                                                        Object {
                                                          "fill": "none",
                                                          "opacity": 1,
                                                          "stroke": "currentColor",
                                                          "strokeDasharray": 16,
                                                          "strokeDashoffset": 0,
                                                          "strokeWidth": 2,
                                                        }
                                                      }
                                                      viewBox="0 0 12 10"
                                                    >
                                                      <polyline
                                                        points="1.5 6 4.5 9 10.5 1"
                                                      />
                                                    </svg>
                                                  </Styled(svg)>
                                                  <Component
                                                    __css={
                                                      Object {
                                                        "color": undefined,
                                                        "fontSize": "0.625rem",
                                                        "opacity": 1,
                                                        "transform": "scale(1)",
                                                        "transition": "transform 200ms",
                                                      }
                                                    }
                                                    key="animation"
                                                    style={
                                                      Object {
                                                        "fill": "none",
                                                        "stroke": "currentColor",
                                                        "strokeDasharray": 16,
                                                        "strokeWidth": 2,
                                                      }
                                                    }
                                                    variants={
                                                      Object {
                                                        "checked": Object {
                                                          "opacity": 1,
                                                          "strokeDashoffset": 0,
                                                          "transition": Object {
                                                            "duration": 0.2,
                                                          },
                                                        },
                                                        "unchecked": Object {
                                                          "opacity": 0,
                                                          "strokeDashoffset": 16,
                                                        },
                                                      }
                                                    }
                                                    viewBox="0 0 12 10"
                                                    visualElement={
                                                      Object {
                                                        "addChild": [Function],
                                                        "addValue": [Function],
                                                        "addVariantChild": [Function],
                                                        "animationState": Object {
                                                          "animateChanges": [Function],
                                                          "getState": [Function],
                                                          "isAnimated": [Function],
                                                          "setActive": [Function],
                                                          "setAnimateFunction": [Function],
                                                        },
                                                        "blockInitialAnimation": true,
                                                        "build": [Function],
                                                        "clearAllListeners": [Function],
                                                        "clearState": [Function],
                                                        "current": <svg
                                                          class="css-da6t8b"
                                                          style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                          viewBox="0 0 12 10"
                                                        >
                                                          <polyline
                                                            points="1.5 6 4.5 9 10.5 1"
                                                          />
                                                        </svg>,
                                                        "depth": 1,
                                                        "enableLayoutProjection": [Function],
                                                        "forEachValue": [Function],
                                                        "getBaseTarget": [Function],
                                                        "getClosestVariantNode": [Function],
                                                        "getDefaultTransition": [Function],
                                                        "getInstance": [Function],
                                                        "getLatestValues": [Function],
                                                        "getLayoutId": [Function],
                                                        "getLayoutState": [Function],
                                                        "getProjectionAnimationProgress": [Function],
                                                        "getProps": [Function],
                                                        "getStaticValue": [Function],
                                                        "getValue": [Function],
                                                        "getVariant": [Function],
                                                        "getVariantContext": [Function],
                                                        "hasValue": [Function],
                                                        "isHoverEventsEnabled": true,
                                                        "isMounted": [Function],
                                                        "isPresenceRoot": false,
                                                        "isPresent": true,
                                                        "isStatic": false,
                                                        "isVisible": undefined,
                                                        "lockProjectionTarget": [Function],
                                                        "makeTargetAnimatable": [Function],
                                                        "manuallyAnimateOnMount": false,
                                                        "measureViewportBox": [Function],
                                                        "notifyAnimationComplete": [Function],
                                                        "notifyAnimationStart": [Function],
                                                        "notifyBeforeLayoutMeasure": [Function],
                                                        "notifyLayoutAnimationComplete": [Function],
                                                        "notifyLayoutMeasure": [Function],
                                                        "notifyLayoutReady": [Function],
                                                        "notifyLayoutUpdate": [Function],
                                                        "notifyRender": [Function],
                                                        "notifySetAxisTarget": [Function],
                                                        "notifyUpdate": [Function],
                                                        "notifyViewportBoxUpdate": [Function],
                                                        "onAnimationComplete": [Function],
                                                        "onAnimationStart": [Function],
                                                        "onBeforeLayoutMeasure": [Function],
                                                        "onLayoutAnimationComplete": [Function],
                                                        "onLayoutMeasure": [Function],
                                                        "onLayoutUpdate": [Function],
                                                        "onRender": [Function],
                                                        "onSetAxisTarget": [Function],
                                                        "onUpdate": [Function],
                                                        "onViewportBoxUpdate": [Function],
                                                        "path": Array [
                                                          Object {
                                                            "addChild": [Function],
                                                            "addValue": [Function],
                                                            "addVariantChild": [Function],
                                                            "animationState": Object {
                                                              "animateChanges": [Function],
                                                              "getState": [Function],
                                                              "isAnimated": [Function],
                                                              "setActive": [Function],
                                                              "setAnimateFunction": [Function],
                                                            },
                                                            "blockInitialAnimation": true,
                                                            "build": [Function],
                                                            "clearAllListeners": [Function],
                                                            "clearState": [Function],
                                                            "current": <div
                                                              style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                            >
                                                              <svg
                                                                class="css-da6t8b"
                                                                style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                viewBox="0 0 12 10"
                                                              >
                                                                <polyline
                                                                  points="1.5 6 4.5 9 10.5 1"
                                                                />
                                                              </svg>
                                                            </div>,
                                                            "depth": 0,
                                                            "enableLayoutProjection": [Function],
                                                            "forEachValue": [Function],
                                                            "getBaseTarget": [Function],
                                                            "getClosestVariantNode": [Function],
                                                            "getDefaultTransition": [Function],
                                                            "getInstance": [Function],
                                                            "getLatestValues": [Function],
                                                            "getLayoutId": [Function],
                                                            "getLayoutState": [Function],
                                                            "getProjectionAnimationProgress": [Function],
                                                            "getProps": [Function],
                                                            "getStaticValue": [Function],
                                                            "getValue": [Function],
                                                            "getVariant": [Function],
                                                            "getVariantContext": [Function],
                                                            "hasValue": [Function],
                                                            "isHoverEventsEnabled": true,
                                                            "isMounted": [Function],
                                                            "isPresenceRoot": true,
                                                            "isPresent": true,
                                                            "isStatic": false,
                                                            "isVisible": undefined,
                                                            "lockProjectionTarget": [Function],
                                                            "makeTargetAnimatable": [Function],
                                                            "manuallyAnimateOnMount": false,
                                                            "measureViewportBox": [Function],
                                                            "notifyAnimationComplete": [Function],
                                                            "notifyAnimationStart": [Function],
                                                            "notifyBeforeLayoutMeasure": [Function],
                                                            "notifyLayoutAnimationComplete": [Function],
                                                            "notifyLayoutMeasure": [Function],
                                                            "notifyLayoutReady": [Function],
                                                            "notifyLayoutUpdate": [Function],
                                                            "notifyRender": [Function],
                                                            "notifySetAxisTarget": [Function],
                                                            "notifyUpdate": [Function],
                                                            "notifyViewportBoxUpdate": [Function],
                                                            "onAnimationComplete": [Function],
                                                            "onAnimationStart": [Function],
                                                            "onBeforeLayoutMeasure": [Function],
                                                            "onLayoutAnimationComplete": [Function],
                                                            "onLayoutMeasure": [Function],
                                                            "onLayoutUpdate": [Function],
                                                            "onRender": [Function],
                                                            "onSetAxisTarget": [Function],
                                                            "onUpdate": [Function],
                                                            "onViewportBoxUpdate": [Function],
                                                            "path": Array [],
                                                            "pointTo": [Function],
                                                            "presence": 0,
                                                            "presenceId": 1,
                                                            "projection": Object {
                                                              "isEnabled": false,
                                                              "isTargetLocked": false,
                                                              "target": Object {
                                                                "x": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                                "y": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                              },
                                                              "targetFinal": Object {
                                                                "x": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                                "y": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                              },
                                                            },
                                                            "readValue": [Function],
                                                            "rebaseProjectionTarget": [Function],
                                                            "ref": [Function],
                                                            "removeValue": [Function],
                                                            "resetTransform": [Function],
                                                            "scheduleRender": [Function],
                                                            "scheduleUpdateLayoutProjection": [Function],
                                                            "setBaseTarget": [Function],
                                                            "setCrossfader": [Function],
                                                            "setProjectionTargetAxis": [Function],
                                                            "setProps": [Function],
                                                            "setStaticValue": [Function],
                                                            "setVisibility": [Function],
                                                            "snapshotViewportBox": [Function],
                                                            "sortNodePosition": [Function],
                                                            "startLayoutAnimation": [Function],
                                                            "stopLayoutAnimation": [Function],
                                                            "suspendHoverEvents": [Function],
                                                            "syncRender": [Function],
                                                            "treeType": "dom",
                                                            "unlockProjectionTarget": [Function],
                                                            "updateLayoutMeasurement": [Function],
                                                            "updateLayoutProjection": [Function],
                                                            "updatePropListeners": [Function],
                                                            "variantChildren": Set {
                                                              [Circular],
                                                            },
                                                            "withoutTransform": [Function],
                                                          },
                                                        ],
                                                        "pointTo": [Function],
                                                        "presence": 0,
                                                        "presenceId": 1,
                                                        "projection": Object {
                                                          "isEnabled": false,
                                                          "isTargetLocked": false,
                                                          "target": Object {
                                                            "x": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                            "y": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                          },
                                                          "targetFinal": Object {
                                                            "x": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                            "y": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                          },
                                                        },
                                                        "readValue": [Function],
                                                        "rebaseProjectionTarget": [Function],
                                                        "ref": [Function],
                                                        "removeValue": [Function],
                                                        "resetTransform": [Function],
                                                        "scheduleRender": [Function],
                                                        "scheduleUpdateLayoutProjection": [Function],
                                                        "setBaseTarget": [Function],
                                                        "setCrossfader": [Function],
                                                        "setProjectionTargetAxis": [Function],
                                                        "setProps": [Function],
                                                        "setStaticValue": [Function],
                                                        "setVisibility": [Function],
                                                        "snapshotViewportBox": [Function],
                                                        "sortNodePosition": [Function],
                                                        "startLayoutAnimation": [Function],
                                                        "stopLayoutAnimation": [Function],
                                                        "suspendHoverEvents": [Function],
                                                        "syncRender": [Function],
                                                        "treeType": "dom",
                                                        "unlockProjectionTarget": [Function],
                                                        "updateLayoutMeasurement": [Function],
                                                        "updateLayoutProjection": [Function],
                                                        "updatePropListeners": [Function],
                                                        "variantChildren": Set {},
                                                        "withoutTransform": [Function],
                                                      }
                                                    }
                                                    width="1.2em"
                                                  />
                                                </ForwardRef(MotionComponent)>
                                              </CheckIcon>
                                            </div>
                                            <Component
                                              animate="checked"
                                              exit="unchecked"
                                              initial="unchecked"
                                              key="animation"
                                              style={
                                                Object {
                                                  "alignItems": "center",
                                                  "display": "flex",
                                                  "height": "100%",
                                                  "justifyContent": "center",
                                                }
                                              }
                                              variants={
                                                Object {
                                                  "checked": Object {
                                                    "scale": 1,
                                                  },
                                                  "unchecked": Object {
                                                    "scale": 0.5,
                                                  },
                                                }
                                              }
                                              visualElement={
                                                Object {
                                                  "addChild": [Function],
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": true,
                                                  "build": [Function],
                                                  "clearAllListeners": [Function],
                                                  "clearState": [Function],
                                                  "current": <div
                                                    style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                  >
                                                    <svg
                                                      class="css-da6t8b"
                                                      style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                      viewBox="0 0 12 10"
                                                    >
                                                      <polyline
                                                        points="1.5 6 4.5 9 10.5 1"
                                                      />
                                                    </svg>
                                                  </div>,
                                                  "depth": 0,
                                                  "enableLayoutProjection": [Function],
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getLayoutState": [Function],
                                                  "getProjectionAnimationProgress": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isHoverEventsEnabled": true,
                                                  "isMounted": [Function],
                                                  "isPresenceRoot": true,
                                                  "isPresent": true,
                                                  "isStatic": false,
                                                  "isVisible": undefined,
                                                  "lockProjectionTarget": [Function],
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutReady": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "path": Array [],
                                                  "pointTo": [Function],
                                                  "presence": 0,
                                                  "presenceId": 1,
                                                  "projection": Object {
                                                    "isEnabled": false,
                                                    "isTargetLocked": false,
                                                    "target": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                    "targetFinal": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                  },
                                                  "readValue": [Function],
                                                  "rebaseProjectionTarget": [Function],
                                                  "ref": [Function],
                                                  "removeValue": [Function],
                                                  "resetTransform": [Function],
                                                  "scheduleRender": [Function],
                                                  "scheduleUpdateLayoutProjection": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setCrossfader": [Function],
                                                  "setProjectionTargetAxis": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "snapshotViewportBox": [Function],
                                                  "sortNodePosition": [Function],
                                                  "startLayoutAnimation": [Function],
                                                  "stopLayoutAnimation": [Function],
                                                  "suspendHoverEvents": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unlockProjectionTarget": [Function],
                                                  "updateLayoutMeasurement": [Function],
                                                  "updateLayoutProjection": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": Set {
                                                    Object {
                                                      "addChild": [Function],
                                                      "addValue": [Function],
                                                      "addVariantChild": [Function],
                                                      "animationState": Object {
                                                        "animateChanges": [Function],
                                                        "getState": [Function],
                                                        "isAnimated": [Function],
                                                        "setActive": [Function],
                                                        "setAnimateFunction": [Function],
                                                      },
                                                      "blockInitialAnimation": true,
                                                      "build": [Function],
                                                      "clearAllListeners": [Function],
                                                      "clearState": [Function],
                                                      "current": <svg
                                                        class="css-da6t8b"
                                                        style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                        viewBox="0 0 12 10"
                                                      >
                                                        <polyline
                                                          points="1.5 6 4.5 9 10.5 1"
                                                        />
                                                      </svg>,
                                                      "depth": 1,
                                                      "enableLayoutProjection": [Function],
                                                      "forEachValue": [Function],
                                                      "getBaseTarget": [Function],
                                                      "getClosestVariantNode": [Function],
                                                      "getDefaultTransition": [Function],
                                                      "getInstance": [Function],
                                                      "getLatestValues": [Function],
                                                      "getLayoutId": [Function],
                                                      "getLayoutState": [Function],
                                                      "getProjectionAnimationProgress": [Function],
                                                      "getProps": [Function],
                                                      "getStaticValue": [Function],
                                                      "getValue": [Function],
                                                      "getVariant": [Function],
                                                      "getVariantContext": [Function],
                                                      "hasValue": [Function],
                                                      "isHoverEventsEnabled": true,
                                                      "isMounted": [Function],
                                                      "isPresenceRoot": false,
                                                      "isPresent": true,
                                                      "isStatic": false,
                                                      "isVisible": undefined,
                                                      "lockProjectionTarget": [Function],
                                                      "makeTargetAnimatable": [Function],
                                                      "manuallyAnimateOnMount": false,
                                                      "measureViewportBox": [Function],
                                                      "notifyAnimationComplete": [Function],
                                                      "notifyAnimationStart": [Function],
                                                      "notifyBeforeLayoutMeasure": [Function],
                                                      "notifyLayoutAnimationComplete": [Function],
                                                      "notifyLayoutMeasure": [Function],
                                                      "notifyLayoutReady": [Function],
                                                      "notifyLayoutUpdate": [Function],
                                                      "notifyRender": [Function],
                                                      "notifySetAxisTarget": [Function],
                                                      "notifyUpdate": [Function],
                                                      "notifyViewportBoxUpdate": [Function],
                                                      "onAnimationComplete": [Function],
                                                      "onAnimationStart": [Function],
                                                      "onBeforeLayoutMeasure": [Function],
                                                      "onLayoutAnimationComplete": [Function],
                                                      "onLayoutMeasure": [Function],
                                                      "onLayoutUpdate": [Function],
                                                      "onRender": [Function],
                                                      "onSetAxisTarget": [Function],
                                                      "onUpdate": [Function],
                                                      "onViewportBoxUpdate": [Function],
                                                      "path": Array [
                                                        [Circular],
                                                      ],
                                                      "pointTo": [Function],
                                                      "presence": 0,
                                                      "presenceId": 1,
                                                      "projection": Object {
                                                        "isEnabled": false,
                                                        "isTargetLocked": false,
                                                        "target": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                        "targetFinal": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                      },
                                                      "readValue": [Function],
                                                      "rebaseProjectionTarget": [Function],
                                                      "ref": [Function],
                                                      "removeValue": [Function],
                                                      "resetTransform": [Function],
                                                      "scheduleRender": [Function],
                                                      "scheduleUpdateLayoutProjection": [Function],
                                                      "setBaseTarget": [Function],
                                                      "setCrossfader": [Function],
                                                      "setProjectionTargetAxis": [Function],
                                                      "setProps": [Function],
                                                      "setStaticValue": [Function],
                                                      "setVisibility": [Function],
                                                      "snapshotViewportBox": [Function],
                                                      "sortNodePosition": [Function],
                                                      "startLayoutAnimation": [Function],
                                                      "stopLayoutAnimation": [Function],
                                                      "suspendHoverEvents": [Function],
                                                      "syncRender": [Function],
                                                      "treeType": "dom",
                                                      "unlockProjectionTarget": [Function],
                                                      "updateLayoutMeasurement": [Function],
                                                      "updateLayoutProjection": [Function],
                                                      "updatePropListeners": [Function],
                                                      "variantChildren": Set {},
                                                      "withoutTransform": [Function],
                                                    },
                                                  },
                                                  "withoutTransform": [Function],
                                                }
                                              }
                                            />
                                            <Component
                                              animate="checked"
                                              exit="unchecked"
                                              initial="unchecked"
                                              key="exit"
                                              style={
                                                Object {
                                                  "alignItems": "center",
                                                  "display": "flex",
                                                  "height": "100%",
                                                  "justifyContent": "center",
                                                }
                                              }
                                              variants={
                                                Object {
                                                  "checked": Object {
                                                    "scale": 1,
                                                  },
                                                  "unchecked": Object {
                                                    "scale": 0.5,
                                                  },
                                                }
                                              }
                                              visualElement={
                                                Object {
                                                  "addChild": [Function],
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": true,
                                                  "build": [Function],
                                                  "clearAllListeners": [Function],
                                                  "clearState": [Function],
                                                  "current": <div
                                                    style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                  >
                                                    <svg
                                                      class="css-da6t8b"
                                                      style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                      viewBox="0 0 12 10"
                                                    >
                                                      <polyline
                                                        points="1.5 6 4.5 9 10.5 1"
                                                      />
                                                    </svg>
                                                  </div>,
                                                  "depth": 0,
                                                  "enableLayoutProjection": [Function],
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getLayoutState": [Function],
                                                  "getProjectionAnimationProgress": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isHoverEventsEnabled": true,
                                                  "isMounted": [Function],
                                                  "isPresenceRoot": true,
                                                  "isPresent": true,
                                                  "isStatic": false,
                                                  "isVisible": undefined,
                                                  "lockProjectionTarget": [Function],
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutReady": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "path": Array [],
                                                  "pointTo": [Function],
                                                  "presence": 0,
                                                  "presenceId": 1,
                                                  "projection": Object {
                                                    "isEnabled": false,
                                                    "isTargetLocked": false,
                                                    "target": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                    "targetFinal": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                  },
                                                  "readValue": [Function],
                                                  "rebaseProjectionTarget": [Function],
                                                  "ref": [Function],
                                                  "removeValue": [Function],
                                                  "resetTransform": [Function],
                                                  "scheduleRender": [Function],
                                                  "scheduleUpdateLayoutProjection": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setCrossfader": [Function],
                                                  "setProjectionTargetAxis": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "snapshotViewportBox": [Function],
                                                  "sortNodePosition": [Function],
                                                  "startLayoutAnimation": [Function],
                                                  "stopLayoutAnimation": [Function],
                                                  "suspendHoverEvents": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unlockProjectionTarget": [Function],
                                                  "updateLayoutMeasurement": [Function],
                                                  "updateLayoutProjection": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": Set {
                                                    Object {
                                                      "addChild": [Function],
                                                      "addValue": [Function],
                                                      "addVariantChild": [Function],
                                                      "animationState": Object {
                                                        "animateChanges": [Function],
                                                        "getState": [Function],
                                                        "isAnimated": [Function],
                                                        "setActive": [Function],
                                                        "setAnimateFunction": [Function],
                                                      },
                                                      "blockInitialAnimation": true,
                                                      "build": [Function],
                                                      "clearAllListeners": [Function],
                                                      "clearState": [Function],
                                                      "current": <svg
                                                        class="css-da6t8b"
                                                        style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                        viewBox="0 0 12 10"
                                                      >
                                                        <polyline
                                                          points="1.5 6 4.5 9 10.5 1"
                                                        />
                                                      </svg>,
                                                      "depth": 1,
                                                      "enableLayoutProjection": [Function],
                                                      "forEachValue": [Function],
                                                      "getBaseTarget": [Function],
                                                      "getClosestVariantNode": [Function],
                                                      "getDefaultTransition": [Function],
                                                      "getInstance": [Function],
                                                      "getLatestValues": [Function],
                                                      "getLayoutId": [Function],
                                                      "getLayoutState": [Function],
                                                      "getProjectionAnimationProgress": [Function],
                                                      "getProps": [Function],
                                                      "getStaticValue": [Function],
                                                      "getValue": [Function],
                                                      "getVariant": [Function],
                                                      "getVariantContext": [Function],
                                                      "hasValue": [Function],
                                                      "isHoverEventsEnabled": true,
                                                      "isMounted": [Function],
                                                      "isPresenceRoot": false,
                                                      "isPresent": true,
                                                      "isStatic": false,
                                                      "isVisible": undefined,
                                                      "lockProjectionTarget": [Function],
                                                      "makeTargetAnimatable": [Function],
                                                      "manuallyAnimateOnMount": false,
                                                      "measureViewportBox": [Function],
                                                      "notifyAnimationComplete": [Function],
                                                      "notifyAnimationStart": [Function],
                                                      "notifyBeforeLayoutMeasure": [Function],
                                                      "notifyLayoutAnimationComplete": [Function],
                                                      "notifyLayoutMeasure": [Function],
                                                      "notifyLayoutReady": [Function],
                                                      "notifyLayoutUpdate": [Function],
                                                      "notifyRender": [Function],
                                                      "notifySetAxisTarget": [Function],
                                                      "notifyUpdate": [Function],
                                                      "notifyViewportBoxUpdate": [Function],
                                                      "onAnimationComplete": [Function],
                                                      "onAnimationStart": [Function],
                                                      "onBeforeLayoutMeasure": [Function],
                                                      "onLayoutAnimationComplete": [Function],
                                                      "onLayoutMeasure": [Function],
                                                      "onLayoutUpdate": [Function],
                                                      "onRender": [Function],
                                                      "onSetAxisTarget": [Function],
                                                      "onUpdate": [Function],
                                                      "onViewportBoxUpdate": [Function],
                                                      "path": Array [
                                                        [Circular],
                                                      ],
                                                      "pointTo": [Function],
                                                      "presence": 0,
                                                      "presenceId": 1,
                                                      "projection": Object {
                                                        "isEnabled": false,
                                                        "isTargetLocked": false,
                                                        "target": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                        "targetFinal": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                      },
                                                      "readValue": [Function],
                                                      "rebaseProjectionTarget": [Function],
                                                      "ref": [Function],
                                                      "removeValue": [Function],
                                                      "resetTransform": [Function],
                                                      "scheduleRender": [Function],
                                                      "scheduleUpdateLayoutProjection": [Function],
                                                      "setBaseTarget": [Function],
                                                      "setCrossfader": [Function],
                                                      "setProjectionTargetAxis": [Function],
                                                      "setProps": [Function],
                                                      "setStaticValue": [Function],
                                                      "setVisibility": [Function],
                                                      "snapshotViewportBox": [Function],
                                                      "sortNodePosition": [Function],
                                                      "startLayoutAnimation": [Function],
                                                      "stopLayoutAnimation": [Function],
                                                      "suspendHoverEvents": [Function],
                                                      "syncRender": [Function],
                                                      "treeType": "dom",
                                                      "unlockProjectionTarget": [Function],
                                                      "updateLayoutMeasurement": [Function],
                                                      "updateLayoutProjection": [Function],
                                                      "updatePropListeners": [Function],
                                                      "variantChildren": Set {},
                                                      "withoutTransform": [Function],
                                                    },
                                                  },
                                                  "withoutTransform": [Function],
                                                }
                                              }
                                            />
                                          </ForwardRef(MotionComponent)>
                                        </PresenceChild>
                                      </AnimatePresence>
                                    </CheckboxTransition>
                                  </CheckboxIcon>
                                </span>
                              </Styled(span)>
                              <Styled(span)
                                __css={
                                  Object {
                                    "_disabled": Object {
                                      "opacity": 0.4,
                                    },
                                    "fontSize": "md",
                                    "marginStart": "0.5rem",
                                    "userSelect": "none",
                                  }
                                }
                                className="chakra-checkbox__label"
                                data-checked=""
                                onMouseDown={[Function]}
                                onTouchStart={[Function]}
                              >
                                <span
                                  className="chakra-checkbox__label css-1sgc0qu"
                                  data-checked=""
                                  onMouseDown={[Function]}
                                  onTouchStart={[Function]}
                                >
                                  Tue
                                </span>
                              </Styled(span)>
                            </label>
                          </Styled(label)>
                        </Checkbox>
                      </Day>
                      <Day
                        day="Wednesday"
                        isChecked={true}
                        key="Wednesday"
                        update={[MockFunction]}
                      >
                        <Checkbox
                          fontWeight="normal"
                          isChecked={true}
                          onChange={[Function]}
                        >
                          <Styled(label)
                            __css={Object {}}
                            className="chakra-checkbox"
                            fontWeight="normal"
                            onClick={[Function]}
                          >
                            <label
                              className="chakra-checkbox css-fnpc6t"
                              onClick={[Function]}
                            >
                              <input
                                checked={true}
                                className="chakra-checkbox__input"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                style={
                                  Object {
                                    "border": "0px",
                                    "clip": "rect(0px, 0px, 0px, 0px)",
                                    "height": "1px",
                                    "margin": "-1px",
                                    "overflow": "hidden",
                                    "padding": "0px",
                                    "position": "absolute",
                                    "whiteSpace": "nowrap",
                                    "width": "1px",
                                  }
                                }
                                type="checkbox"
                              />
                              <Styled(span)
                                __css={
                                  Object {
                                    "_checked": Object {
                                      "_disabled": Object {
                                        "bg": "gray.200",
                                        "borderColor": "gray.200",
                                        "color": "gray.500",
                                      },
                                      "_hover": Object {
                                        "bg": "blue.600",
                                        "borderColor": "blue.600",
                                      },
                                      "bg": "blue.500",
                                      "borderColor": "blue.500",
                                      "color": "white",
                                    },
                                    "_disabled": Object {
                                      "bg": "gray.100",
                                      "borderColor": "gray.100",
                                    },
                                    "_focus": Object {
                                      "boxShadow": "outline",
                                    },
                                    "_indeterminate": Object {
                                      "bg": "blue.500",
                                      "borderColor": "blue.500",
                                      "color": "white",
                                    },
                                    "_invalid": Object {
                                      "borderColor": "red.500",
                                    },
                                    "border": "2px solid",
                                    "borderColor": "inherit",
                                    "borderRadius": "sm",
                                    "color": "white",
                                    "h": 4,
                                    "transition": "box-shadow 250ms",
                                    "w": 4,
                                  }
                                }
                                aria-hidden={true}
                                className="chakra-checkbox__control"
                                data-checked=""
                                onMouseDown={[Function]}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <span
                                  aria-hidden={true}
                                  className="chakra-checkbox__control css-joz5u0"
                                  data-checked=""
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  <CheckboxIcon
                                    __css={
                                      Object {
                                        "color": undefined,
                                        "fontSize": "0.625rem",
                                        "opacity": 1,
                                        "transform": "scale(1)",
                                        "transition": "transform 200ms",
                                      }
                                    }
                                    isChecked={true}
                                  >
                                    <CheckboxTransition
                                      open={true}
                                    >
                                      <AnimatePresence
                                        initial={false}
                                      >
                                        <PresenceChild
                                          initial={false}
                                          isPresent={true}
                                          key=""
                                          presenceAffectsLayout={true}
                                        >
                                          <ForwardRef(MotionComponent)
                                            animate="checked"
                                            exit="unchecked"
                                            initial="unchecked"
                                            style={
                                              Object {
                                                "alignItems": "center",
                                                "display": "flex",
                                                "height": "100%",
                                                "justifyContent": "center",
                                              }
                                            }
                                            variants={
                                              Object {
                                                "checked": Object {
                                                  "scale": 1,
                                                },
                                                "unchecked": Object {
                                                  "scale": 0.5,
                                                },
                                              }
                                            }
                                          >
                                            <div
                                              style={
                                                Object {
                                                  "alignItems": "center",
                                                  "display": "flex",
                                                  "height": "100%",
                                                  "justifyContent": "center",
                                                  "transform": "none",
                                                }
                                              }
                                            >
                                              <CheckIcon
                                                __css={
                                                  Object {
                                                    "color": undefined,
                                                    "fontSize": "0.625rem",
                                                    "opacity": 1,
                                                    "transform": "scale(1)",
                                                    "transition": "transform 200ms",
                                                  }
                                                }
                                              >
                                                <ForwardRef(MotionComponent)
                                                  __css={
                                                    Object {
                                                      "color": undefined,
                                                      "fontSize": "0.625rem",
                                                      "opacity": 1,
                                                      "transform": "scale(1)",
                                                      "transition": "transform 200ms",
                                                    }
                                                  }
                                                  style={
                                                    Object {
                                                      "fill": "none",
                                                      "stroke": "currentColor",
                                                      "strokeDasharray": 16,
                                                      "strokeWidth": 2,
                                                    }
                                                  }
                                                  variants={
                                                    Object {
                                                      "checked": Object {
                                                        "opacity": 1,
                                                        "strokeDashoffset": 0,
                                                        "transition": Object {
                                                          "duration": 0.2,
                                                        },
                                                      },
                                                      "unchecked": Object {
                                                        "opacity": 0,
                                                        "strokeDashoffset": 16,
                                                      },
                                                    }
                                                  }
                                                  viewBox="0 0 12 10"
                                                  width="1.2em"
                                                >
                                                  <Styled(svg)
                                                    __css={
                                                      Object {
                                                        "color": undefined,
                                                        "fontSize": "0.625rem",
                                                        "opacity": 1,
                                                        "transform": "scale(1)",
                                                        "transition": "transform 200ms",
                                                      }
                                                    }
                                                    style={
                                                      Object {
                                                        "fill": "none",
                                                        "opacity": 1,
                                                        "stroke": "currentColor",
                                                        "strokeDasharray": 16,
                                                        "strokeDashoffset": 0,
                                                        "strokeWidth": 2,
                                                      }
                                                    }
                                                    viewBox="0 0 12 10"
                                                    width="1.2em"
                                                  >
                                                    <svg
                                                      className="css-da6t8b"
                                                      style={
                                                        Object {
                                                          "fill": "none",
                                                          "opacity": 1,
                                                          "stroke": "currentColor",
                                                          "strokeDasharray": 16,
                                                          "strokeDashoffset": 0,
                                                          "strokeWidth": 2,
                                                        }
                                                      }
                                                      viewBox="0 0 12 10"
                                                    >
                                                      <polyline
                                                        points="1.5 6 4.5 9 10.5 1"
                                                      />
                                                    </svg>
                                                  </Styled(svg)>
                                                  <Component
                                                    __css={
                                                      Object {
                                                        "color": undefined,
                                                        "fontSize": "0.625rem",
                                                        "opacity": 1,
                                                        "transform": "scale(1)",
                                                        "transition": "transform 200ms",
                                                      }
                                                    }
                                                    key="animation"
                                                    style={
                                                      Object {
                                                        "fill": "none",
                                                        "stroke": "currentColor",
                                                        "strokeDasharray": 16,
                                                        "strokeWidth": 2,
                                                      }
                                                    }
                                                    variants={
                                                      Object {
                                                        "checked": Object {
                                                          "opacity": 1,
                                                          "strokeDashoffset": 0,
                                                          "transition": Object {
                                                            "duration": 0.2,
                                                          },
                                                        },
                                                        "unchecked": Object {
                                                          "opacity": 0,
                                                          "strokeDashoffset": 16,
                                                        },
                                                      }
                                                    }
                                                    viewBox="0 0 12 10"
                                                    visualElement={
                                                      Object {
                                                        "addChild": [Function],
                                                        "addValue": [Function],
                                                        "addVariantChild": [Function],
                                                        "animationState": Object {
                                                          "animateChanges": [Function],
                                                          "getState": [Function],
                                                          "isAnimated": [Function],
                                                          "setActive": [Function],
                                                          "setAnimateFunction": [Function],
                                                        },
                                                        "blockInitialAnimation": true,
                                                        "build": [Function],
                                                        "clearAllListeners": [Function],
                                                        "clearState": [Function],
                                                        "current": <svg
                                                          class="css-da6t8b"
                                                          style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                          viewBox="0 0 12 10"
                                                        >
                                                          <polyline
                                                            points="1.5 6 4.5 9 10.5 1"
                                                          />
                                                        </svg>,
                                                        "depth": 1,
                                                        "enableLayoutProjection": [Function],
                                                        "forEachValue": [Function],
                                                        "getBaseTarget": [Function],
                                                        "getClosestVariantNode": [Function],
                                                        "getDefaultTransition": [Function],
                                                        "getInstance": [Function],
                                                        "getLatestValues": [Function],
                                                        "getLayoutId": [Function],
                                                        "getLayoutState": [Function],
                                                        "getProjectionAnimationProgress": [Function],
                                                        "getProps": [Function],
                                                        "getStaticValue": [Function],
                                                        "getValue": [Function],
                                                        "getVariant": [Function],
                                                        "getVariantContext": [Function],
                                                        "hasValue": [Function],
                                                        "isHoverEventsEnabled": true,
                                                        "isMounted": [Function],
                                                        "isPresenceRoot": false,
                                                        "isPresent": true,
                                                        "isStatic": false,
                                                        "isVisible": undefined,
                                                        "lockProjectionTarget": [Function],
                                                        "makeTargetAnimatable": [Function],
                                                        "manuallyAnimateOnMount": false,
                                                        "measureViewportBox": [Function],
                                                        "notifyAnimationComplete": [Function],
                                                        "notifyAnimationStart": [Function],
                                                        "notifyBeforeLayoutMeasure": [Function],
                                                        "notifyLayoutAnimationComplete": [Function],
                                                        "notifyLayoutMeasure": [Function],
                                                        "notifyLayoutReady": [Function],
                                                        "notifyLayoutUpdate": [Function],
                                                        "notifyRender": [Function],
                                                        "notifySetAxisTarget": [Function],
                                                        "notifyUpdate": [Function],
                                                        "notifyViewportBoxUpdate": [Function],
                                                        "onAnimationComplete": [Function],
                                                        "onAnimationStart": [Function],
                                                        "onBeforeLayoutMeasure": [Function],
                                                        "onLayoutAnimationComplete": [Function],
                                                        "onLayoutMeasure": [Function],
                                                        "onLayoutUpdate": [Function],
                                                        "onRender": [Function],
                                                        "onSetAxisTarget": [Function],
                                                        "onUpdate": [Function],
                                                        "onViewportBoxUpdate": [Function],
                                                        "path": Array [
                                                          Object {
                                                            "addChild": [Function],
                                                            "addValue": [Function],
                                                            "addVariantChild": [Function],
                                                            "animationState": Object {
                                                              "animateChanges": [Function],
                                                              "getState": [Function],
                                                              "isAnimated": [Function],
                                                              "setActive": [Function],
                                                              "setAnimateFunction": [Function],
                                                            },
                                                            "blockInitialAnimation": true,
                                                            "build": [Function],
                                                            "clearAllListeners": [Function],
                                                            "clearState": [Function],
                                                            "current": <div
                                                              style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                            >
                                                              <svg
                                                                class="css-da6t8b"
                                                                style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                viewBox="0 0 12 10"
                                                              >
                                                                <polyline
                                                                  points="1.5 6 4.5 9 10.5 1"
                                                                />
                                                              </svg>
                                                            </div>,
                                                            "depth": 0,
                                                            "enableLayoutProjection": [Function],
                                                            "forEachValue": [Function],
                                                            "getBaseTarget": [Function],
                                                            "getClosestVariantNode": [Function],
                                                            "getDefaultTransition": [Function],
                                                            "getInstance": [Function],
                                                            "getLatestValues": [Function],
                                                            "getLayoutId": [Function],
                                                            "getLayoutState": [Function],
                                                            "getProjectionAnimationProgress": [Function],
                                                            "getProps": [Function],
                                                            "getStaticValue": [Function],
                                                            "getValue": [Function],
                                                            "getVariant": [Function],
                                                            "getVariantContext": [Function],
                                                            "hasValue": [Function],
                                                            "isHoverEventsEnabled": true,
                                                            "isMounted": [Function],
                                                            "isPresenceRoot": true,
                                                            "isPresent": true,
                                                            "isStatic": false,
                                                            "isVisible": undefined,
                                                            "lockProjectionTarget": [Function],
                                                            "makeTargetAnimatable": [Function],
                                                            "manuallyAnimateOnMount": false,
                                                            "measureViewportBox": [Function],
                                                            "notifyAnimationComplete": [Function],
                                                            "notifyAnimationStart": [Function],
                                                            "notifyBeforeLayoutMeasure": [Function],
                                                            "notifyLayoutAnimationComplete": [Function],
                                                            "notifyLayoutMeasure": [Function],
                                                            "notifyLayoutReady": [Function],
                                                            "notifyLayoutUpdate": [Function],
                                                            "notifyRender": [Function],
                                                            "notifySetAxisTarget": [Function],
                                                            "notifyUpdate": [Function],
                                                            "notifyViewportBoxUpdate": [Function],
                                                            "onAnimationComplete": [Function],
                                                            "onAnimationStart": [Function],
                                                            "onBeforeLayoutMeasure": [Function],
                                                            "onLayoutAnimationComplete": [Function],
                                                            "onLayoutMeasure": [Function],
                                                            "onLayoutUpdate": [Function],
                                                            "onRender": [Function],
                                                            "onSetAxisTarget": [Function],
                                                            "onUpdate": [Function],
                                                            "onViewportBoxUpdate": [Function],
                                                            "path": Array [],
                                                            "pointTo": [Function],
                                                            "presence": 0,
                                                            "presenceId": 2,
                                                            "projection": Object {
                                                              "isEnabled": false,
                                                              "isTargetLocked": false,
                                                              "target": Object {
                                                                "x": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                                "y": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                              },
                                                              "targetFinal": Object {
                                                                "x": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                                "y": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                              },
                                                            },
                                                            "readValue": [Function],
                                                            "rebaseProjectionTarget": [Function],
                                                            "ref": [Function],
                                                            "removeValue": [Function],
                                                            "resetTransform": [Function],
                                                            "scheduleRender": [Function],
                                                            "scheduleUpdateLayoutProjection": [Function],
                                                            "setBaseTarget": [Function],
                                                            "setCrossfader": [Function],
                                                            "setProjectionTargetAxis": [Function],
                                                            "setProps": [Function],
                                                            "setStaticValue": [Function],
                                                            "setVisibility": [Function],
                                                            "snapshotViewportBox": [Function],
                                                            "sortNodePosition": [Function],
                                                            "startLayoutAnimation": [Function],
                                                            "stopLayoutAnimation": [Function],
                                                            "suspendHoverEvents": [Function],
                                                            "syncRender": [Function],
                                                            "treeType": "dom",
                                                            "unlockProjectionTarget": [Function],
                                                            "updateLayoutMeasurement": [Function],
                                                            "updateLayoutProjection": [Function],
                                                            "updatePropListeners": [Function],
                                                            "variantChildren": Set {
                                                              [Circular],
                                                            },
                                                            "withoutTransform": [Function],
                                                          },
                                                        ],
                                                        "pointTo": [Function],
                                                        "presence": 0,
                                                        "presenceId": 2,
                                                        "projection": Object {
                                                          "isEnabled": false,
                                                          "isTargetLocked": false,
                                                          "target": Object {
                                                            "x": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                            "y": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                          },
                                                          "targetFinal": Object {
                                                            "x": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                            "y": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                          },
                                                        },
                                                        "readValue": [Function],
                                                        "rebaseProjectionTarget": [Function],
                                                        "ref": [Function],
                                                        "removeValue": [Function],
                                                        "resetTransform": [Function],
                                                        "scheduleRender": [Function],
                                                        "scheduleUpdateLayoutProjection": [Function],
                                                        "setBaseTarget": [Function],
                                                        "setCrossfader": [Function],
                                                        "setProjectionTargetAxis": [Function],
                                                        "setProps": [Function],
                                                        "setStaticValue": [Function],
                                                        "setVisibility": [Function],
                                                        "snapshotViewportBox": [Function],
                                                        "sortNodePosition": [Function],
                                                        "startLayoutAnimation": [Function],
                                                        "stopLayoutAnimation": [Function],
                                                        "suspendHoverEvents": [Function],
                                                        "syncRender": [Function],
                                                        "treeType": "dom",
                                                        "unlockProjectionTarget": [Function],
                                                        "updateLayoutMeasurement": [Function],
                                                        "updateLayoutProjection": [Function],
                                                        "updatePropListeners": [Function],
                                                        "variantChildren": Set {},
                                                        "withoutTransform": [Function],
                                                      }
                                                    }
                                                    width="1.2em"
                                                  />
                                                </ForwardRef(MotionComponent)>
                                              </CheckIcon>
                                            </div>
                                            <Component
                                              animate="checked"
                                              exit="unchecked"
                                              initial="unchecked"
                                              key="animation"
                                              style={
                                                Object {
                                                  "alignItems": "center",
                                                  "display": "flex",
                                                  "height": "100%",
                                                  "justifyContent": "center",
                                                }
                                              }
                                              variants={
                                                Object {
                                                  "checked": Object {
                                                    "scale": 1,
                                                  },
                                                  "unchecked": Object {
                                                    "scale": 0.5,
                                                  },
                                                }
                                              }
                                              visualElement={
                                                Object {
                                                  "addChild": [Function],
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": true,
                                                  "build": [Function],
                                                  "clearAllListeners": [Function],
                                                  "clearState": [Function],
                                                  "current": <div
                                                    style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                  >
                                                    <svg
                                                      class="css-da6t8b"
                                                      style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                      viewBox="0 0 12 10"
                                                    >
                                                      <polyline
                                                        points="1.5 6 4.5 9 10.5 1"
                                                      />
                                                    </svg>
                                                  </div>,
                                                  "depth": 0,
                                                  "enableLayoutProjection": [Function],
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getLayoutState": [Function],
                                                  "getProjectionAnimationProgress": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isHoverEventsEnabled": true,
                                                  "isMounted": [Function],
                                                  "isPresenceRoot": true,
                                                  "isPresent": true,
                                                  "isStatic": false,
                                                  "isVisible": undefined,
                                                  "lockProjectionTarget": [Function],
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutReady": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "path": Array [],
                                                  "pointTo": [Function],
                                                  "presence": 0,
                                                  "presenceId": 2,
                                                  "projection": Object {
                                                    "isEnabled": false,
                                                    "isTargetLocked": false,
                                                    "target": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                    "targetFinal": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                  },
                                                  "readValue": [Function],
                                                  "rebaseProjectionTarget": [Function],
                                                  "ref": [Function],
                                                  "removeValue": [Function],
                                                  "resetTransform": [Function],
                                                  "scheduleRender": [Function],
                                                  "scheduleUpdateLayoutProjection": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setCrossfader": [Function],
                                                  "setProjectionTargetAxis": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "snapshotViewportBox": [Function],
                                                  "sortNodePosition": [Function],
                                                  "startLayoutAnimation": [Function],
                                                  "stopLayoutAnimation": [Function],
                                                  "suspendHoverEvents": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unlockProjectionTarget": [Function],
                                                  "updateLayoutMeasurement": [Function],
                                                  "updateLayoutProjection": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": Set {
                                                    Object {
                                                      "addChild": [Function],
                                                      "addValue": [Function],
                                                      "addVariantChild": [Function],
                                                      "animationState": Object {
                                                        "animateChanges": [Function],
                                                        "getState": [Function],
                                                        "isAnimated": [Function],
                                                        "setActive": [Function],
                                                        "setAnimateFunction": [Function],
                                                      },
                                                      "blockInitialAnimation": true,
                                                      "build": [Function],
                                                      "clearAllListeners": [Function],
                                                      "clearState": [Function],
                                                      "current": <svg
                                                        class="css-da6t8b"
                                                        style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                        viewBox="0 0 12 10"
                                                      >
                                                        <polyline
                                                          points="1.5 6 4.5 9 10.5 1"
                                                        />
                                                      </svg>,
                                                      "depth": 1,
                                                      "enableLayoutProjection": [Function],
                                                      "forEachValue": [Function],
                                                      "getBaseTarget": [Function],
                                                      "getClosestVariantNode": [Function],
                                                      "getDefaultTransition": [Function],
                                                      "getInstance": [Function],
                                                      "getLatestValues": [Function],
                                                      "getLayoutId": [Function],
                                                      "getLayoutState": [Function],
                                                      "getProjectionAnimationProgress": [Function],
                                                      "getProps": [Function],
                                                      "getStaticValue": [Function],
                                                      "getValue": [Function],
                                                      "getVariant": [Function],
                                                      "getVariantContext": [Function],
                                                      "hasValue": [Function],
                                                      "isHoverEventsEnabled": true,
                                                      "isMounted": [Function],
                                                      "isPresenceRoot": false,
                                                      "isPresent": true,
                                                      "isStatic": false,
                                                      "isVisible": undefined,
                                                      "lockProjectionTarget": [Function],
                                                      "makeTargetAnimatable": [Function],
                                                      "manuallyAnimateOnMount": false,
                                                      "measureViewportBox": [Function],
                                                      "notifyAnimationComplete": [Function],
                                                      "notifyAnimationStart": [Function],
                                                      "notifyBeforeLayoutMeasure": [Function],
                                                      "notifyLayoutAnimationComplete": [Function],
                                                      "notifyLayoutMeasure": [Function],
                                                      "notifyLayoutReady": [Function],
                                                      "notifyLayoutUpdate": [Function],
                                                      "notifyRender": [Function],
                                                      "notifySetAxisTarget": [Function],
                                                      "notifyUpdate": [Function],
                                                      "notifyViewportBoxUpdate": [Function],
                                                      "onAnimationComplete": [Function],
                                                      "onAnimationStart": [Function],
                                                      "onBeforeLayoutMeasure": [Function],
                                                      "onLayoutAnimationComplete": [Function],
                                                      "onLayoutMeasure": [Function],
                                                      "onLayoutUpdate": [Function],
                                                      "onRender": [Function],
                                                      "onSetAxisTarget": [Function],
                                                      "onUpdate": [Function],
                                                      "onViewportBoxUpdate": [Function],
                                                      "path": Array [
                                                        [Circular],
                                                      ],
                                                      "pointTo": [Function],
                                                      "presence": 0,
                                                      "presenceId": 2,
                                                      "projection": Object {
                                                        "isEnabled": false,
                                                        "isTargetLocked": false,
                                                        "target": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                        "targetFinal": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                      },
                                                      "readValue": [Function],
                                                      "rebaseProjectionTarget": [Function],
                                                      "ref": [Function],
                                                      "removeValue": [Function],
                                                      "resetTransform": [Function],
                                                      "scheduleRender": [Function],
                                                      "scheduleUpdateLayoutProjection": [Function],
                                                      "setBaseTarget": [Function],
                                                      "setCrossfader": [Function],
                                                      "setProjectionTargetAxis": [Function],
                                                      "setProps": [Function],
                                                      "setStaticValue": [Function],
                                                      "setVisibility": [Function],
                                                      "snapshotViewportBox": [Function],
                                                      "sortNodePosition": [Function],
                                                      "startLayoutAnimation": [Function],
                                                      "stopLayoutAnimation": [Function],
                                                      "suspendHoverEvents": [Function],
                                                      "syncRender": [Function],
                                                      "treeType": "dom",
                                                      "unlockProjectionTarget": [Function],
                                                      "updateLayoutMeasurement": [Function],
                                                      "updateLayoutProjection": [Function],
                                                      "updatePropListeners": [Function],
                                                      "variantChildren": Set {},
                                                      "withoutTransform": [Function],
                                                    },
                                                  },
                                                  "withoutTransform": [Function],
                                                }
                                              }
                                            />
                                            <Component
                                              animate="checked"
                                              exit="unchecked"
                                              initial="unchecked"
                                              key="exit"
                                              style={
                                                Object {
                                                  "alignItems": "center",
                                                  "display": "flex",
                                                  "height": "100%",
                                                  "justifyContent": "center",
                                                }
                                              }
                                              variants={
                                                Object {
                                                  "checked": Object {
                                                    "scale": 1,
                                                  },
                                                  "unchecked": Object {
                                                    "scale": 0.5,
                                                  },
                                                }
                                              }
                                              visualElement={
                                                Object {
                                                  "addChild": [Function],
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": true,
                                                  "build": [Function],
                                                  "clearAllListeners": [Function],
                                                  "clearState": [Function],
                                                  "current": <div
                                                    style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                  >
                                                    <svg
                                                      class="css-da6t8b"
                                                      style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                      viewBox="0 0 12 10"
                                                    >
                                                      <polyline
                                                        points="1.5 6 4.5 9 10.5 1"
                                                      />
                                                    </svg>
                                                  </div>,
                                                  "depth": 0,
                                                  "enableLayoutProjection": [Function],
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getLayoutState": [Function],
                                                  "getProjectionAnimationProgress": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isHoverEventsEnabled": true,
                                                  "isMounted": [Function],
                                                  "isPresenceRoot": true,
                                                  "isPresent": true,
                                                  "isStatic": false,
                                                  "isVisible": undefined,
                                                  "lockProjectionTarget": [Function],
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutReady": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "path": Array [],
                                                  "pointTo": [Function],
                                                  "presence": 0,
                                                  "presenceId": 2,
                                                  "projection": Object {
                                                    "isEnabled": false,
                                                    "isTargetLocked": false,
                                                    "target": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                    "targetFinal": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                  },
                                                  "readValue": [Function],
                                                  "rebaseProjectionTarget": [Function],
                                                  "ref": [Function],
                                                  "removeValue": [Function],
                                                  "resetTransform": [Function],
                                                  "scheduleRender": [Function],
                                                  "scheduleUpdateLayoutProjection": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setCrossfader": [Function],
                                                  "setProjectionTargetAxis": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "snapshotViewportBox": [Function],
                                                  "sortNodePosition": [Function],
                                                  "startLayoutAnimation": [Function],
                                                  "stopLayoutAnimation": [Function],
                                                  "suspendHoverEvents": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unlockProjectionTarget": [Function],
                                                  "updateLayoutMeasurement": [Function],
                                                  "updateLayoutProjection": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": Set {
                                                    Object {
                                                      "addChild": [Function],
                                                      "addValue": [Function],
                                                      "addVariantChild": [Function],
                                                      "animationState": Object {
                                                        "animateChanges": [Function],
                                                        "getState": [Function],
                                                        "isAnimated": [Function],
                                                        "setActive": [Function],
                                                        "setAnimateFunction": [Function],
                                                      },
                                                      "blockInitialAnimation": true,
                                                      "build": [Function],
                                                      "clearAllListeners": [Function],
                                                      "clearState": [Function],
                                                      "current": <svg
                                                        class="css-da6t8b"
                                                        style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                        viewBox="0 0 12 10"
                                                      >
                                                        <polyline
                                                          points="1.5 6 4.5 9 10.5 1"
                                                        />
                                                      </svg>,
                                                      "depth": 1,
                                                      "enableLayoutProjection": [Function],
                                                      "forEachValue": [Function],
                                                      "getBaseTarget": [Function],
                                                      "getClosestVariantNode": [Function],
                                                      "getDefaultTransition": [Function],
                                                      "getInstance": [Function],
                                                      "getLatestValues": [Function],
                                                      "getLayoutId": [Function],
                                                      "getLayoutState": [Function],
                                                      "getProjectionAnimationProgress": [Function],
                                                      "getProps": [Function],
                                                      "getStaticValue": [Function],
                                                      "getValue": [Function],
                                                      "getVariant": [Function],
                                                      "getVariantContext": [Function],
                                                      "hasValue": [Function],
                                                      "isHoverEventsEnabled": true,
                                                      "isMounted": [Function],
                                                      "isPresenceRoot": false,
                                                      "isPresent": true,
                                                      "isStatic": false,
                                                      "isVisible": undefined,
                                                      "lockProjectionTarget": [Function],
                                                      "makeTargetAnimatable": [Function],
                                                      "manuallyAnimateOnMount": false,
                                                      "measureViewportBox": [Function],
                                                      "notifyAnimationComplete": [Function],
                                                      "notifyAnimationStart": [Function],
                                                      "notifyBeforeLayoutMeasure": [Function],
                                                      "notifyLayoutAnimationComplete": [Function],
                                                      "notifyLayoutMeasure": [Function],
                                                      "notifyLayoutReady": [Function],
                                                      "notifyLayoutUpdate": [Function],
                                                      "notifyRender": [Function],
                                                      "notifySetAxisTarget": [Function],
                                                      "notifyUpdate": [Function],
                                                      "notifyViewportBoxUpdate": [Function],
                                                      "onAnimationComplete": [Function],
                                                      "onAnimationStart": [Function],
                                                      "onBeforeLayoutMeasure": [Function],
                                                      "onLayoutAnimationComplete": [Function],
                                                      "onLayoutMeasure": [Function],
                                                      "onLayoutUpdate": [Function],
                                                      "onRender": [Function],
                                                      "onSetAxisTarget": [Function],
                                                      "onUpdate": [Function],
                                                      "onViewportBoxUpdate": [Function],
                                                      "path": Array [
                                                        [Circular],
                                                      ],
                                                      "pointTo": [Function],
                                                      "presence": 0,
                                                      "presenceId": 2,
                                                      "projection": Object {
                                                        "isEnabled": false,
                                                        "isTargetLocked": false,
                                                        "target": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                        "targetFinal": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                      },
                                                      "readValue": [Function],
                                                      "rebaseProjectionTarget": [Function],
                                                      "ref": [Function],
                                                      "removeValue": [Function],
                                                      "resetTransform": [Function],
                                                      "scheduleRender": [Function],
                                                      "scheduleUpdateLayoutProjection": [Function],
                                                      "setBaseTarget": [Function],
                                                      "setCrossfader": [Function],
                                                      "setProjectionTargetAxis": [Function],
                                                      "setProps": [Function],
                                                      "setStaticValue": [Function],
                                                      "setVisibility": [Function],
                                                      "snapshotViewportBox": [Function],
                                                      "sortNodePosition": [Function],
                                                      "startLayoutAnimation": [Function],
                                                      "stopLayoutAnimation": [Function],
                                                      "suspendHoverEvents": [Function],
                                                      "syncRender": [Function],
                                                      "treeType": "dom",
                                                      "unlockProjectionTarget": [Function],
                                                      "updateLayoutMeasurement": [Function],
                                                      "updateLayoutProjection": [Function],
                                                      "updatePropListeners": [Function],
                                                      "variantChildren": Set {},
                                                      "withoutTransform": [Function],
                                                    },
                                                  },
                                                  "withoutTransform": [Function],
                                                }
                                              }
                                            />
                                          </ForwardRef(MotionComponent)>
                                        </PresenceChild>
                                      </AnimatePresence>
                                    </CheckboxTransition>
                                  </CheckboxIcon>
                                </span>
                              </Styled(span)>
                              <Styled(span)
                                __css={
                                  Object {
                                    "_disabled": Object {
                                      "opacity": 0.4,
                                    },
                                    "fontSize": "md",
                                    "marginStart": "0.5rem",
                                    "userSelect": "none",
                                  }
                                }
                                className="chakra-checkbox__label"
                                data-checked=""
                                onMouseDown={[Function]}
                                onTouchStart={[Function]}
                              >
                                <span
                                  className="chakra-checkbox__label css-1sgc0qu"
                                  data-checked=""
                                  onMouseDown={[Function]}
                                  onTouchStart={[Function]}
                                >
                                  Wed
                                </span>
                              </Styled(span)>
                            </label>
                          </Styled(label)>
                        </Checkbox>
                      </Day>
                      <Day
                        day="Thursday"
                        isChecked={true}
                        key="Thursday"
                        update={[MockFunction]}
                      >
                        <Checkbox
                          fontWeight="normal"
                          isChecked={true}
                          onChange={[Function]}
                        >
                          <Styled(label)
                            __css={Object {}}
                            className="chakra-checkbox"
                            fontWeight="normal"
                            onClick={[Function]}
                          >
                            <label
                              className="chakra-checkbox css-fnpc6t"
                              onClick={[Function]}
                            >
                              <input
                                checked={true}
                                className="chakra-checkbox__input"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                style={
                                  Object {
                                    "border": "0px",
                                    "clip": "rect(0px, 0px, 0px, 0px)",
                                    "height": "1px",
                                    "margin": "-1px",
                                    "overflow": "hidden",
                                    "padding": "0px",
                                    "position": "absolute",
                                    "whiteSpace": "nowrap",
                                    "width": "1px",
                                  }
                                }
                                type="checkbox"
                              />
                              <Styled(span)
                                __css={
                                  Object {
                                    "_checked": Object {
                                      "_disabled": Object {
                                        "bg": "gray.200",
                                        "borderColor": "gray.200",
                                        "color": "gray.500",
                                      },
                                      "_hover": Object {
                                        "bg": "blue.600",
                                        "borderColor": "blue.600",
                                      },
                                      "bg": "blue.500",
                                      "borderColor": "blue.500",
                                      "color": "white",
                                    },
                                    "_disabled": Object {
                                      "bg": "gray.100",
                                      "borderColor": "gray.100",
                                    },
                                    "_focus": Object {
                                      "boxShadow": "outline",
                                    },
                                    "_indeterminate": Object {
                                      "bg": "blue.500",
                                      "borderColor": "blue.500",
                                      "color": "white",
                                    },
                                    "_invalid": Object {
                                      "borderColor": "red.500",
                                    },
                                    "border": "2px solid",
                                    "borderColor": "inherit",
                                    "borderRadius": "sm",
                                    "color": "white",
                                    "h": 4,
                                    "transition": "box-shadow 250ms",
                                    "w": 4,
                                  }
                                }
                                aria-hidden={true}
                                className="chakra-checkbox__control"
                                data-checked=""
                                onMouseDown={[Function]}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <span
                                  aria-hidden={true}
                                  className="chakra-checkbox__control css-joz5u0"
                                  data-checked=""
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  <CheckboxIcon
                                    __css={
                                      Object {
                                        "color": undefined,
                                        "fontSize": "0.625rem",
                                        "opacity": 1,
                                        "transform": "scale(1)",
                                        "transition": "transform 200ms",
                                      }
                                    }
                                    isChecked={true}
                                  >
                                    <CheckboxTransition
                                      open={true}
                                    >
                                      <AnimatePresence
                                        initial={false}
                                      >
                                        <PresenceChild
                                          initial={false}
                                          isPresent={true}
                                          key=""
                                          presenceAffectsLayout={true}
                                        >
                                          <ForwardRef(MotionComponent)
                                            animate="checked"
                                            exit="unchecked"
                                            initial="unchecked"
                                            style={
                                              Object {
                                                "alignItems": "center",
                                                "display": "flex",
                                                "height": "100%",
                                                "justifyContent": "center",
                                              }
                                            }
                                            variants={
                                              Object {
                                                "checked": Object {
                                                  "scale": 1,
                                                },
                                                "unchecked": Object {
                                                  "scale": 0.5,
                                                },
                                              }
                                            }
                                          >
                                            <div
                                              style={
                                                Object {
                                                  "alignItems": "center",
                                                  "display": "flex",
                                                  "height": "100%",
                                                  "justifyContent": "center",
                                                  "transform": "none",
                                                }
                                              }
                                            >
                                              <CheckIcon
                                                __css={
                                                  Object {
                                                    "color": undefined,
                                                    "fontSize": "0.625rem",
                                                    "opacity": 1,
                                                    "transform": "scale(1)",
                                                    "transition": "transform 200ms",
                                                  }
                                                }
                                              >
                                                <ForwardRef(MotionComponent)
                                                  __css={
                                                    Object {
                                                      "color": undefined,
                                                      "fontSize": "0.625rem",
                                                      "opacity": 1,
                                                      "transform": "scale(1)",
                                                      "transition": "transform 200ms",
                                                    }
                                                  }
                                                  style={
                                                    Object {
                                                      "fill": "none",
                                                      "stroke": "currentColor",
                                                      "strokeDasharray": 16,
                                                      "strokeWidth": 2,
                                                    }
                                                  }
                                                  variants={
                                                    Object {
                                                      "checked": Object {
                                                        "opacity": 1,
                                                        "strokeDashoffset": 0,
                                                        "transition": Object {
                                                          "duration": 0.2,
                                                        },
                                                      },
                                                      "unchecked": Object {
                                                        "opacity": 0,
                                                        "strokeDashoffset": 16,
                                                      },
                                                    }
                                                  }
                                                  viewBox="0 0 12 10"
                                                  width="1.2em"
                                                >
                                                  <Styled(svg)
                                                    __css={
                                                      Object {
                                                        "color": undefined,
                                                        "fontSize": "0.625rem",
                                                        "opacity": 1,
                                                        "transform": "scale(1)",
                                                        "transition": "transform 200ms",
                                                      }
                                                    }
                                                    style={
                                                      Object {
                                                        "fill": "none",
                                                        "opacity": 1,
                                                        "stroke": "currentColor",
                                                        "strokeDasharray": 16,
                                                        "strokeDashoffset": 0,
                                                        "strokeWidth": 2,
                                                      }
                                                    }
                                                    viewBox="0 0 12 10"
                                                    width="1.2em"
                                                  >
                                                    <svg
                                                      className="css-da6t8b"
                                                      style={
                                                        Object {
                                                          "fill": "none",
                                                          "opacity": 1,
                                                          "stroke": "currentColor",
                                                          "strokeDasharray": 16,
                                                          "strokeDashoffset": 0,
                                                          "strokeWidth": 2,
                                                        }
                                                      }
                                                      viewBox="0 0 12 10"
                                                    >
                                                      <polyline
                                                        points="1.5 6 4.5 9 10.5 1"
                                                      />
                                                    </svg>
                                                  </Styled(svg)>
                                                  <Component
                                                    __css={
                                                      Object {
                                                        "color": undefined,
                                                        "fontSize": "0.625rem",
                                                        "opacity": 1,
                                                        "transform": "scale(1)",
                                                        "transition": "transform 200ms",
                                                      }
                                                    }
                                                    key="animation"
                                                    style={
                                                      Object {
                                                        "fill": "none",
                                                        "stroke": "currentColor",
                                                        "strokeDasharray": 16,
                                                        "strokeWidth": 2,
                                                      }
                                                    }
                                                    variants={
                                                      Object {
                                                        "checked": Object {
                                                          "opacity": 1,
                                                          "strokeDashoffset": 0,
                                                          "transition": Object {
                                                            "duration": 0.2,
                                                          },
                                                        },
                                                        "unchecked": Object {
                                                          "opacity": 0,
                                                          "strokeDashoffset": 16,
                                                        },
                                                      }
                                                    }
                                                    viewBox="0 0 12 10"
                                                    visualElement={
                                                      Object {
                                                        "addChild": [Function],
                                                        "addValue": [Function],
                                                        "addVariantChild": [Function],
                                                        "animationState": Object {
                                                          "animateChanges": [Function],
                                                          "getState": [Function],
                                                          "isAnimated": [Function],
                                                          "setActive": [Function],
                                                          "setAnimateFunction": [Function],
                                                        },
                                                        "blockInitialAnimation": true,
                                                        "build": [Function],
                                                        "clearAllListeners": [Function],
                                                        "clearState": [Function],
                                                        "current": <svg
                                                          class="css-da6t8b"
                                                          style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                          viewBox="0 0 12 10"
                                                        >
                                                          <polyline
                                                            points="1.5 6 4.5 9 10.5 1"
                                                          />
                                                        </svg>,
                                                        "depth": 1,
                                                        "enableLayoutProjection": [Function],
                                                        "forEachValue": [Function],
                                                        "getBaseTarget": [Function],
                                                        "getClosestVariantNode": [Function],
                                                        "getDefaultTransition": [Function],
                                                        "getInstance": [Function],
                                                        "getLatestValues": [Function],
                                                        "getLayoutId": [Function],
                                                        "getLayoutState": [Function],
                                                        "getProjectionAnimationProgress": [Function],
                                                        "getProps": [Function],
                                                        "getStaticValue": [Function],
                                                        "getValue": [Function],
                                                        "getVariant": [Function],
                                                        "getVariantContext": [Function],
                                                        "hasValue": [Function],
                                                        "isHoverEventsEnabled": true,
                                                        "isMounted": [Function],
                                                        "isPresenceRoot": false,
                                                        "isPresent": true,
                                                        "isStatic": false,
                                                        "isVisible": undefined,
                                                        "lockProjectionTarget": [Function],
                                                        "makeTargetAnimatable": [Function],
                                                        "manuallyAnimateOnMount": false,
                                                        "measureViewportBox": [Function],
                                                        "notifyAnimationComplete": [Function],
                                                        "notifyAnimationStart": [Function],
                                                        "notifyBeforeLayoutMeasure": [Function],
                                                        "notifyLayoutAnimationComplete": [Function],
                                                        "notifyLayoutMeasure": [Function],
                                                        "notifyLayoutReady": [Function],
                                                        "notifyLayoutUpdate": [Function],
                                                        "notifyRender": [Function],
                                                        "notifySetAxisTarget": [Function],
                                                        "notifyUpdate": [Function],
                                                        "notifyViewportBoxUpdate": [Function],
                                                        "onAnimationComplete": [Function],
                                                        "onAnimationStart": [Function],
                                                        "onBeforeLayoutMeasure": [Function],
                                                        "onLayoutAnimationComplete": [Function],
                                                        "onLayoutMeasure": [Function],
                                                        "onLayoutUpdate": [Function],
                                                        "onRender": [Function],
                                                        "onSetAxisTarget": [Function],
                                                        "onUpdate": [Function],
                                                        "onViewportBoxUpdate": [Function],
                                                        "path": Array [
                                                          Object {
                                                            "addChild": [Function],
                                                            "addValue": [Function],
                                                            "addVariantChild": [Function],
                                                            "animationState": Object {
                                                              "animateChanges": [Function],
                                                              "getState": [Function],
                                                              "isAnimated": [Function],
                                                              "setActive": [Function],
                                                              "setAnimateFunction": [Function],
                                                            },
                                                            "blockInitialAnimation": true,
                                                            "build": [Function],
                                                            "clearAllListeners": [Function],
                                                            "clearState": [Function],
                                                            "current": <div
                                                              style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                            >
                                                              <svg
                                                                class="css-da6t8b"
                                                                style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                viewBox="0 0 12 10"
                                                              >
                                                                <polyline
                                                                  points="1.5 6 4.5 9 10.5 1"
                                                                />
                                                              </svg>
                                                            </div>,
                                                            "depth": 0,
                                                            "enableLayoutProjection": [Function],
                                                            "forEachValue": [Function],
                                                            "getBaseTarget": [Function],
                                                            "getClosestVariantNode": [Function],
                                                            "getDefaultTransition": [Function],
                                                            "getInstance": [Function],
                                                            "getLatestValues": [Function],
                                                            "getLayoutId": [Function],
                                                            "getLayoutState": [Function],
                                                            "getProjectionAnimationProgress": [Function],
                                                            "getProps": [Function],
                                                            "getStaticValue": [Function],
                                                            "getValue": [Function],
                                                            "getVariant": [Function],
                                                            "getVariantContext": [Function],
                                                            "hasValue": [Function],
                                                            "isHoverEventsEnabled": true,
                                                            "isMounted": [Function],
                                                            "isPresenceRoot": true,
                                                            "isPresent": true,
                                                            "isStatic": false,
                                                            "isVisible": undefined,
                                                            "lockProjectionTarget": [Function],
                                                            "makeTargetAnimatable": [Function],
                                                            "manuallyAnimateOnMount": false,
                                                            "measureViewportBox": [Function],
                                                            "notifyAnimationComplete": [Function],
                                                            "notifyAnimationStart": [Function],
                                                            "notifyBeforeLayoutMeasure": [Function],
                                                            "notifyLayoutAnimationComplete": [Function],
                                                            "notifyLayoutMeasure": [Function],
                                                            "notifyLayoutReady": [Function],
                                                            "notifyLayoutUpdate": [Function],
                                                            "notifyRender": [Function],
                                                            "notifySetAxisTarget": [Function],
                                                            "notifyUpdate": [Function],
                                                            "notifyViewportBoxUpdate": [Function],
                                                            "onAnimationComplete": [Function],
                                                            "onAnimationStart": [Function],
                                                            "onBeforeLayoutMeasure": [Function],
                                                            "onLayoutAnimationComplete": [Function],
                                                            "onLayoutMeasure": [Function],
                                                            "onLayoutUpdate": [Function],
                                                            "onRender": [Function],
                                                            "onSetAxisTarget": [Function],
                                                            "onUpdate": [Function],
                                                            "onViewportBoxUpdate": [Function],
                                                            "path": Array [],
                                                            "pointTo": [Function],
                                                            "presence": 0,
                                                            "presenceId": 3,
                                                            "projection": Object {
                                                              "isEnabled": false,
                                                              "isTargetLocked": false,
                                                              "target": Object {
                                                                "x": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                                "y": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                              },
                                                              "targetFinal": Object {
                                                                "x": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                                "y": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                              },
                                                            },
                                                            "readValue": [Function],
                                                            "rebaseProjectionTarget": [Function],
                                                            "ref": [Function],
                                                            "removeValue": [Function],
                                                            "resetTransform": [Function],
                                                            "scheduleRender": [Function],
                                                            "scheduleUpdateLayoutProjection": [Function],
                                                            "setBaseTarget": [Function],
                                                            "setCrossfader": [Function],
                                                            "setProjectionTargetAxis": [Function],
                                                            "setProps": [Function],
                                                            "setStaticValue": [Function],
                                                            "setVisibility": [Function],
                                                            "snapshotViewportBox": [Function],
                                                            "sortNodePosition": [Function],
                                                            "startLayoutAnimation": [Function],
                                                            "stopLayoutAnimation": [Function],
                                                            "suspendHoverEvents": [Function],
                                                            "syncRender": [Function],
                                                            "treeType": "dom",
                                                            "unlockProjectionTarget": [Function],
                                                            "updateLayoutMeasurement": [Function],
                                                            "updateLayoutProjection": [Function],
                                                            "updatePropListeners": [Function],
                                                            "variantChildren": Set {
                                                              [Circular],
                                                            },
                                                            "withoutTransform": [Function],
                                                          },
                                                        ],
                                                        "pointTo": [Function],
                                                        "presence": 0,
                                                        "presenceId": 3,
                                                        "projection": Object {
                                                          "isEnabled": false,
                                                          "isTargetLocked": false,
                                                          "target": Object {
                                                            "x": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                            "y": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                          },
                                                          "targetFinal": Object {
                                                            "x": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                            "y": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                          },
                                                        },
                                                        "readValue": [Function],
                                                        "rebaseProjectionTarget": [Function],
                                                        "ref": [Function],
                                                        "removeValue": [Function],
                                                        "resetTransform": [Function],
                                                        "scheduleRender": [Function],
                                                        "scheduleUpdateLayoutProjection": [Function],
                                                        "setBaseTarget": [Function],
                                                        "setCrossfader": [Function],
                                                        "setProjectionTargetAxis": [Function],
                                                        "setProps": [Function],
                                                        "setStaticValue": [Function],
                                                        "setVisibility": [Function],
                                                        "snapshotViewportBox": [Function],
                                                        "sortNodePosition": [Function],
                                                        "startLayoutAnimation": [Function],
                                                        "stopLayoutAnimation": [Function],
                                                        "suspendHoverEvents": [Function],
                                                        "syncRender": [Function],
                                                        "treeType": "dom",
                                                        "unlockProjectionTarget": [Function],
                                                        "updateLayoutMeasurement": [Function],
                                                        "updateLayoutProjection": [Function],
                                                        "updatePropListeners": [Function],
                                                        "variantChildren": Set {},
                                                        "withoutTransform": [Function],
                                                      }
                                                    }
                                                    width="1.2em"
                                                  />
                                                </ForwardRef(MotionComponent)>
                                              </CheckIcon>
                                            </div>
                                            <Component
                                              animate="checked"
                                              exit="unchecked"
                                              initial="unchecked"
                                              key="animation"
                                              style={
                                                Object {
                                                  "alignItems": "center",
                                                  "display": "flex",
                                                  "height": "100%",
                                                  "justifyContent": "center",
                                                }
                                              }
                                              variants={
                                                Object {
                                                  "checked": Object {
                                                    "scale": 1,
                                                  },
                                                  "unchecked": Object {
                                                    "scale": 0.5,
                                                  },
                                                }
                                              }
                                              visualElement={
                                                Object {
                                                  "addChild": [Function],
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": true,
                                                  "build": [Function],
                                                  "clearAllListeners": [Function],
                                                  "clearState": [Function],
                                                  "current": <div
                                                    style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                  >
                                                    <svg
                                                      class="css-da6t8b"
                                                      style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                      viewBox="0 0 12 10"
                                                    >
                                                      <polyline
                                                        points="1.5 6 4.5 9 10.5 1"
                                                      />
                                                    </svg>
                                                  </div>,
                                                  "depth": 0,
                                                  "enableLayoutProjection": [Function],
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getLayoutState": [Function],
                                                  "getProjectionAnimationProgress": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isHoverEventsEnabled": true,
                                                  "isMounted": [Function],
                                                  "isPresenceRoot": true,
                                                  "isPresent": true,
                                                  "isStatic": false,
                                                  "isVisible": undefined,
                                                  "lockProjectionTarget": [Function],
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutReady": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "path": Array [],
                                                  "pointTo": [Function],
                                                  "presence": 0,
                                                  "presenceId": 3,
                                                  "projection": Object {
                                                    "isEnabled": false,
                                                    "isTargetLocked": false,
                                                    "target": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                    "targetFinal": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                  },
                                                  "readValue": [Function],
                                                  "rebaseProjectionTarget": [Function],
                                                  "ref": [Function],
                                                  "removeValue": [Function],
                                                  "resetTransform": [Function],
                                                  "scheduleRender": [Function],
                                                  "scheduleUpdateLayoutProjection": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setCrossfader": [Function],
                                                  "setProjectionTargetAxis": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "snapshotViewportBox": [Function],
                                                  "sortNodePosition": [Function],
                                                  "startLayoutAnimation": [Function],
                                                  "stopLayoutAnimation": [Function],
                                                  "suspendHoverEvents": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unlockProjectionTarget": [Function],
                                                  "updateLayoutMeasurement": [Function],
                                                  "updateLayoutProjection": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": Set {
                                                    Object {
                                                      "addChild": [Function],
                                                      "addValue": [Function],
                                                      "addVariantChild": [Function],
                                                      "animationState": Object {
                                                        "animateChanges": [Function],
                                                        "getState": [Function],
                                                        "isAnimated": [Function],
                                                        "setActive": [Function],
                                                        "setAnimateFunction": [Function],
                                                      },
                                                      "blockInitialAnimation": true,
                                                      "build": [Function],
                                                      "clearAllListeners": [Function],
                                                      "clearState": [Function],
                                                      "current": <svg
                                                        class="css-da6t8b"
                                                        style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                        viewBox="0 0 12 10"
                                                      >
                                                        <polyline
                                                          points="1.5 6 4.5 9 10.5 1"
                                                        />
                                                      </svg>,
                                                      "depth": 1,
                                                      "enableLayoutProjection": [Function],
                                                      "forEachValue": [Function],
                                                      "getBaseTarget": [Function],
                                                      "getClosestVariantNode": [Function],
                                                      "getDefaultTransition": [Function],
                                                      "getInstance": [Function],
                                                      "getLatestValues": [Function],
                                                      "getLayoutId": [Function],
                                                      "getLayoutState": [Function],
                                                      "getProjectionAnimationProgress": [Function],
                                                      "getProps": [Function],
                                                      "getStaticValue": [Function],
                                                      "getValue": [Function],
                                                      "getVariant": [Function],
                                                      "getVariantContext": [Function],
                                                      "hasValue": [Function],
                                                      "isHoverEventsEnabled": true,
                                                      "isMounted": [Function],
                                                      "isPresenceRoot": false,
                                                      "isPresent": true,
                                                      "isStatic": false,
                                                      "isVisible": undefined,
                                                      "lockProjectionTarget": [Function],
                                                      "makeTargetAnimatable": [Function],
                                                      "manuallyAnimateOnMount": false,
                                                      "measureViewportBox": [Function],
                                                      "notifyAnimationComplete": [Function],
                                                      "notifyAnimationStart": [Function],
                                                      "notifyBeforeLayoutMeasure": [Function],
                                                      "notifyLayoutAnimationComplete": [Function],
                                                      "notifyLayoutMeasure": [Function],
                                                      "notifyLayoutReady": [Function],
                                                      "notifyLayoutUpdate": [Function],
                                                      "notifyRender": [Function],
                                                      "notifySetAxisTarget": [Function],
                                                      "notifyUpdate": [Function],
                                                      "notifyViewportBoxUpdate": [Function],
                                                      "onAnimationComplete": [Function],
                                                      "onAnimationStart": [Function],
                                                      "onBeforeLayoutMeasure": [Function],
                                                      "onLayoutAnimationComplete": [Function],
                                                      "onLayoutMeasure": [Function],
                                                      "onLayoutUpdate": [Function],
                                                      "onRender": [Function],
                                                      "onSetAxisTarget": [Function],
                                                      "onUpdate": [Function],
                                                      "onViewportBoxUpdate": [Function],
                                                      "path": Array [
                                                        [Circular],
                                                      ],
                                                      "pointTo": [Function],
                                                      "presence": 0,
                                                      "presenceId": 3,
                                                      "projection": Object {
                                                        "isEnabled": false,
                                                        "isTargetLocked": false,
                                                        "target": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                        "targetFinal": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                      },
                                                      "readValue": [Function],
                                                      "rebaseProjectionTarget": [Function],
                                                      "ref": [Function],
                                                      "removeValue": [Function],
                                                      "resetTransform": [Function],
                                                      "scheduleRender": [Function],
                                                      "scheduleUpdateLayoutProjection": [Function],
                                                      "setBaseTarget": [Function],
                                                      "setCrossfader": [Function],
                                                      "setProjectionTargetAxis": [Function],
                                                      "setProps": [Function],
                                                      "setStaticValue": [Function],
                                                      "setVisibility": [Function],
                                                      "snapshotViewportBox": [Function],
                                                      "sortNodePosition": [Function],
                                                      "startLayoutAnimation": [Function],
                                                      "stopLayoutAnimation": [Function],
                                                      "suspendHoverEvents": [Function],
                                                      "syncRender": [Function],
                                                      "treeType": "dom",
                                                      "unlockProjectionTarget": [Function],
                                                      "updateLayoutMeasurement": [Function],
                                                      "updateLayoutProjection": [Function],
                                                      "updatePropListeners": [Function],
                                                      "variantChildren": Set {},
                                                      "withoutTransform": [Function],
                                                    },
                                                  },
                                                  "withoutTransform": [Function],
                                                }
                                              }
                                            />
                                            <Component
                                              animate="checked"
                                              exit="unchecked"
                                              initial="unchecked"
                                              key="exit"
                                              style={
                                                Object {
                                                  "alignItems": "center",
                                                  "display": "flex",
                                                  "height": "100%",
                                                  "justifyContent": "center",
                                                }
                                              }
                                              variants={
                                                Object {
                                                  "checked": Object {
                                                    "scale": 1,
                                                  },
                                                  "unchecked": Object {
                                                    "scale": 0.5,
                                                  },
                                                }
                                              }
                                              visualElement={
                                                Object {
                                                  "addChild": [Function],
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": true,
                                                  "build": [Function],
                                                  "clearAllListeners": [Function],
                                                  "clearState": [Function],
                                                  "current": <div
                                                    style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                  >
                                                    <svg
                                                      class="css-da6t8b"
                                                      style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                      viewBox="0 0 12 10"
                                                    >
                                                      <polyline
                                                        points="1.5 6 4.5 9 10.5 1"
                                                      />
                                                    </svg>
                                                  </div>,
                                                  "depth": 0,
                                                  "enableLayoutProjection": [Function],
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getLayoutState": [Function],
                                                  "getProjectionAnimationProgress": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isHoverEventsEnabled": true,
                                                  "isMounted": [Function],
                                                  "isPresenceRoot": true,
                                                  "isPresent": true,
                                                  "isStatic": false,
                                                  "isVisible": undefined,
                                                  "lockProjectionTarget": [Function],
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutReady": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "path": Array [],
                                                  "pointTo": [Function],
                                                  "presence": 0,
                                                  "presenceId": 3,
                                                  "projection": Object {
                                                    "isEnabled": false,
                                                    "isTargetLocked": false,
                                                    "target": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                    "targetFinal": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                  },
                                                  "readValue": [Function],
                                                  "rebaseProjectionTarget": [Function],
                                                  "ref": [Function],
                                                  "removeValue": [Function],
                                                  "resetTransform": [Function],
                                                  "scheduleRender": [Function],
                                                  "scheduleUpdateLayoutProjection": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setCrossfader": [Function],
                                                  "setProjectionTargetAxis": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "snapshotViewportBox": [Function],
                                                  "sortNodePosition": [Function],
                                                  "startLayoutAnimation": [Function],
                                                  "stopLayoutAnimation": [Function],
                                                  "suspendHoverEvents": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unlockProjectionTarget": [Function],
                                                  "updateLayoutMeasurement": [Function],
                                                  "updateLayoutProjection": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": Set {
                                                    Object {
                                                      "addChild": [Function],
                                                      "addValue": [Function],
                                                      "addVariantChild": [Function],
                                                      "animationState": Object {
                                                        "animateChanges": [Function],
                                                        "getState": [Function],
                                                        "isAnimated": [Function],
                                                        "setActive": [Function],
                                                        "setAnimateFunction": [Function],
                                                      },
                                                      "blockInitialAnimation": true,
                                                      "build": [Function],
                                                      "clearAllListeners": [Function],
                                                      "clearState": [Function],
                                                      "current": <svg
                                                        class="css-da6t8b"
                                                        style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                        viewBox="0 0 12 10"
                                                      >
                                                        <polyline
                                                          points="1.5 6 4.5 9 10.5 1"
                                                        />
                                                      </svg>,
                                                      "depth": 1,
                                                      "enableLayoutProjection": [Function],
                                                      "forEachValue": [Function],
                                                      "getBaseTarget": [Function],
                                                      "getClosestVariantNode": [Function],
                                                      "getDefaultTransition": [Function],
                                                      "getInstance": [Function],
                                                      "getLatestValues": [Function],
                                                      "getLayoutId": [Function],
                                                      "getLayoutState": [Function],
                                                      "getProjectionAnimationProgress": [Function],
                                                      "getProps": [Function],
                                                      "getStaticValue": [Function],
                                                      "getValue": [Function],
                                                      "getVariant": [Function],
                                                      "getVariantContext": [Function],
                                                      "hasValue": [Function],
                                                      "isHoverEventsEnabled": true,
                                                      "isMounted": [Function],
                                                      "isPresenceRoot": false,
                                                      "isPresent": true,
                                                      "isStatic": false,
                                                      "isVisible": undefined,
                                                      "lockProjectionTarget": [Function],
                                                      "makeTargetAnimatable": [Function],
                                                      "manuallyAnimateOnMount": false,
                                                      "measureViewportBox": [Function],
                                                      "notifyAnimationComplete": [Function],
                                                      "notifyAnimationStart": [Function],
                                                      "notifyBeforeLayoutMeasure": [Function],
                                                      "notifyLayoutAnimationComplete": [Function],
                                                      "notifyLayoutMeasure": [Function],
                                                      "notifyLayoutReady": [Function],
                                                      "notifyLayoutUpdate": [Function],
                                                      "notifyRender": [Function],
                                                      "notifySetAxisTarget": [Function],
                                                      "notifyUpdate": [Function],
                                                      "notifyViewportBoxUpdate": [Function],
                                                      "onAnimationComplete": [Function],
                                                      "onAnimationStart": [Function],
                                                      "onBeforeLayoutMeasure": [Function],
                                                      "onLayoutAnimationComplete": [Function],
                                                      "onLayoutMeasure": [Function],
                                                      "onLayoutUpdate": [Function],
                                                      "onRender": [Function],
                                                      "onSetAxisTarget": [Function],
                                                      "onUpdate": [Function],
                                                      "onViewportBoxUpdate": [Function],
                                                      "path": Array [
                                                        [Circular],
                                                      ],
                                                      "pointTo": [Function],
                                                      "presence": 0,
                                                      "presenceId": 3,
                                                      "projection": Object {
                                                        "isEnabled": false,
                                                        "isTargetLocked": false,
                                                        "target": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                        "targetFinal": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                      },
                                                      "readValue": [Function],
                                                      "rebaseProjectionTarget": [Function],
                                                      "ref": [Function],
                                                      "removeValue": [Function],
                                                      "resetTransform": [Function],
                                                      "scheduleRender": [Function],
                                                      "scheduleUpdateLayoutProjection": [Function],
                                                      "setBaseTarget": [Function],
                                                      "setCrossfader": [Function],
                                                      "setProjectionTargetAxis": [Function],
                                                      "setProps": [Function],
                                                      "setStaticValue": [Function],
                                                      "setVisibility": [Function],
                                                      "snapshotViewportBox": [Function],
                                                      "sortNodePosition": [Function],
                                                      "startLayoutAnimation": [Function],
                                                      "stopLayoutAnimation": [Function],
                                                      "suspendHoverEvents": [Function],
                                                      "syncRender": [Function],
                                                      "treeType": "dom",
                                                      "unlockProjectionTarget": [Function],
                                                      "updateLayoutMeasurement": [Function],
                                                      "updateLayoutProjection": [Function],
                                                      "updatePropListeners": [Function],
                                                      "variantChildren": Set {},
                                                      "withoutTransform": [Function],
                                                    },
                                                  },
                                                  "withoutTransform": [Function],
                                                }
                                              }
                                            />
                                          </ForwardRef(MotionComponent)>
                                        </PresenceChild>
                                      </AnimatePresence>
                                    </CheckboxTransition>
                                  </CheckboxIcon>
                                </span>
                              </Styled(span)>
                              <Styled(span)
                                __css={
                                  Object {
                                    "_disabled": Object {
                                      "opacity": 0.4,
                                    },
                                    "fontSize": "md",
                                    "marginStart": "0.5rem",
                                    "userSelect": "none",
                                  }
                                }
                                className="chakra-checkbox__label"
                                data-checked=""
                                onMouseDown={[Function]}
                                onTouchStart={[Function]}
                              >
                                <span
                                  className="chakra-checkbox__label css-1sgc0qu"
                                  data-checked=""
                                  onMouseDown={[Function]}
                                  onTouchStart={[Function]}
                                >
                                  Thu
                                </span>
                              </Styled(span)>
                            </label>
                          </Styled(label)>
                        </Checkbox>
                      </Day>
                      <Day
                        day="Friday"
                        isChecked={true}
                        key="Friday"
                        update={[MockFunction]}
                      >
                        <Checkbox
                          fontWeight="normal"
                          isChecked={true}
                          onChange={[Function]}
                        >
                          <Styled(label)
                            __css={Object {}}
                            className="chakra-checkbox"
                            fontWeight="normal"
                            onClick={[Function]}
                          >
                            <label
                              className="chakra-checkbox css-fnpc6t"
                              onClick={[Function]}
                            >
                              <input
                                checked={true}
                                className="chakra-checkbox__input"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                style={
                                  Object {
                                    "border": "0px",
                                    "clip": "rect(0px, 0px, 0px, 0px)",
                                    "height": "1px",
                                    "margin": "-1px",
                                    "overflow": "hidden",
                                    "padding": "0px",
                                    "position": "absolute",
                                    "whiteSpace": "nowrap",
                                    "width": "1px",
                                  }
                                }
                                type="checkbox"
                              />
                              <Styled(span)
                                __css={
                                  Object {
                                    "_checked": Object {
                                      "_disabled": Object {
                                        "bg": "gray.200",
                                        "borderColor": "gray.200",
                                        "color": "gray.500",
                                      },
                                      "_hover": Object {
                                        "bg": "blue.600",
                                        "borderColor": "blue.600",
                                      },
                                      "bg": "blue.500",
                                      "borderColor": "blue.500",
                                      "color": "white",
                                    },
                                    "_disabled": Object {
                                      "bg": "gray.100",
                                      "borderColor": "gray.100",
                                    },
                                    "_focus": Object {
                                      "boxShadow": "outline",
                                    },
                                    "_indeterminate": Object {
                                      "bg": "blue.500",
                                      "borderColor": "blue.500",
                                      "color": "white",
                                    },
                                    "_invalid": Object {
                                      "borderColor": "red.500",
                                    },
                                    "border": "2px solid",
                                    "borderColor": "inherit",
                                    "borderRadius": "sm",
                                    "color": "white",
                                    "h": 4,
                                    "transition": "box-shadow 250ms",
                                    "w": 4,
                                  }
                                }
                                aria-hidden={true}
                                className="chakra-checkbox__control"
                                data-checked=""
                                onMouseDown={[Function]}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <span
                                  aria-hidden={true}
                                  className="chakra-checkbox__control css-joz5u0"
                                  data-checked=""
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  <CheckboxIcon
                                    __css={
                                      Object {
                                        "color": undefined,
                                        "fontSize": "0.625rem",
                                        "opacity": 1,
                                        "transform": "scale(1)",
                                        "transition": "transform 200ms",
                                      }
                                    }
                                    isChecked={true}
                                  >
                                    <CheckboxTransition
                                      open={true}
                                    >
                                      <AnimatePresence
                                        initial={false}
                                      >
                                        <PresenceChild
                                          initial={false}
                                          isPresent={true}
                                          key=""
                                          presenceAffectsLayout={true}
                                        >
                                          <ForwardRef(MotionComponent)
                                            animate="checked"
                                            exit="unchecked"
                                            initial="unchecked"
                                            style={
                                              Object {
                                                "alignItems": "center",
                                                "display": "flex",
                                                "height": "100%",
                                                "justifyContent": "center",
                                              }
                                            }
                                            variants={
                                              Object {
                                                "checked": Object {
                                                  "scale": 1,
                                                },
                                                "unchecked": Object {
                                                  "scale": 0.5,
                                                },
                                              }
                                            }
                                          >
                                            <div
                                              style={
                                                Object {
                                                  "alignItems": "center",
                                                  "display": "flex",
                                                  "height": "100%",
                                                  "justifyContent": "center",
                                                  "transform": "none",
                                                }
                                              }
                                            >
                                              <CheckIcon
                                                __css={
                                                  Object {
                                                    "color": undefined,
                                                    "fontSize": "0.625rem",
                                                    "opacity": 1,
                                                    "transform": "scale(1)",
                                                    "transition": "transform 200ms",
                                                  }
                                                }
                                              >
                                                <ForwardRef(MotionComponent)
                                                  __css={
                                                    Object {
                                                      "color": undefined,
                                                      "fontSize": "0.625rem",
                                                      "opacity": 1,
                                                      "transform": "scale(1)",
                                                      "transition": "transform 200ms",
                                                    }
                                                  }
                                                  style={
                                                    Object {
                                                      "fill": "none",
                                                      "stroke": "currentColor",
                                                      "strokeDasharray": 16,
                                                      "strokeWidth": 2,
                                                    }
                                                  }
                                                  variants={
                                                    Object {
                                                      "checked": Object {
                                                        "opacity": 1,
                                                        "strokeDashoffset": 0,
                                                        "transition": Object {
                                                          "duration": 0.2,
                                                        },
                                                      },
                                                      "unchecked": Object {
                                                        "opacity": 0,
                                                        "strokeDashoffset": 16,
                                                      },
                                                    }
                                                  }
                                                  viewBox="0 0 12 10"
                                                  width="1.2em"
                                                >
                                                  <Styled(svg)
                                                    __css={
                                                      Object {
                                                        "color": undefined,
                                                        "fontSize": "0.625rem",
                                                        "opacity": 1,
                                                        "transform": "scale(1)",
                                                        "transition": "transform 200ms",
                                                      }
                                                    }
                                                    style={
                                                      Object {
                                                        "fill": "none",
                                                        "opacity": 1,
                                                        "stroke": "currentColor",
                                                        "strokeDasharray": 16,
                                                        "strokeDashoffset": 0,
                                                        "strokeWidth": 2,
                                                      }
                                                    }
                                                    viewBox="0 0 12 10"
                                                    width="1.2em"
                                                  >
                                                    <svg
                                                      className="css-da6t8b"
                                                      style={
                                                        Object {
                                                          "fill": "none",
                                                          "opacity": 1,
                                                          "stroke": "currentColor",
                                                          "strokeDasharray": 16,
                                                          "strokeDashoffset": 0,
                                                          "strokeWidth": 2,
                                                        }
                                                      }
                                                      viewBox="0 0 12 10"
                                                    >
                                                      <polyline
                                                        points="1.5 6 4.5 9 10.5 1"
                                                      />
                                                    </svg>
                                                  </Styled(svg)>
                                                  <Component
                                                    __css={
                                                      Object {
                                                        "color": undefined,
                                                        "fontSize": "0.625rem",
                                                        "opacity": 1,
                                                        "transform": "scale(1)",
                                                        "transition": "transform 200ms",
                                                      }
                                                    }
                                                    key="animation"
                                                    style={
                                                      Object {
                                                        "fill": "none",
                                                        "stroke": "currentColor",
                                                        "strokeDasharray": 16,
                                                        "strokeWidth": 2,
                                                      }
                                                    }
                                                    variants={
                                                      Object {
                                                        "checked": Object {
                                                          "opacity": 1,
                                                          "strokeDashoffset": 0,
                                                          "transition": Object {
                                                            "duration": 0.2,
                                                          },
                                                        },
                                                        "unchecked": Object {
                                                          "opacity": 0,
                                                          "strokeDashoffset": 16,
                                                        },
                                                      }
                                                    }
                                                    viewBox="0 0 12 10"
                                                    visualElement={
                                                      Object {
                                                        "addChild": [Function],
                                                        "addValue": [Function],
                                                        "addVariantChild": [Function],
                                                        "animationState": Object {
                                                          "animateChanges": [Function],
                                                          "getState": [Function],
                                                          "isAnimated": [Function],
                                                          "setActive": [Function],
                                                          "setAnimateFunction": [Function],
                                                        },
                                                        "blockInitialAnimation": true,
                                                        "build": [Function],
                                                        "clearAllListeners": [Function],
                                                        "clearState": [Function],
                                                        "current": <svg
                                                          class="css-da6t8b"
                                                          style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                          viewBox="0 0 12 10"
                                                        >
                                                          <polyline
                                                            points="1.5 6 4.5 9 10.5 1"
                                                          />
                                                        </svg>,
                                                        "depth": 1,
                                                        "enableLayoutProjection": [Function],
                                                        "forEachValue": [Function],
                                                        "getBaseTarget": [Function],
                                                        "getClosestVariantNode": [Function],
                                                        "getDefaultTransition": [Function],
                                                        "getInstance": [Function],
                                                        "getLatestValues": [Function],
                                                        "getLayoutId": [Function],
                                                        "getLayoutState": [Function],
                                                        "getProjectionAnimationProgress": [Function],
                                                        "getProps": [Function],
                                                        "getStaticValue": [Function],
                                                        "getValue": [Function],
                                                        "getVariant": [Function],
                                                        "getVariantContext": [Function],
                                                        "hasValue": [Function],
                                                        "isHoverEventsEnabled": true,
                                                        "isMounted": [Function],
                                                        "isPresenceRoot": false,
                                                        "isPresent": true,
                                                        "isStatic": false,
                                                        "isVisible": undefined,
                                                        "lockProjectionTarget": [Function],
                                                        "makeTargetAnimatable": [Function],
                                                        "manuallyAnimateOnMount": false,
                                                        "measureViewportBox": [Function],
                                                        "notifyAnimationComplete": [Function],
                                                        "notifyAnimationStart": [Function],
                                                        "notifyBeforeLayoutMeasure": [Function],
                                                        "notifyLayoutAnimationComplete": [Function],
                                                        "notifyLayoutMeasure": [Function],
                                                        "notifyLayoutReady": [Function],
                                                        "notifyLayoutUpdate": [Function],
                                                        "notifyRender": [Function],
                                                        "notifySetAxisTarget": [Function],
                                                        "notifyUpdate": [Function],
                                                        "notifyViewportBoxUpdate": [Function],
                                                        "onAnimationComplete": [Function],
                                                        "onAnimationStart": [Function],
                                                        "onBeforeLayoutMeasure": [Function],
                                                        "onLayoutAnimationComplete": [Function],
                                                        "onLayoutMeasure": [Function],
                                                        "onLayoutUpdate": [Function],
                                                        "onRender": [Function],
                                                        "onSetAxisTarget": [Function],
                                                        "onUpdate": [Function],
                                                        "onViewportBoxUpdate": [Function],
                                                        "path": Array [
                                                          Object {
                                                            "addChild": [Function],
                                                            "addValue": [Function],
                                                            "addVariantChild": [Function],
                                                            "animationState": Object {
                                                              "animateChanges": [Function],
                                                              "getState": [Function],
                                                              "isAnimated": [Function],
                                                              "setActive": [Function],
                                                              "setAnimateFunction": [Function],
                                                            },
                                                            "blockInitialAnimation": true,
                                                            "build": [Function],
                                                            "clearAllListeners": [Function],
                                                            "clearState": [Function],
                                                            "current": <div
                                                              style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                            >
                                                              <svg
                                                                class="css-da6t8b"
                                                                style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                viewBox="0 0 12 10"
                                                              >
                                                                <polyline
                                                                  points="1.5 6 4.5 9 10.5 1"
                                                                />
                                                              </svg>
                                                            </div>,
                                                            "depth": 0,
                                                            "enableLayoutProjection": [Function],
                                                            "forEachValue": [Function],
                                                            "getBaseTarget": [Function],
                                                            "getClosestVariantNode": [Function],
                                                            "getDefaultTransition": [Function],
                                                            "getInstance": [Function],
                                                            "getLatestValues": [Function],
                                                            "getLayoutId": [Function],
                                                            "getLayoutState": [Function],
                                                            "getProjectionAnimationProgress": [Function],
                                                            "getProps": [Function],
                                                            "getStaticValue": [Function],
                                                            "getValue": [Function],
                                                            "getVariant": [Function],
                                                            "getVariantContext": [Function],
                                                            "hasValue": [Function],
                                                            "isHoverEventsEnabled": true,
                                                            "isMounted": [Function],
                                                            "isPresenceRoot": true,
                                                            "isPresent": true,
                                                            "isStatic": false,
                                                            "isVisible": undefined,
                                                            "lockProjectionTarget": [Function],
                                                            "makeTargetAnimatable": [Function],
                                                            "manuallyAnimateOnMount": false,
                                                            "measureViewportBox": [Function],
                                                            "notifyAnimationComplete": [Function],
                                                            "notifyAnimationStart": [Function],
                                                            "notifyBeforeLayoutMeasure": [Function],
                                                            "notifyLayoutAnimationComplete": [Function],
                                                            "notifyLayoutMeasure": [Function],
                                                            "notifyLayoutReady": [Function],
                                                            "notifyLayoutUpdate": [Function],
                                                            "notifyRender": [Function],
                                                            "notifySetAxisTarget": [Function],
                                                            "notifyUpdate": [Function],
                                                            "notifyViewportBoxUpdate": [Function],
                                                            "onAnimationComplete": [Function],
                                                            "onAnimationStart": [Function],
                                                            "onBeforeLayoutMeasure": [Function],
                                                            "onLayoutAnimationComplete": [Function],
                                                            "onLayoutMeasure": [Function],
                                                            "onLayoutUpdate": [Function],
                                                            "onRender": [Function],
                                                            "onSetAxisTarget": [Function],
                                                            "onUpdate": [Function],
                                                            "onViewportBoxUpdate": [Function],
                                                            "path": Array [],
                                                            "pointTo": [Function],
                                                            "presence": 0,
                                                            "presenceId": 4,
                                                            "projection": Object {
                                                              "isEnabled": false,
                                                              "isTargetLocked": false,
                                                              "target": Object {
                                                                "x": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                                "y": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                              },
                                                              "targetFinal": Object {
                                                                "x": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                                "y": Object {
                                                                  "max": 1,
                                                                  "min": 0,
                                                                },
                                                              },
                                                            },
                                                            "readValue": [Function],
                                                            "rebaseProjectionTarget": [Function],
                                                            "ref": [Function],
                                                            "removeValue": [Function],
                                                            "resetTransform": [Function],
                                                            "scheduleRender": [Function],
                                                            "scheduleUpdateLayoutProjection": [Function],
                                                            "setBaseTarget": [Function],
                                                            "setCrossfader": [Function],
                                                            "setProjectionTargetAxis": [Function],
                                                            "setProps": [Function],
                                                            "setStaticValue": [Function],
                                                            "setVisibility": [Function],
                                                            "snapshotViewportBox": [Function],
                                                            "sortNodePosition": [Function],
                                                            "startLayoutAnimation": [Function],
                                                            "stopLayoutAnimation": [Function],
                                                            "suspendHoverEvents": [Function],
                                                            "syncRender": [Function],
                                                            "treeType": "dom",
                                                            "unlockProjectionTarget": [Function],
                                                            "updateLayoutMeasurement": [Function],
                                                            "updateLayoutProjection": [Function],
                                                            "updatePropListeners": [Function],
                                                            "variantChildren": Set {
                                                              [Circular],
                                                            },
                                                            "withoutTransform": [Function],
                                                          },
                                                        ],
                                                        "pointTo": [Function],
                                                        "presence": 0,
                                                        "presenceId": 4,
                                                        "projection": Object {
                                                          "isEnabled": false,
                                                          "isTargetLocked": false,
                                                          "target": Object {
                                                            "x": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                            "y": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                          },
                                                          "targetFinal": Object {
                                                            "x": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                            "y": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                          },
                                                        },
                                                        "readValue": [Function],
                                                        "rebaseProjectionTarget": [Function],
                                                        "ref": [Function],
                                                        "removeValue": [Function],
                                                        "resetTransform": [Function],
                                                        "scheduleRender": [Function],
                                                        "scheduleUpdateLayoutProjection": [Function],
                                                        "setBaseTarget": [Function],
                                                        "setCrossfader": [Function],
                                                        "setProjectionTargetAxis": [Function],
                                                        "setProps": [Function],
                                                        "setStaticValue": [Function],
                                                        "setVisibility": [Function],
                                                        "snapshotViewportBox": [Function],
                                                        "sortNodePosition": [Function],
                                                        "startLayoutAnimation": [Function],
                                                        "stopLayoutAnimation": [Function],
                                                        "suspendHoverEvents": [Function],
                                                        "syncRender": [Function],
                                                        "treeType": "dom",
                                                        "unlockProjectionTarget": [Function],
                                                        "updateLayoutMeasurement": [Function],
                                                        "updateLayoutProjection": [Function],
                                                        "updatePropListeners": [Function],
                                                        "variantChildren": Set {},
                                                        "withoutTransform": [Function],
                                                      }
                                                    }
                                                    width="1.2em"
                                                  />
                                                </ForwardRef(MotionComponent)>
                                              </CheckIcon>
                                            </div>
                                            <Component
                                              animate="checked"
                                              exit="unchecked"
                                              initial="unchecked"
                                              key="animation"
                                              style={
                                                Object {
                                                  "alignItems": "center",
                                                  "display": "flex",
                                                  "height": "100%",
                                                  "justifyContent": "center",
                                                }
                                              }
                                              variants={
                                                Object {
                                                  "checked": Object {
                                                    "scale": 1,
                                                  },
                                                  "unchecked": Object {
                                                    "scale": 0.5,
                                                  },
                                                }
                                              }
                                              visualElement={
                                                Object {
                                                  "addChild": [Function],
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": true,
                                                  "build": [Function],
                                                  "clearAllListeners": [Function],
                                                  "clearState": [Function],
                                                  "current": <div
                                                    style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                  >
                                                    <svg
                                                      class="css-da6t8b"
                                                      style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                      viewBox="0 0 12 10"
                                                    >
                                                      <polyline
                                                        points="1.5 6 4.5 9 10.5 1"
                                                      />
                                                    </svg>
                                                  </div>,
                                                  "depth": 0,
                                                  "enableLayoutProjection": [Function],
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getLayoutState": [Function],
                                                  "getProjectionAnimationProgress": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isHoverEventsEnabled": true,
                                                  "isMounted": [Function],
                                                  "isPresenceRoot": true,
                                                  "isPresent": true,
                                                  "isStatic": false,
                                                  "isVisible": undefined,
                                                  "lockProjectionTarget": [Function],
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutReady": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "path": Array [],
                                                  "pointTo": [Function],
                                                  "presence": 0,
                                                  "presenceId": 4,
                                                  "projection": Object {
                                                    "isEnabled": false,
                                                    "isTargetLocked": false,
                                                    "target": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                    "targetFinal": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                  },
                                                  "readValue": [Function],
                                                  "rebaseProjectionTarget": [Function],
                                                  "ref": [Function],
                                                  "removeValue": [Function],
                                                  "resetTransform": [Function],
                                                  "scheduleRender": [Function],
                                                  "scheduleUpdateLayoutProjection": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setCrossfader": [Function],
                                                  "setProjectionTargetAxis": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "snapshotViewportBox": [Function],
                                                  "sortNodePosition": [Function],
                                                  "startLayoutAnimation": [Function],
                                                  "stopLayoutAnimation": [Function],
                                                  "suspendHoverEvents": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unlockProjectionTarget": [Function],
                                                  "updateLayoutMeasurement": [Function],
                                                  "updateLayoutProjection": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": Set {
                                                    Object {
                                                      "addChild": [Function],
                                                      "addValue": [Function],
                                                      "addVariantChild": [Function],
                                                      "animationState": Object {
                                                        "animateChanges": [Function],
                                                        "getState": [Function],
                                                        "isAnimated": [Function],
                                                        "setActive": [Function],
                                                        "setAnimateFunction": [Function],
                                                      },
                                                      "blockInitialAnimation": true,
                                                      "build": [Function],
                                                      "clearAllListeners": [Function],
                                                      "clearState": [Function],
                                                      "current": <svg
                                                        class="css-da6t8b"
                                                        style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                        viewBox="0 0 12 10"
                                                      >
                                                        <polyline
                                                          points="1.5 6 4.5 9 10.5 1"
                                                        />
                                                      </svg>,
                                                      "depth": 1,
                                                      "enableLayoutProjection": [Function],
                                                      "forEachValue": [Function],
                                                      "getBaseTarget": [Function],
                                                      "getClosestVariantNode": [Function],
                                                      "getDefaultTransition": [Function],
                                                      "getInstance": [Function],
                                                      "getLatestValues": [Function],
                                                      "getLayoutId": [Function],
                                                      "getLayoutState": [Function],
                                                      "getProjectionAnimationProgress": [Function],
                                                      "getProps": [Function],
                                                      "getStaticValue": [Function],
                                                      "getValue": [Function],
                                                      "getVariant": [Function],
                                                      "getVariantContext": [Function],
                                                      "hasValue": [Function],
                                                      "isHoverEventsEnabled": true,
                                                      "isMounted": [Function],
                                                      "isPresenceRoot": false,
                                                      "isPresent": true,
                                                      "isStatic": false,
                                                      "isVisible": undefined,
                                                      "lockProjectionTarget": [Function],
                                                      "makeTargetAnimatable": [Function],
                                                      "manuallyAnimateOnMount": false,
                                                      "measureViewportBox": [Function],
                                                      "notifyAnimationComplete": [Function],
                                                      "notifyAnimationStart": [Function],
                                                      "notifyBeforeLayoutMeasure": [Function],
                                                      "notifyLayoutAnimationComplete": [Function],
                                                      "notifyLayoutMeasure": [Function],
                                                      "notifyLayoutReady": [Function],
                                                      "notifyLayoutUpdate": [Function],
                                                      "notifyRender": [Function],
                                                      "notifySetAxisTarget": [Function],
                                                      "notifyUpdate": [Function],
                                                      "notifyViewportBoxUpdate": [Function],
                                                      "onAnimationComplete": [Function],
                                                      "onAnimationStart": [Function],
                                                      "onBeforeLayoutMeasure": [Function],
                                                      "onLayoutAnimationComplete": [Function],
                                                      "onLayoutMeasure": [Function],
                                                      "onLayoutUpdate": [Function],
                                                      "onRender": [Function],
                                                      "onSetAxisTarget": [Function],
                                                      "onUpdate": [Function],
                                                      "onViewportBoxUpdate": [Function],
                                                      "path": Array [
                                                        [Circular],
                                                      ],
                                                      "pointTo": [Function],
                                                      "presence": 0,
                                                      "presenceId": 4,
                                                      "projection": Object {
                                                        "isEnabled": false,
                                                        "isTargetLocked": false,
                                                        "target": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                        "targetFinal": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                      },
                                                      "readValue": [Function],
                                                      "rebaseProjectionTarget": [Function],
                                                      "ref": [Function],
                                                      "removeValue": [Function],
                                                      "resetTransform": [Function],
                                                      "scheduleRender": [Function],
                                                      "scheduleUpdateLayoutProjection": [Function],
                                                      "setBaseTarget": [Function],
                                                      "setCrossfader": [Function],
                                                      "setProjectionTargetAxis": [Function],
                                                      "setProps": [Function],
                                                      "setStaticValue": [Function],
                                                      "setVisibility": [Function],
                                                      "snapshotViewportBox": [Function],
                                                      "sortNodePosition": [Function],
                                                      "startLayoutAnimation": [Function],
                                                      "stopLayoutAnimation": [Function],
                                                      "suspendHoverEvents": [Function],
                                                      "syncRender": [Function],
                                                      "treeType": "dom",
                                                      "unlockProjectionTarget": [Function],
                                                      "updateLayoutMeasurement": [Function],
                                                      "updateLayoutProjection": [Function],
                                                      "updatePropListeners": [Function],
                                                      "variantChildren": Set {},
                                                      "withoutTransform": [Function],
                                                    },
                                                  },
                                                  "withoutTransform": [Function],
                                                }
                                              }
                                            />
                                            <Component
                                              animate="checked"
                                              exit="unchecked"
                                              initial="unchecked"
                                              key="exit"
                                              style={
                                                Object {
                                                  "alignItems": "center",
                                                  "display": "flex",
                                                  "height": "100%",
                                                  "justifyContent": "center",
                                                }
                                              }
                                              variants={
                                                Object {
                                                  "checked": Object {
                                                    "scale": 1,
                                                  },
                                                  "unchecked": Object {
                                                    "scale": 0.5,
                                                  },
                                                }
                                              }
                                              visualElement={
                                                Object {
                                                  "addChild": [Function],
                                                  "addValue": [Function],
                                                  "addVariantChild": [Function],
                                                  "animationState": Object {
                                                    "animateChanges": [Function],
                                                    "getState": [Function],
                                                    "isAnimated": [Function],
                                                    "setActive": [Function],
                                                    "setAnimateFunction": [Function],
                                                  },
                                                  "blockInitialAnimation": true,
                                                  "build": [Function],
                                                  "clearAllListeners": [Function],
                                                  "clearState": [Function],
                                                  "current": <div
                                                    style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                  >
                                                    <svg
                                                      class="css-da6t8b"
                                                      style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                      viewBox="0 0 12 10"
                                                    >
                                                      <polyline
                                                        points="1.5 6 4.5 9 10.5 1"
                                                      />
                                                    </svg>
                                                  </div>,
                                                  "depth": 0,
                                                  "enableLayoutProjection": [Function],
                                                  "forEachValue": [Function],
                                                  "getBaseTarget": [Function],
                                                  "getClosestVariantNode": [Function],
                                                  "getDefaultTransition": [Function],
                                                  "getInstance": [Function],
                                                  "getLatestValues": [Function],
                                                  "getLayoutId": [Function],
                                                  "getLayoutState": [Function],
                                                  "getProjectionAnimationProgress": [Function],
                                                  "getProps": [Function],
                                                  "getStaticValue": [Function],
                                                  "getValue": [Function],
                                                  "getVariant": [Function],
                                                  "getVariantContext": [Function],
                                                  "hasValue": [Function],
                                                  "isHoverEventsEnabled": true,
                                                  "isMounted": [Function],
                                                  "isPresenceRoot": true,
                                                  "isPresent": true,
                                                  "isStatic": false,
                                                  "isVisible": undefined,
                                                  "lockProjectionTarget": [Function],
                                                  "makeTargetAnimatable": [Function],
                                                  "manuallyAnimateOnMount": false,
                                                  "measureViewportBox": [Function],
                                                  "notifyAnimationComplete": [Function],
                                                  "notifyAnimationStart": [Function],
                                                  "notifyBeforeLayoutMeasure": [Function],
                                                  "notifyLayoutAnimationComplete": [Function],
                                                  "notifyLayoutMeasure": [Function],
                                                  "notifyLayoutReady": [Function],
                                                  "notifyLayoutUpdate": [Function],
                                                  "notifyRender": [Function],
                                                  "notifySetAxisTarget": [Function],
                                                  "notifyUpdate": [Function],
                                                  "notifyViewportBoxUpdate": [Function],
                                                  "onAnimationComplete": [Function],
                                                  "onAnimationStart": [Function],
                                                  "onBeforeLayoutMeasure": [Function],
                                                  "onLayoutAnimationComplete": [Function],
                                                  "onLayoutMeasure": [Function],
                                                  "onLayoutUpdate": [Function],
                                                  "onRender": [Function],
                                                  "onSetAxisTarget": [Function],
                                                  "onUpdate": [Function],
                                                  "onViewportBoxUpdate": [Function],
                                                  "path": Array [],
                                                  "pointTo": [Function],
                                                  "presence": 0,
                                                  "presenceId": 4,
                                                  "projection": Object {
                                                    "isEnabled": false,
                                                    "isTargetLocked": false,
                                                    "target": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                    "targetFinal": Object {
                                                      "x": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                      "y": Object {
                                                        "max": 1,
                                                        "min": 0,
                                                      },
                                                    },
                                                  },
                                                  "readValue": [Function],
                                                  "rebaseProjectionTarget": [Function],
                                                  "ref": [Function],
                                                  "removeValue": [Function],
                                                  "resetTransform": [Function],
                                                  "scheduleRender": [Function],
                                                  "scheduleUpdateLayoutProjection": [Function],
                                                  "setBaseTarget": [Function],
                                                  "setCrossfader": [Function],
                                                  "setProjectionTargetAxis": [Function],
                                                  "setProps": [Function],
                                                  "setStaticValue": [Function],
                                                  "setVisibility": [Function],
                                                  "snapshotViewportBox": [Function],
                                                  "sortNodePosition": [Function],
                                                  "startLayoutAnimation": [Function],
                                                  "stopLayoutAnimation": [Function],
                                                  "suspendHoverEvents": [Function],
                                                  "syncRender": [Function],
                                                  "treeType": "dom",
                                                  "unlockProjectionTarget": [Function],
                                                  "updateLayoutMeasurement": [Function],
                                                  "updateLayoutProjection": [Function],
                                                  "updatePropListeners": [Function],
                                                  "variantChildren": Set {
                                                    Object {
                                                      "addChild": [Function],
                                                      "addValue": [Function],
                                                      "addVariantChild": [Function],
                                                      "animationState": Object {
                                                        "animateChanges": [Function],
                                                        "getState": [Function],
                                                        "isAnimated": [Function],
                                                        "setActive": [Function],
                                                        "setAnimateFunction": [Function],
                                                      },
                                                      "blockInitialAnimation": true,
                                                      "build": [Function],
                                                      "clearAllListeners": [Function],
                                                      "clearState": [Function],
                                                      "current": <svg
                                                        class="css-da6t8b"
                                                        style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                        viewBox="0 0 12 10"
                                                      >
                                                        <polyline
                                                          points="1.5 6 4.5 9 10.5 1"
                                                        />
                                                      </svg>,
                                                      "depth": 1,
                                                      "enableLayoutProjection": [Function],
                                                      "forEachValue": [Function],
                                                      "getBaseTarget": [Function],
                                                      "getClosestVariantNode": [Function],
                                                      "getDefaultTransition": [Function],
                                                      "getInstance": [Function],
                                                      "getLatestValues": [Function],
                                                      "getLayoutId": [Function],
                                                      "getLayoutState": [Function],
                                                      "getProjectionAnimationProgress": [Function],
                                                      "getProps": [Function],
                                                      "getStaticValue": [Function],
                                                      "getValue": [Function],
                                                      "getVariant": [Function],
                                                      "getVariantContext": [Function],
                                                      "hasValue": [Function],
                                                      "isHoverEventsEnabled": true,
                                                      "isMounted": [Function],
                                                      "isPresenceRoot": false,
                                                      "isPresent": true,
                                                      "isStatic": false,
                                                      "isVisible": undefined,
                                                      "lockProjectionTarget": [Function],
                                                      "makeTargetAnimatable": [Function],
                                                      "manuallyAnimateOnMount": false,
                                                      "measureViewportBox": [Function],
                                                      "notifyAnimationComplete": [Function],
                                                      "notifyAnimationStart": [Function],
                                                      "notifyBeforeLayoutMeasure": [Function],
                                                      "notifyLayoutAnimationComplete": [Function],
                                                      "notifyLayoutMeasure": [Function],
                                                      "notifyLayoutReady": [Function],
                                                      "notifyLayoutUpdate": [Function],
                                                      "notifyRender": [Function],
                                                      "notifySetAxisTarget": [Function],
                                                      "notifyUpdate": [Function],
                                                      "notifyViewportBoxUpdate": [Function],
                                                      "onAnimationComplete": [Function],
                                                      "onAnimationStart": [Function],
                                                      "onBeforeLayoutMeasure": [Function],
                                                      "onLayoutAnimationComplete": [Function],
                                                      "onLayoutMeasure": [Function],
                                                      "onLayoutUpdate": [Function],
                                                      "onRender": [Function],
                                                      "onSetAxisTarget": [Function],
                                                      "onUpdate": [Function],
                                                      "onViewportBoxUpdate": [Function],
                                                      "path": Array [
                                                        [Circular],
                                                      ],
                                                      "pointTo": [Function],
                                                      "presence": 0,
                                                      "presenceId": 4,
                                                      "projection": Object {
                                                        "isEnabled": false,
                                                        "isTargetLocked": false,
                                                        "target": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                        "targetFinal": Object {
                                                          "x": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                          "y": Object {
                                                            "max": 1,
                                                            "min": 0,
                                                          },
                                                        },
                                                      },
                                                      "readValue": [Function],
                                                      "rebaseProjectionTarget": [Function],
                                                      "ref": [Function],
                                                      "removeValue": [Function],
                                                      "resetTransform": [Function],
                                                      "scheduleRender": [Function],
                                                      "scheduleUpdateLayoutProjection": [Function],
                                                      "setBaseTarget": [Function],
                                                      "setCrossfader": [Function],
                                                      "setProjectionTargetAxis": [Function],
                                                      "setProps": [Function],
                                                      "setStaticValue": [Function],
                                                      "setVisibility": [Function],
                                                      "snapshotViewportBox": [Function],
                                                      "sortNodePosition": [Function],
                                                      "startLayoutAnimation": [Function],
                                                      "stopLayoutAnimation": [Function],
                                                      "suspendHoverEvents": [Function],
                                                      "syncRender": [Function],
                                                      "treeType": "dom",
                                                      "unlockProjectionTarget": [Function],
                                                      "updateLayoutMeasurement": [Function],
                                                      "updateLayoutProjection": [Function],
                                                      "updatePropListeners": [Function],
                                                      "variantChildren": Set {},
                                                      "withoutTransform": [Function],
                                                    },
                                                  },
                                                  "withoutTransform": [Function],
                                                }
                                              }
                                            />
                                          </ForwardRef(MotionComponent)>
                                        </PresenceChild>
                                      </AnimatePresence>
                                    </CheckboxTransition>
                                  </CheckboxIcon>
                                </span>
                              </Styled(span)>
                              <Styled(span)
                                __css={
                                  Object {
                                    "_disabled": Object {
                                      "opacity": 0.4,
                                    },
                                    "fontSize": "md",
                                    "marginStart": "0.5rem",
                                    "userSelect": "none",
                                  }
                                }
                                className="chakra-checkbox__label"
                                data-checked=""
                                onMouseDown={[Function]}
                                onTouchStart={[Function]}
                              >
                                <span
                                  className="chakra-checkbox__label css-1sgc0qu"
                                  data-checked=""
                                  onMouseDown={[Function]}
                                  onTouchStart={[Function]}
                                >
                                  Fri
                                </span>
                              </Styled(span)>
                            </label>
                          </Styled(label)>
                        </Checkbox>
                      </Day>
                      <Day
                        day="Saturday"
                        isChecked={false}
                        key="Saturday"
                        update={[MockFunction]}
                      >
                        <Checkbox
                          fontWeight="normal"
                          isChecked={false}
                          onChange={[Function]}
                        >
                          <Styled(label)
                            __css={Object {}}
                            className="chakra-checkbox"
                            fontWeight="normal"
                            onClick={[Function]}
                          >
                            <label
                              className="chakra-checkbox css-fnpc6t"
                              onClick={[Function]}
                            >
                              <input
                                checked={false}
                                className="chakra-checkbox__input"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                style={
                                  Object {
                                    "border": "0px",
                                    "clip": "rect(0px, 0px, 0px, 0px)",
                                    "height": "1px",
                                    "margin": "-1px",
                                    "overflow": "hidden",
                                    "padding": "0px",
                                    "position": "absolute",
                                    "whiteSpace": "nowrap",
                                    "width": "1px",
                                  }
                                }
                                type="checkbox"
                              />
                              <Styled(span)
                                __css={
                                  Object {
                                    "_checked": Object {
                                      "_disabled": Object {
                                        "bg": "gray.200",
                                        "borderColor": "gray.200",
                                        "color": "gray.500",
                                      },
                                      "_hover": Object {
                                        "bg": "blue.600",
                                        "borderColor": "blue.600",
                                      },
                                      "bg": "blue.500",
                                      "borderColor": "blue.500",
                                      "color": "white",
                                    },
                                    "_disabled": Object {
                                      "bg": "gray.100",
                                      "borderColor": "gray.100",
                                    },
                                    "_focus": Object {
                                      "boxShadow": "outline",
                                    },
                                    "_indeterminate": Object {
                                      "bg": "blue.500",
                                      "borderColor": "blue.500",
                                      "color": "white",
                                    },
                                    "_invalid": Object {
                                      "borderColor": "red.500",
                                    },
                                    "border": "2px solid",
                                    "borderColor": "inherit",
                                    "borderRadius": "sm",
                                    "color": "white",
                                    "h": 4,
                                    "transition": "box-shadow 250ms",
                                    "w": 4,
                                  }
                                }
                                aria-hidden={true}
                                className="chakra-checkbox__control"
                                onMouseDown={[Function]}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <span
                                  aria-hidden={true}
                                  className="chakra-checkbox__control css-joz5u0"
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  <CheckboxIcon
                                    __css={
                                      Object {
                                        "color": undefined,
                                        "fontSize": "0.625rem",
                                        "opacity": 0,
                                        "transform": "scale(0.95)",
                                        "transition": "transform 200ms",
                                      }
                                    }
                                    isChecked={false}
                                  >
                                    <CheckboxTransition>
                                      <AnimatePresence
                                        initial={false}
                                      />
                                    </CheckboxTransition>
                                  </CheckboxIcon>
                                </span>
                              </Styled(span)>
                              <Styled(span)
                                __css={
                                  Object {
                                    "_disabled": Object {
                                      "opacity": 0.4,
                                    },
                                    "fontSize": "md",
                                    "marginStart": "0.5rem",
                                    "userSelect": "none",
                                  }
                                }
                                className="chakra-checkbox__label"
                                onMouseDown={[Function]}
                                onTouchStart={[Function]}
                              >
                                <span
                                  className="chakra-checkbox__label css-1sgc0qu"
                                  onMouseDown={[Function]}
                                  onTouchStart={[Function]}
                                >
                                  Sat
                                </span>
                              </Styled(span)>
                            </label>
                          </Styled(label)>
                        </Checkbox>
                      </Day>
                      <Day
                        day="Sunday"
                        isChecked={false}
                        key="Sunday"
                        update={[MockFunction]}
                      >
                        <Checkbox
                          fontWeight="normal"
                          isChecked={false}
                          onChange={[Function]}
                        >
                          <Styled(label)
                            __css={Object {}}
                            className="chakra-checkbox"
                            fontWeight="normal"
                            onClick={[Function]}
                          >
                            <label
                              className="chakra-checkbox css-fnpc6t"
                              onClick={[Function]}
                            >
                              <input
                                checked={false}
                                className="chakra-checkbox__input"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                style={
                                  Object {
                                    "border": "0px",
                                    "clip": "rect(0px, 0px, 0px, 0px)",
                                    "height": "1px",
                                    "margin": "-1px",
                                    "overflow": "hidden",
                                    "padding": "0px",
                                    "position": "absolute",
                                    "whiteSpace": "nowrap",
                                    "width": "1px",
                                  }
                                }
                                type="checkbox"
                              />
                              <Styled(span)
                                __css={
                                  Object {
                                    "_checked": Object {
                                      "_disabled": Object {
                                        "bg": "gray.200",
                                        "borderColor": "gray.200",
                                        "color": "gray.500",
                                      },
                                      "_hover": Object {
                                        "bg": "blue.600",
                                        "borderColor": "blue.600",
                                      },
                                      "bg": "blue.500",
                                      "borderColor": "blue.500",
                                      "color": "white",
                                    },
                                    "_disabled": Object {
                                      "bg": "gray.100",
                                      "borderColor": "gray.100",
                                    },
                                    "_focus": Object {
                                      "boxShadow": "outline",
                                    },
                                    "_indeterminate": Object {
                                      "bg": "blue.500",
                                      "borderColor": "blue.500",
                                      "color": "white",
                                    },
                                    "_invalid": Object {
                                      "borderColor": "red.500",
                                    },
                                    "border": "2px solid",
                                    "borderColor": "inherit",
                                    "borderRadius": "sm",
                                    "color": "white",
                                    "h": 4,
                                    "transition": "box-shadow 250ms",
                                    "w": 4,
                                  }
                                }
                                aria-hidden={true}
                                className="chakra-checkbox__control"
                                onMouseDown={[Function]}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                              >
                                <span
                                  aria-hidden={true}
                                  className="chakra-checkbox__control css-joz5u0"
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                >
                                  <CheckboxIcon
                                    __css={
                                      Object {
                                        "color": undefined,
                                        "fontSize": "0.625rem",
                                        "opacity": 0,
                                        "transform": "scale(0.95)",
                                        "transition": "transform 200ms",
                                      }
                                    }
                                    isChecked={false}
                                  >
                                    <CheckboxTransition>
                                      <AnimatePresence
                                        initial={false}
                                      />
                                    </CheckboxTransition>
                                  </CheckboxIcon>
                                </span>
                              </Styled(span)>
                              <Styled(span)
                                __css={
                                  Object {
                                    "_disabled": Object {
                                      "opacity": 0.4,
                                    },
                                    "fontSize": "md",
                                    "marginStart": "0.5rem",
                                    "userSelect": "none",
                                  }
                                }
                                className="chakra-checkbox__label"
                                onMouseDown={[Function]}
                                onTouchStart={[Function]}
                              >
                                <span
                                  className="chakra-checkbox__label css-1sgc0qu"
                                  onMouseDown={[Function]}
                                  onTouchStart={[Function]}
                                >
                                  Sun
                                </span>
                              </Styled(span)>
                            </label>
                          </Styled(label)>
                        </Checkbox>
                      </Day>
                    </div>
                  </Styled(div)>
                </Grid>
              </SimpleGrid>
            </div>
          </Styled(div)>
        </FormControl>
        <Memo(MinutesSeconds)
          key=".1"
          label="Frequency"
          onChange={[Function]}
          seconds={900}
        >
          <FormControl
            isDisabled={false}
            isInvalid={false}
          >
            <Styled(div)
              __css={
                Object {
                  "position": "relative",
                  "width": "100%",
                }
              }
              className="chakra-form-control"
              role="group"
            >
              <div
                className="chakra-form-control css-1kxonj9"
                role="group"
              >
                <FormLabel
                  htmlFor="00000000-0000-0000-0000-000000000000"
                >
                  <Styled(label)
                    __css={
                      Object {
                        "_disabled": Object {
                          "opacity": 0.4,
                        },
                        "display": "block",
                        "fontSize": "md",
                        "fontWeight": "medium",
                        "marginEnd": 3,
                        "mb": 2,
                        "opacity": 1,
                        "textAlign": "start",
                        "transition": "all 0.2s",
                      }
                    }
                    className="chakra-form__label"
                    htmlFor="00000000-0000-0000-0000-000000000000"
                    id="field-2-label"
                  >
                    <label
                      className="chakra-form__label css-10m1y3x"
                      htmlFor="00000000-0000-0000-0000-000000000000"
                      id="field-2-label"
                    >
                      Frequency
                    </label>
                  </Styled(label)>
                </FormLabel>
                <ForwardRef
                  id="00000000-0000-0000-0000-000000000000"
                  isInvalid={false}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  placeholder=""
                  type="text"
                  units="HH:mm:ss"
                  value="00:15:00"
                >
                  <InputGroup>
                    <Styled(div)
                      __css={
                        Object {
                          "display": "flex",
                          "position": "relative",
                          "width": "100%",
                        }
                      }
                      className="chakra-input__group"
                    >
                      <div
                        className="chakra-input__group css-4302v8"
                      >
                        <Input
                          id="00000000-0000-0000-0000-000000000000"
                          isInvalid={false}
                          key=".0"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          paddingEnd={10}
                          placeholder=""
                          type="text"
                          value="00:15:00"
                        >
                          <Styled(input)
                            __css={
                              Object {
                                "_disabled": Object {
                                  "cursor": "not-allowed",
                                  "opacity": 0.4,
                                },
                                "_focus": Object {
                                  "borderColor": "#3182ce",
                                  "boxShadow": "0 0 0 1px #3182ce",
                                  "zIndex": 1,
                                },
                                "_hover": Object {
                                  "borderColor": "gray.300",
                                },
                                "_invalid": Object {
                                  "borderColor": "#E53E3E",
                                  "boxShadow": "0 0 0 1px #E53E3E",
                                },
                                "_readOnly": Object {
                                  "boxShadow": "none !important",
                                  "userSelect": "all",
                                },
                                "appearance": "none",
                                "bg": "inherit",
                                "border": "1px solid",
                                "borderColor": "inherit",
                                "borderRadius": "md",
                                "fontSize": "md",
                                "h": 10,
                                "minWidth": 0,
                                "outline": 0,
                                "position": "relative",
                                "px": 4,
                                "transition": "all 0.2s",
                                "width": "100%",
                              }
                            }
                            className="chakra-input"
                            disabled={false}
                            id="00000000-0000-0000-0000-000000000000"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            paddingEnd={10}
                            placeholder=""
                            readOnly={false}
                            required={false}
                            type="text"
                            value="00:15:00"
                          >
                            <input
                              className="chakra-input css-1qkmlc7"
                              disabled={false}
                              id="00000000-0000-0000-0000-000000000000"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder=""
                              readOnly={false}
                              required={false}
                              type="text"
                              value="00:15:00"
                            />
                          </Styled(input)>
                        </Input>
                        <InputRightElement
                          color="gray.400"
                          key=".1"
                          mr={2}
                          userSelect="none"
                          width="unset"
                        >
                          <InputElement
                            className="chakra-input__right-element"
                            color="gray.400"
                            mr={2}
                            placement="right"
                            userSelect="none"
                            width="unset"
                          >
                            <Styled(div)
                              __css={
                                Object {
                                  "fontSize": "md",
                                  "height": 10,
                                  "insetEnd": "0",
                                  "width": 10,
                                }
                              }
                              className="chakra-input__right-element"
                              color="gray.400"
                              mr={2}
                              userSelect="none"
                              width="unset"
                            >
                              <div
                                className="chakra-input__right-element css-13i7m2h"
                              >
                                HH:mm:ss
                              </div>
                            </Styled(div)>
                          </InputElement>
                        </InputRightElement>
                      </div>
                    </Styled(div)>
                  </InputGroup>
                </ForwardRef>
              </div>
            </Styled(div)>
          </FormControl>
        </Memo(MinutesSeconds)>
        <Memo(TimePicker)
          key=".2"
          label="Start time"
          onChange={[Function]}
          value={28800}
        >
          <FormControl
            isDisabled={false}
            isInvalid={false}
          >
            <Styled(div)
              __css={
                Object {
                  "position": "relative",
                  "width": "100%",
                }
              }
              className="chakra-form-control"
              role="group"
            >
              <div
                className="chakra-form-control css-1kxonj9"
                role="group"
              >
                <FormLabel
                  htmlFor="00000000-0000-0000-0000-000000000000"
                >
                  <Styled(label)
                    __css={
                      Object {
                        "_disabled": Object {
                          "opacity": 0.4,
                        },
                        "display": "block",
                        "fontSize": "md",
                        "fontWeight": "medium",
                        "marginEnd": 3,
                        "mb": 2,
                        "opacity": 1,
                        "textAlign": "start",
                        "transition": "all 0.2s",
                      }
                    }
                    className="chakra-form__label"
                    htmlFor="00000000-0000-0000-0000-000000000000"
                    id="field-3-label"
                  >
                    <label
                      className="chakra-form__label css-10m1y3x"
                      htmlFor="00000000-0000-0000-0000-000000000000"
                      id="field-3-label"
                    >
                      Start time
                    </label>
                  </Styled(label)>
                </FormLabel>
                <ForwardRef
                  id="00000000-0000-0000-0000-000000000000"
                  isInvalid={false}
                  onChange={[Function]}
                  units="HH:mm"
                  value="08:00"
                >
                  <InputGroup>
                    <Styled(div)
                      __css={
                        Object {
                          "display": "flex",
                          "position": "relative",
                          "width": "100%",
                        }
                      }
                      className="chakra-input__group"
                    >
                      <div
                        className="chakra-input__group css-4302v8"
                      >
                        <Input
                          id="00000000-0000-0000-0000-000000000000"
                          isInvalid={false}
                          key=".0"
                          onChange={[Function]}
                          paddingEnd={10}
                          value="08:00"
                        >
                          <Styled(input)
                            __css={
                              Object {
                                "_disabled": Object {
                                  "cursor": "not-allowed",
                                  "opacity": 0.4,
                                },
                                "_focus": Object {
                                  "borderColor": "#3182ce",
                                  "boxShadow": "0 0 0 1px #3182ce",
                                  "zIndex": 1,
                                },
                                "_hover": Object {
                                  "borderColor": "gray.300",
                                },
                                "_invalid": Object {
                                  "borderColor": "#E53E3E",
                                  "boxShadow": "0 0 0 1px #E53E3E",
                                },
                                "_readOnly": Object {
                                  "boxShadow": "none !important",
                                  "userSelect": "all",
                                },
                                "appearance": "none",
                                "bg": "inherit",
                                "border": "1px solid",
                                "borderColor": "inherit",
                                "borderRadius": "md",
                                "fontSize": "md",
                                "h": 10,
                                "minWidth": 0,
                                "outline": 0,
                                "position": "relative",
                                "px": 4,
                                "transition": "all 0.2s",
                                "width": "100%",
                              }
                            }
                            className="chakra-input"
                            disabled={false}
                            id="00000000-0000-0000-0000-000000000000"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            paddingEnd={10}
                            readOnly={false}
                            required={false}
                            value="08:00"
                          >
                            <input
                              className="chakra-input css-1qkmlc7"
                              disabled={false}
                              id="00000000-0000-0000-0000-000000000000"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              readOnly={false}
                              required={false}
                              value="08:00"
                            />
                          </Styled(input)>
                        </Input>
                        <InputRightElement
                          color="gray.400"
                          key=".1"
                          mr={2}
                          userSelect="none"
                          width="unset"
                        >
                          <InputElement
                            className="chakra-input__right-element"
                            color="gray.400"
                            mr={2}
                            placement="right"
                            userSelect="none"
                            width="unset"
                          >
                            <Styled(div)
                              __css={
                                Object {
                                  "fontSize": "md",
                                  "height": 10,
                                  "insetEnd": "0",
                                  "width": 10,
                                }
                              }
                              className="chakra-input__right-element"
                              color="gray.400"
                              mr={2}
                              userSelect="none"
                              width="unset"
                            >
                              <div
                                className="chakra-input__right-element css-13i7m2h"
                              >
                                HH:mm
                              </div>
                            </Styled(div)>
                          </InputElement>
                        </InputRightElement>
                      </div>
                    </Styled(div)>
                  </InputGroup>
                </ForwardRef>
              </div>
            </Styled(div)>
          </FormControl>
        </Memo(TimePicker)>
        <Memo(TimePicker)
          key=".3"
          label="End time"
          onChange={[Function]}
          value={57600}
        >
          <FormControl
            isDisabled={false}
            isInvalid={false}
          >
            <Styled(div)
              __css={
                Object {
                  "position": "relative",
                  "width": "100%",
                }
              }
              className="chakra-form-control"
              role="group"
            >
              <div
                className="chakra-form-control css-1kxonj9"
                role="group"
              >
                <FormLabel
                  htmlFor="00000000-0000-0000-0000-000000000000"
                >
                  <Styled(label)
                    __css={
                      Object {
                        "_disabled": Object {
                          "opacity": 0.4,
                        },
                        "display": "block",
                        "fontSize": "md",
                        "fontWeight": "medium",
                        "marginEnd": 3,
                        "mb": 2,
                        "opacity": 1,
                        "textAlign": "start",
                        "transition": "all 0.2s",
                      }
                    }
                    className="chakra-form__label"
                    htmlFor="00000000-0000-0000-0000-000000000000"
                    id="field-4-label"
                  >
                    <label
                      className="chakra-form__label css-10m1y3x"
                      htmlFor="00000000-0000-0000-0000-000000000000"
                      id="field-4-label"
                    >
                      End time
                    </label>
                  </Styled(label)>
                </FormLabel>
                <ForwardRef
                  id="00000000-0000-0000-0000-000000000000"
                  isInvalid={false}
                  onChange={[Function]}
                  units="HH:mm"
                  value="16:00"
                >
                  <InputGroup>
                    <Styled(div)
                      __css={
                        Object {
                          "display": "flex",
                          "position": "relative",
                          "width": "100%",
                        }
                      }
                      className="chakra-input__group"
                    >
                      <div
                        className="chakra-input__group css-4302v8"
                      >
                        <Input
                          id="00000000-0000-0000-0000-000000000000"
                          isInvalid={false}
                          key=".0"
                          onChange={[Function]}
                          paddingEnd={10}
                          value="16:00"
                        >
                          <Styled(input)
                            __css={
                              Object {
                                "_disabled": Object {
                                  "cursor": "not-allowed",
                                  "opacity": 0.4,
                                },
                                "_focus": Object {
                                  "borderColor": "#3182ce",
                                  "boxShadow": "0 0 0 1px #3182ce",
                                  "zIndex": 1,
                                },
                                "_hover": Object {
                                  "borderColor": "gray.300",
                                },
                                "_invalid": Object {
                                  "borderColor": "#E53E3E",
                                  "boxShadow": "0 0 0 1px #E53E3E",
                                },
                                "_readOnly": Object {
                                  "boxShadow": "none !important",
                                  "userSelect": "all",
                                },
                                "appearance": "none",
                                "bg": "inherit",
                                "border": "1px solid",
                                "borderColor": "inherit",
                                "borderRadius": "md",
                                "fontSize": "md",
                                "h": 10,
                                "minWidth": 0,
                                "outline": 0,
                                "position": "relative",
                                "px": 4,
                                "transition": "all 0.2s",
                                "width": "100%",
                              }
                            }
                            className="chakra-input"
                            disabled={false}
                            id="00000000-0000-0000-0000-000000000000"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            paddingEnd={10}
                            readOnly={false}
                            required={false}
                            value="16:00"
                          >
                            <input
                              className="chakra-input css-1qkmlc7"
                              disabled={false}
                              id="00000000-0000-0000-0000-000000000000"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              readOnly={false}
                              required={false}
                              value="16:00"
                            />
                          </Styled(input)>
                        </Input>
                        <InputRightElement
                          color="gray.400"
                          key=".1"
                          mr={2}
                          userSelect="none"
                          width="unset"
                        >
                          <InputElement
                            className="chakra-input__right-element"
                            color="gray.400"
                            mr={2}
                            placement="right"
                            userSelect="none"
                            width="unset"
                          >
                            <Styled(div)
                              __css={
                                Object {
                                  "fontSize": "md",
                                  "height": 10,
                                  "insetEnd": "0",
                                  "width": 10,
                                }
                              }
                              className="chakra-input__right-element"
                              color="gray.400"
                              mr={2}
                              userSelect="none"
                              width="unset"
                            >
                              <div
                                className="chakra-input__right-element css-13i7m2h"
                              >
                                HH:mm
                              </div>
                            </Styled(div)>
                          </InputElement>
                        </InputRightElement>
                      </div>
                    </Styled(div)>
                  </InputGroup>
                </ForwardRef>
              </div>
            </Styled(div)>
          </FormControl>
        </Memo(TimePicker)>
        <Checkbox
          fontWeight="normal"
          isChecked={false}
          isDisabled={false}
          key=".4"
          onChange={[Function]}
        >
          <Styled(label)
            __css={Object {}}
            className="chakra-checkbox"
            fontWeight="normal"
            onClick={[Function]}
          >
            <label
              className="chakra-checkbox css-fnpc6t"
              onClick={[Function]}
            >
              <input
                aria-disabled={false}
                checked={false}
                className="chakra-checkbox__input"
                disabled={false}
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                style={
                  Object {
                    "border": "0px",
                    "clip": "rect(0px, 0px, 0px, 0px)",
                    "height": "1px",
                    "margin": "-1px",
                    "overflow": "hidden",
                    "padding": "0px",
                    "position": "absolute",
                    "whiteSpace": "nowrap",
                    "width": "1px",
                  }
                }
                type="checkbox"
              />
              <Styled(span)
                __css={
                  Object {
                    "_checked": Object {
                      "_disabled": Object {
                        "bg": "gray.200",
                        "borderColor": "gray.200",
                        "color": "gray.500",
                      },
                      "_hover": Object {
                        "bg": "blue.600",
                        "borderColor": "blue.600",
                      },
                      "bg": "blue.500",
                      "borderColor": "blue.500",
                      "color": "white",
                    },
                    "_disabled": Object {
                      "bg": "gray.100",
                      "borderColor": "gray.100",
                    },
                    "_focus": Object {
                      "boxShadow": "outline",
                    },
                    "_indeterminate": Object {
                      "bg": "blue.500",
                      "borderColor": "blue.500",
                      "color": "white",
                    },
                    "_invalid": Object {
                      "borderColor": "red.500",
                    },
                    "border": "2px solid",
                    "borderColor": "inherit",
                    "borderRadius": "sm",
                    "color": "white",
                    "h": 4,
                    "transition": "box-shadow 250ms",
                    "w": 4,
                  }
                }
                aria-hidden={true}
                className="chakra-checkbox__control"
                onMouseDown={[Function]}
                onMouseEnter={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
              >
                <span
                  aria-hidden={true}
                  className="chakra-checkbox__control css-joz5u0"
                  onMouseDown={[Function]}
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                >
                  <CheckboxIcon
                    __css={
                      Object {
                        "color": undefined,
                        "fontSize": "0.625rem",
                        "opacity": 0,
                        "transform": "scale(0.95)",
                        "transition": "transform 200ms",
                      }
                    }
                    isChecked={false}
                  >
                    <CheckboxTransition>
                      <AnimatePresence
                        initial={false}
                      />
                    </CheckboxTransition>
                  </CheckboxIcon>
                </span>
              </Styled(span)>
              <Styled(span)
                __css={
                  Object {
                    "_disabled": Object {
                      "opacity": 0.4,
                    },
                    "fontSize": "md",
                    "marginStart": "0.5rem",
                    "userSelect": "none",
                  }
                }
                className="chakra-checkbox__label"
                onMouseDown={[Function]}
                onTouchStart={[Function]}
              >
                <span
                  className="chakra-checkbox__label css-1sgc0qu"
                  onMouseDown={[Function]}
                  onTouchStart={[Function]}
                >
                  Times are exact
                </span>
              </Styled(span)>
            </label>
          </Styled(label)>
        </Checkbox>
        <Divider
          key=".5"
        >
          <Styled(hr)
            __css={
              Object {
                "border": "0",
                "borderBottomWidth": "1px",
                "borderColor": "inherit",
                "borderStyle": "solid",
                "opacity": 0.6,
                "width": "100%",
              }
            }
            aria-orientation="horizontal"
            className="chakra-divider"
          >
            <hr
              aria-orientation="horizontal"
              className="chakra-divider css-svjswr"
            />
          </Styled(hr)>
        </Divider>
        <Phase
          disabled={false}
          key=".6"
          modificationStops={Array []}
          timetable={
            Object {
              "_id": "timetable-id",
              "dwellTime": 10,
              "dwellTimes": Array [
                12,
              ],
              "endTime": 57600,
              "exactTimes": false,
              "friday": true,
              "headwaySecs": 900,
              "modificationId": "1234",
              "modificationName": "Test Modification",
              "monday": true,
              "name": "Test timetable",
              "patternTrips": Array [
                "abcd",
              ],
              "phaseAtStop": "",
              "phaseFromStop": "",
              "phaseFromTimetable": "",
              "phaseSeconds": 300,
              "saturday": false,
              "segmentSpeeds": Array [],
              "sourceTrip": "abcd",
              "startTime": 28800,
              "sunday": false,
              "thursday": true,
              "tuesday": true,
              "wednesday": true,
            }
          }
          update={[MockFunction]}
        >
          <Stack
            mb={4}
            spacing={4}
          >
            <Styled(div)
              __css={
                Object {
                  "& > *:not(style) ~ *:not(style)": Object {
                    "marginBottom": 0,
                    "marginEnd": 0,
                    "marginStart": 0,
                    "marginTop": 4,
                  },
                }
              }
              className="chakra-stack"
              display="flex"
              flexDirection="column"
              mb={4}
            >
              <div
                className="chakra-stack css-1u5a18p"
              >
                <Heading
                  key=".0"
                  size="sm"
                >
                  <Styled(h2)
                    __css={
                      Object {
                        "fontFamily": "heading",
                        "fontSize": "md",
                        "fontWeight": "bold",
                        "lineHeight": 1.2,
                      }
                    }
                    className="chakra-heading"
                  >
                    <h2
                      className="chakra-heading css-9f6g39"
                    >
                      <span>
                        Phasing 
                      </span>
                      <DocsLink
                        to="edit-scenario/phasing"
                      >
                        <ForwardRef
                          label="View docs to learn more"
                        >
                          <Tooltip
                            aria-label="Tooltip: View docs to learn more"
                            fontSize="md"
                            label="View docs to learn more"
                            zIndex={1500}
                          >
                            <Link
                              _hover={
                                Object {
                                  "color": "blue.700",
                                }
                              }
                              color="blue.500"
                              display="inline-block"
                              href="https://docs.conveyal.com/edit-scenario/phasing"
                              isExternal={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onFocus={[Function]}
                              onMouseDown={[Function]}
                              onMouseEnter={[Function]}
                            >
                              <Styled(a)
                                __css={
                                  Object {
                                    "_focus": Object {
                                      "boxShadow": "outline",
                                    },
                                    "_hover": Object {
                                      "textDecoration": "underline",
                                    },
                                    "color": "inherit",
                                    "cursor": "pointer",
                                    "outline": "none",
                                    "textDecoration": "none",
                                    "transition": "all 0.15s ease-out",
                                  }
                                }
                                _hover={
                                  Object {
                                    "color": "blue.700",
                                  }
                                }
                                className="chakra-link"
                                color="blue.500"
                                display="inline-block"
                                href="https://docs.conveyal.com/edit-scenario/phasing"
                                onBlur={[Function]}
                                onClick={[Function]}
                                onFocus={[Function]}
                                onMouseDown={[Function]}
                                onMouseEnter={[Function]}
                                rel="noopener noreferrer"
                                target="_blank"
                              >
                                <a
                                  className="chakra-link css-jcsocw"
                                  href="https://docs.conveyal.com/edit-scenario/phasing"
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onFocus={[Function]}
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  rel="noopener noreferrer"
                                  target="_blank"
                                >
                                  <FaInfoCircle>
                                    <IconBase
                                      attr={
                                        Object {
                                          "viewBox": "0 0 512 512",
                                        }
                                      }
                                    >
                                      <svg
                                        fill="currentColor"
                                        height="1em"
                                        stroke="currentColor"
                                        strokeWidth="0"
                                        style={
                                          Object {
                                            "color": undefined,
                                          }
                                        }
                                        viewBox="0 0 512 512"
                                        width="1em"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"
                                          key="0"
                                        />
                                      </svg>
                                    </IconBase>
                                  </FaInfoCircle>
                                </a>
                              </Styled(a)>
                            </Link>
                            <AnimatePresence />
                          </Tooltip>
                        </ForwardRef>
                      </DocsLink>
                    </h2>
                  </Styled(h2)>
                </Heading>
                <FormControl
                  isDisabled={false}
                  key=".1"
                >
                  <Styled(div)
                    __css={
                      Object {
                        "position": "relative",
                        "width": "100%",
                      }
                    }
                    className="chakra-form-control"
                    role="group"
                  >
                    <div
                      className="chakra-form-control css-1kxonj9"
                      role="group"
                    >
                      <FormLabel
                        htmlFor="phaseAtStop"
                      >
                        <Styled(label)
                          __css={
                            Object {
                              "_disabled": Object {
                                "opacity": 0.4,
                              },
                              "display": "block",
                              "fontSize": "md",
                              "fontWeight": "medium",
                              "marginEnd": 3,
                              "mb": 2,
                              "opacity": 1,
                              "textAlign": "start",
                              "transition": "all 0.2s",
                            }
                          }
                          className="chakra-form__label"
                          htmlFor="phaseAtStop"
                          id="field-7-label"
                        >
                          <label
                            className="chakra-form__label css-10m1y3x"
                            htmlFor="phaseAtStop"
                            id="field-7-label"
                          >
                            Phase at stop
                          </label>
                        </Styled(label)>
                      </FormLabel>
                      <ForwardRef
                        getOptionLabel={[Function]}
                        getOptionValue={[Function]}
                        inputId="phaseAtStop"
                        isClearable={true}
                        isDisabled={false}
                        name="Phase at stop"
                        onChange={[Function]}
                        options={Array []}
                        placeholder="Phase at stop"
                      >
                        <ReactSelect
                          getOptionLabel={[Function]}
                          getOptionValue={[Function]}
                          innerRef={null}
                          inputId="phaseAtStop"
                          isClearable={true}
                          isDisabled={false}
                          name="Phase at stop"
                          onChange={[Function]}
                          options={Array []}
                          placeholder="Phase at stop"
                          styles={
                            Object {
                              "control": [Function],
                              "menu": [Function],
                              "option": [Function],
                            }
                          }
                        >
                          <div
                            className="ReactSelectMock"
                          />
                        </ReactSelect>
                      </ForwardRef>
                    </div>
                  </Styled(div)>
                </FormControl>
              </div>
            </Styled(div)>
          </Stack>
        </Phase>
      </div>
    </Styled(div)>
  </Stack>
</TimetableEntry>
`;
