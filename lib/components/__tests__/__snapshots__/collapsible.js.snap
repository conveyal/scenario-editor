// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component Collapsible snapshot(mount) 1`] = `
<Collapsible
  title="collapse"
>
  <Box>
    <div
      className="css-0"
    >
      <Button
        isFullWidth={true}
        leftIcon={<FaChevronRight />}
        mb={0}
        onClick={[Function]}
      >
        <Styled(button)
          __css={
            Object {
              "_active": Object {
                "bg": "gray.300",
              },
              "_disabled": Object {
                "boxShadow": "none",
                "cursor": "not-allowed",
                "opacity": 0.4,
              },
              "_focus": Object {
                "boxShadow": "outline",
              },
              "_hover": Object {
                "_disabled": Object {
                  "bg": "gray.100",
                },
                "bg": "gray.200",
              },
              "alignItems": "center",
              "appearance": "none",
              "bg": "gray.100",
              "borderRadius": "md",
              "display": "inline-flex",
              "fontSize": "md",
              "fontWeight": "semibold",
              "h": 10,
              "justifyContent": "center",
              "lineHeight": "1.2",
              "minW": 10,
              "outline": "none",
              "position": "relative",
              "px": 4,
              "transition": "all 250ms",
              "userSelect": "none",
              "verticalAlign": "middle",
              "whiteSpace": "nowrap",
              "width": "100%",
            }
          }
          className="chakra-button"
          mb={0}
          onClick={[Function]}
          type="button"
        >
          <button
            className="chakra-button css-8ptd5d"
            onClick={[Function]}
            type="button"
          >
            <ButtonIcon
              marginEnd="0.5rem"
            >
              <Styled(span)
                alignSelf="center"
                className="chakra-button__icon"
                display="inline-flex"
                flexShrink={0}
                marginEnd="0.5rem"
              >
                <span
                  className="chakra-button__icon css-1wh2kri"
                >
                  <FaChevronRight
                    aria-hidden={true}
                    focusable={false}
                  >
                    <IconBase
                      aria-hidden={true}
                      attr={
                        Object {
                          "viewBox": "0 0 320 512",
                        }
                      }
                      focusable={false}
                    >
                      <svg
                        aria-hidden={true}
                        fill="currentColor"
                        focusable={false}
                        height="1em"
                        stroke="currentColor"
                        strokeWidth="0"
                        style={
                          Object {
                            "color": undefined,
                          }
                        }
                        viewBox="0 0 320 512"
                        width="1em"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"
                          key="0"
                        />
                      </svg>
                    </IconBase>
                  </FaChevronRight>
                </span>
              </Styled(span)>
            </ButtonIcon>
            collapse
          </button>
        </Styled(button)>
      </Button>
      <Collapse
        in={false}
      >
        <AnimatePresence
          custom={
            Object {
              "animateOpacity": true,
              "endingHeight": "auto",
              "startingHeight": 0,
              "transition": Object {
                "enter": Object {
                  "duration": 0,
                },
              },
              "transitionEnd": Object {
                "enter": Object {
                  "overflow": "initial",
                },
                "exit": Object {
                  "display": "none",
                },
              },
            }
          }
          initial={false}
        >
          <PresenceChild
            isPresent={true}
            key=""
            presenceAffectsLayout={true}
          >
            <ForwardRef(MotionComponent)
              animate="exit"
              className="chakra-collapse"
              custom={
                Object {
                  "animateOpacity": true,
                  "endingHeight": "auto",
                  "startingHeight": 0,
                  "transition": Object {
                    "enter": Object {
                      "duration": 0,
                    },
                  },
                  "transitionEnd": Object {
                    "enter": Object {
                      "overflow": "initial",
                    },
                    "exit": Object {
                      "display": "none",
                    },
                  },
                }
              }
              exit="exit"
              initial={false}
              style={
                Object {
                  "display": "block",
                  "overflow": "hidden",
                }
              }
              variants={
                Object {
                  "enter": [Function],
                  "exit": [Function],
                }
              }
            >
              <div
                className="chakra-collapse"
                style={
                  Object {
                    "display": "none",
                    "height": "0px",
                    "opacity": 0,
                    "overflow": "hidden",
                  }
                }
              >
                Hello world
              </div>
              <Component
                animate="exit"
                className="chakra-collapse"
                custom={
                  Object {
                    "animateOpacity": true,
                    "endingHeight": "auto",
                    "startingHeight": 0,
                    "transition": Object {
                      "enter": Object {
                        "duration": 0,
                      },
                    },
                    "transitionEnd": Object {
                      "enter": Object {
                        "overflow": "initial",
                      },
                      "exit": Object {
                        "display": "none",
                      },
                    },
                  }
                }
                exit="exit"
                initial={false}
                key="animation"
                style={
                  Object {
                    "display": "block",
                    "overflow": "hidden",
                  }
                }
                variants={
                  Object {
                    "enter": [Function],
                    "exit": [Function],
                  }
                }
                visualElement={
                  Object {
                    "addChild": [Function],
                    "addValue": [Function],
                    "addVariantChild": [Function],
                    "animationState": Object {
                      "animateChanges": [Function],
                      "getState": [Function],
                      "isAnimated": [Function],
                      "setActive": [Function],
                      "setAnimateFunction": [Function],
                    },
                    "blockInitialAnimation": true,
                    "build": [Function],
                    "clearAllListeners": [Function],
                    "clearState": [Function],
                    "current": <div
                      class="chakra-collapse"
                      style="overflow: hidden; display: none; opacity: 0; height: 0px;"
                    >
                      Hello world
                    </div>,
                    "depth": 0,
                    "enableLayoutProjection": [Function],
                    "forEachValue": [Function],
                    "getBaseTarget": [Function],
                    "getClosestVariantNode": [Function],
                    "getDefaultTransition": [Function],
                    "getInstance": [Function],
                    "getLatestValues": [Function],
                    "getLayoutId": [Function],
                    "getLayoutState": [Function],
                    "getProjectionAnimationProgress": [Function],
                    "getProps": [Function],
                    "getStaticValue": [Function],
                    "getValue": [Function],
                    "getVariant": [Function],
                    "getVariantContext": [Function],
                    "hasValue": [Function],
                    "isHoverEventsEnabled": true,
                    "isMounted": [Function],
                    "isPresenceRoot": true,
                    "isPresent": true,
                    "isStatic": false,
                    "isVisible": undefined,
                    "lockProjectionTarget": [Function],
                    "makeTargetAnimatable": [Function],
                    "manuallyAnimateOnMount": false,
                    "measureViewportBox": [Function],
                    "notifyAnimationComplete": [Function],
                    "notifyAnimationStart": [Function],
                    "notifyBeforeLayoutMeasure": [Function],
                    "notifyLayoutAnimationComplete": [Function],
                    "notifyLayoutMeasure": [Function],
                    "notifyLayoutReady": [Function],
                    "notifyLayoutUpdate": [Function],
                    "notifyRender": [Function],
                    "notifySetAxisTarget": [Function],
                    "notifyUpdate": [Function],
                    "notifyViewportBoxUpdate": [Function],
                    "onAnimationComplete": [Function],
                    "onAnimationStart": [Function],
                    "onBeforeLayoutMeasure": [Function],
                    "onLayoutAnimationComplete": [Function],
                    "onLayoutMeasure": [Function],
                    "onLayoutUpdate": [Function],
                    "onRender": [Function],
                    "onSetAxisTarget": [Function],
                    "onUpdate": [Function],
                    "onViewportBoxUpdate": [Function],
                    "path": Array [],
                    "pointTo": [Function],
                    "presence": 0,
                    "presenceId": 0,
                    "projection": Object {
                      "isEnabled": false,
                      "isTargetLocked": false,
                      "target": Object {
                        "x": Object {
                          "max": 1,
                          "min": 0,
                        },
                        "y": Object {
                          "max": 1,
                          "min": 0,
                        },
                      },
                      "targetFinal": Object {
                        "x": Object {
                          "max": 1,
                          "min": 0,
                        },
                        "y": Object {
                          "max": 1,
                          "min": 0,
                        },
                      },
                    },
                    "readValue": [Function],
                    "rebaseProjectionTarget": [Function],
                    "ref": [Function],
                    "removeValue": [Function],
                    "resetTransform": [Function],
                    "scheduleRender": [Function],
                    "scheduleUpdateLayoutProjection": [Function],
                    "setBaseTarget": [Function],
                    "setCrossfader": [Function],
                    "setProjectionTargetAxis": [Function],
                    "setProps": [Function],
                    "setStaticValue": [Function],
                    "setVisibility": [Function],
                    "snapshotViewportBox": [Function],
                    "sortNodePosition": [Function],
                    "startLayoutAnimation": [Function],
                    "stopLayoutAnimation": [Function],
                    "suspendHoverEvents": [Function],
                    "syncRender": [Function],
                    "treeType": "dom",
                    "unlockProjectionTarget": [Function],
                    "updateLayoutMeasurement": [Function],
                    "updateLayoutProjection": [Function],
                    "updatePropListeners": [Function],
                    "variantChildren": Set {},
                    "withoutTransform": [Function],
                  }
                }
              />
              <Component
                animate="exit"
                className="chakra-collapse"
                custom={
                  Object {
                    "animateOpacity": true,
                    "endingHeight": "auto",
                    "startingHeight": 0,
                    "transition": Object {
                      "enter": Object {
                        "duration": 0,
                      },
                    },
                    "transitionEnd": Object {
                      "enter": Object {
                        "overflow": "initial",
                      },
                      "exit": Object {
                        "display": "none",
                      },
                    },
                  }
                }
                exit="exit"
                initial={false}
                key="exit"
                style={
                  Object {
                    "display": "block",
                    "overflow": "hidden",
                  }
                }
                variants={
                  Object {
                    "enter": [Function],
                    "exit": [Function],
                  }
                }
                visualElement={
                  Object {
                    "addChild": [Function],
                    "addValue": [Function],
                    "addVariantChild": [Function],
                    "animationState": Object {
                      "animateChanges": [Function],
                      "getState": [Function],
                      "isAnimated": [Function],
                      "setActive": [Function],
                      "setAnimateFunction": [Function],
                    },
                    "blockInitialAnimation": true,
                    "build": [Function],
                    "clearAllListeners": [Function],
                    "clearState": [Function],
                    "current": <div
                      class="chakra-collapse"
                      style="overflow: hidden; display: none; opacity: 0; height: 0px;"
                    >
                      Hello world
                    </div>,
                    "depth": 0,
                    "enableLayoutProjection": [Function],
                    "forEachValue": [Function],
                    "getBaseTarget": [Function],
                    "getClosestVariantNode": [Function],
                    "getDefaultTransition": [Function],
                    "getInstance": [Function],
                    "getLatestValues": [Function],
                    "getLayoutId": [Function],
                    "getLayoutState": [Function],
                    "getProjectionAnimationProgress": [Function],
                    "getProps": [Function],
                    "getStaticValue": [Function],
                    "getValue": [Function],
                    "getVariant": [Function],
                    "getVariantContext": [Function],
                    "hasValue": [Function],
                    "isHoverEventsEnabled": true,
                    "isMounted": [Function],
                    "isPresenceRoot": true,
                    "isPresent": true,
                    "isStatic": false,
                    "isVisible": undefined,
                    "lockProjectionTarget": [Function],
                    "makeTargetAnimatable": [Function],
                    "manuallyAnimateOnMount": false,
                    "measureViewportBox": [Function],
                    "notifyAnimationComplete": [Function],
                    "notifyAnimationStart": [Function],
                    "notifyBeforeLayoutMeasure": [Function],
                    "notifyLayoutAnimationComplete": [Function],
                    "notifyLayoutMeasure": [Function],
                    "notifyLayoutReady": [Function],
                    "notifyLayoutUpdate": [Function],
                    "notifyRender": [Function],
                    "notifySetAxisTarget": [Function],
                    "notifyUpdate": [Function],
                    "notifyViewportBoxUpdate": [Function],
                    "onAnimationComplete": [Function],
                    "onAnimationStart": [Function],
                    "onBeforeLayoutMeasure": [Function],
                    "onLayoutAnimationComplete": [Function],
                    "onLayoutMeasure": [Function],
                    "onLayoutUpdate": [Function],
                    "onRender": [Function],
                    "onSetAxisTarget": [Function],
                    "onUpdate": [Function],
                    "onViewportBoxUpdate": [Function],
                    "path": Array [],
                    "pointTo": [Function],
                    "presence": 0,
                    "presenceId": 0,
                    "projection": Object {
                      "isEnabled": false,
                      "isTargetLocked": false,
                      "target": Object {
                        "x": Object {
                          "max": 1,
                          "min": 0,
                        },
                        "y": Object {
                          "max": 1,
                          "min": 0,
                        },
                      },
                      "targetFinal": Object {
                        "x": Object {
                          "max": 1,
                          "min": 0,
                        },
                        "y": Object {
                          "max": 1,
                          "min": 0,
                        },
                      },
                    },
                    "readValue": [Function],
                    "rebaseProjectionTarget": [Function],
                    "ref": [Function],
                    "removeValue": [Function],
                    "resetTransform": [Function],
                    "scheduleRender": [Function],
                    "scheduleUpdateLayoutProjection": [Function],
                    "setBaseTarget": [Function],
                    "setCrossfader": [Function],
                    "setProjectionTargetAxis": [Function],
                    "setProps": [Function],
                    "setStaticValue": [Function],
                    "setVisibility": [Function],
                    "snapshotViewportBox": [Function],
                    "sortNodePosition": [Function],
                    "startLayoutAnimation": [Function],
                    "stopLayoutAnimation": [Function],
                    "suspendHoverEvents": [Function],
                    "syncRender": [Function],
                    "treeType": "dom",
                    "unlockProjectionTarget": [Function],
                    "updateLayoutMeasurement": [Function],
                    "updateLayoutProjection": [Function],
                    "updatePropListeners": [Function],
                    "variantChildren": Set {},
                    "withoutTransform": [Function],
                  }
                }
              />
            </ForwardRef(MotionComponent)>
          </PresenceChild>
        </AnimatePresence>
      </Collapse>
    </div>
  </Box>
</Collapsible>
`;
