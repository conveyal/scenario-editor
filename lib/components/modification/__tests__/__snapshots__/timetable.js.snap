// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component > Timetable renders correctly 1`] = `
<TimetableComponent
  allPhaseFromTimetableStops={Object {}}
  bidirectional={false}
  modificationStops={Array []}
  numberOfStops={0}
  projectTimetables={Array []}
  qualifiedStops={Array []}
  remove={[MockFunction]}
  segmentDistances={Array []}
  timetable={
    Object {
      "_id": "timetable-id",
      "dwellTime": 10,
      "dwellTimes": Array [
        12,
      ],
      "endTime": 57600,
      "exactTimes": false,
      "friday": true,
      "headwaySecs": 900,
      "modificationId": "1234",
      "modificationName": "Test Modification",
      "monday": true,
      "name": "Test timetable",
      "patternTrips": Array [
        "abcd",
      ],
      "phaseAtStop": "",
      "phaseFromStop": "",
      "phaseFromTimetable": "",
      "phaseSeconds": 300,
      "saturday": false,
      "segmentSpeeds": Array [],
      "sourceTrip": "abcd",
      "startTime": 28800,
      "sunday": false,
      "thursday": true,
      "tuesday": true,
      "wednesday": true,
    }
  }
  update={[MockFunction]}
>
  <Collapsible
    defaultExpanded={false}
    heading={
      <React.Fragment>
        <FaCalendar
          style={
            Object {
              "display": "inline-block",
            }
          }
        />
        <strong>
           
          Test timetable
        </strong>
      </React.Fragment>
    }
  >
    <Panel>
      <Box
        borderWidth="1px"
        shadow="xs"
      >
        <div
          className="css-1mnvrbo"
        >
          <Heading
            onClick={[Function]}
            style={
              Object {
                "cursor": "pointer",
              }
            }
          >
            <Flex
              bg="gray.50"
              justify="space-between"
              onClick={[Function]}
              p={4}
              role="button"
              style={
                Object {
                  "cursor": "pointer",
                }
              }
            >
              <Styled(div)
                __css={
                  Object {
                    "alignItems": undefined,
                    "display": "flex",
                    "flexBasis": undefined,
                    "flexDirection": undefined,
                    "flexGrow": undefined,
                    "flexShrink": undefined,
                    "flexWrap": undefined,
                    "justifyContent": "space-between",
                  }
                }
                bg="gray.50"
                onClick={[Function]}
                p={4}
                role="button"
                style={
                  Object {
                    "cursor": "pointer",
                  }
                }
              >
                <div
                  className="css-16f6pz"
                  onClick={[Function]}
                  role="button"
                  style={
                    Object {
                      "cursor": "pointer",
                    }
                  }
                >
                  <Box>
                    <div
                      className="css-0"
                    >
                      <FaCalendar
                        style={
                          Object {
                            "display": "inline-block",
                          }
                        }
                      >
                        <IconBase
                          attr={
                            Object {
                              "viewBox": "0 0 448 512",
                            }
                          }
                          style={
                            Object {
                              "display": "inline-block",
                            }
                          }
                        >
                          <svg
                            fill="currentColor"
                            height="1em"
                            stroke="currentColor"
                            strokeWidth="0"
                            style={
                              Object {
                                "color": undefined,
                                "display": "inline-block",
                              }
                            }
                            viewBox="0 0 448 512"
                            width="1em"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M12 192h424c6.6 0 12 5.4 12 12v260c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V204c0-6.6 5.4-12 12-12zm436-44v-36c0-26.5-21.5-48-48-48h-48V12c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v52H160V12c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v52H48C21.5 64 0 85.5 0 112v36c0 6.6 5.4 12 12 12h424c6.6 0 12-5.4 12-12z"
                              key="0"
                            />
                          </svg>
                        </IconBase>
                      </FaCalendar>
                      <strong>
                         
                        Test timetable
                      </strong>
                    </div>
                  </Box>
                  <Box>
                    <div
                      className="css-0"
                    >
                      <FaCaretRight>
                        <IconBase
                          attr={
                            Object {
                              "viewBox": "0 0 192 512",
                            }
                          }
                        >
                          <svg
                            fill="currentColor"
                            height="1em"
                            stroke="currentColor"
                            strokeWidth="0"
                            style={
                              Object {
                                "color": undefined,
                              }
                            }
                            viewBox="0 0 192 512"
                            width="1em"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z"
                              key="0"
                            />
                          </svg>
                        </IconBase>
                      </FaCaretRight>
                    </div>
                  </Box>
                </div>
              </Styled(div)>
            </Flex>
          </Heading>
        </div>
      </Box>
    </Panel>
  </Collapsible>
</TimetableComponent>
`;

exports[`Component > Timetable renders correctly 2`] = `
<TimetableComponent
  allPhaseFromTimetableStops={Object {}}
  bidirectional={false}
  modificationStops={Array []}
  numberOfStops={0}
  projectTimetables={Array []}
  qualifiedStops={Array []}
  remove={[MockFunction]}
  segmentDistances={Array []}
  timetable={
    Object {
      "_id": "timetable-id",
      "dwellTime": 10,
      "dwellTimes": Array [
        12,
      ],
      "endTime": 57600,
      "exactTimes": false,
      "friday": true,
      "headwaySecs": 900,
      "modificationId": "1234",
      "modificationName": "Test Modification",
      "monday": true,
      "name": "Test timetable",
      "patternTrips": Array [
        "abcd",
      ],
      "phaseAtStop": "",
      "phaseFromStop": "",
      "phaseFromTimetable": "",
      "phaseSeconds": 300,
      "saturday": false,
      "segmentSpeeds": Array [],
      "sourceTrip": "abcd",
      "startTime": 28800,
      "sunday": false,
      "thursday": true,
      "tuesday": true,
      "wednesday": true,
    }
  }
  update={[MockFunction]}
>
  <Collapsible
    defaultExpanded={false}
    heading={
      <React.Fragment>
        <FaCalendar
          style={
            Object {
              "display": "inline-block",
            }
          }
        />
        <strong>
           
          Test timetable
        </strong>
      </React.Fragment>
    }
  >
    <Panel>
      <Box
        borderWidth="1px"
        shadow="xs"
      >
        <div
          className="css-1mnvrbo"
        >
          <Heading
            onClick={[Function]}
            style={
              Object {
                "cursor": "pointer",
              }
            }
          >
            <Flex
              bg="gray.50"
              justify="space-between"
              onClick={[Function]}
              p={4}
              role="button"
              style={
                Object {
                  "cursor": "pointer",
                }
              }
            >
              <Styled(div)
                __css={
                  Object {
                    "alignItems": undefined,
                    "display": "flex",
                    "flexBasis": undefined,
                    "flexDirection": undefined,
                    "flexGrow": undefined,
                    "flexShrink": undefined,
                    "flexWrap": undefined,
                    "justifyContent": "space-between",
                  }
                }
                bg="gray.50"
                onClick={[Function]}
                p={4}
                role="button"
                style={
                  Object {
                    "cursor": "pointer",
                  }
                }
              >
                <div
                  className="css-16f6pz"
                  onClick={[Function]}
                  role="button"
                  style={
                    Object {
                      "cursor": "pointer",
                    }
                  }
                >
                  <Box>
                    <div
                      className="css-0"
                    >
                      <FaCalendar
                        style={
                          Object {
                            "display": "inline-block",
                          }
                        }
                      >
                        <IconBase
                          attr={
                            Object {
                              "viewBox": "0 0 448 512",
                            }
                          }
                          style={
                            Object {
                              "display": "inline-block",
                            }
                          }
                        >
                          <svg
                            fill="currentColor"
                            height="1em"
                            stroke="currentColor"
                            strokeWidth="0"
                            style={
                              Object {
                                "color": undefined,
                                "display": "inline-block",
                              }
                            }
                            viewBox="0 0 448 512"
                            width="1em"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M12 192h424c6.6 0 12 5.4 12 12v260c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V204c0-6.6 5.4-12 12-12zm436-44v-36c0-26.5-21.5-48-48-48h-48V12c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v52H160V12c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v52H48C21.5 64 0 85.5 0 112v36c0 6.6 5.4 12 12 12h424c6.6 0 12-5.4 12-12z"
                              key="0"
                            />
                          </svg>
                        </IconBase>
                      </FaCalendar>
                      <strong>
                         
                        Test timetable
                      </strong>
                    </div>
                  </Box>
                  <Box>
                    <div
                      className="css-0"
                    >
                      <FaCaretDown>
                        <IconBase
                          attr={
                            Object {
                              "viewBox": "0 0 320 512",
                            }
                          }
                        >
                          <svg
                            fill="currentColor"
                            height="1em"
                            stroke="currentColor"
                            strokeWidth="0"
                            style={
                              Object {
                                "color": undefined,
                              }
                            }
                            viewBox="0 0 320 512"
                            width="1em"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
                              key="0"
                            />
                          </svg>
                        </IconBase>
                      </FaCaretDown>
                    </div>
                  </Box>
                </div>
              </Styled(div)>
            </Flex>
          </Heading>
          <Body>
            <Box
              p={4}
            >
              <div
                className="css-q5fqw0"
              >
                <Stack
                  spacing={4}
                >
                  <Styled(div)
                    __css={
                      Object {
                        "& > *:not(style) ~ *:not(style)": Object {
                          "marginStart": 0,
                          "marginTop": 4,
                        },
                      }
                    }
                    className="chakra-stack"
                    display="flex"
                    flexDirection="column"
                  >
                    <div
                      className="chakra-stack css-4daikc"
                    >
                      <FormControl
                        isInvalid={false}
                        key=".0"
                      >
                        <Styled(div)
                          __css={
                            Object {
                              "position": "relative",
                              "width": "100%",
                            }
                          }
                          className="chakra-form-control"
                          role="group"
                        >
                          <div
                            className="chakra-form-control css-1kxonj9"
                            role="group"
                          >
                            <FormLabel
                              htmlFor="00000000-0000-0000-0000-000000000000"
                            >
                              <Styled(label)
                                __css={
                                  Object {
                                    "_disabled": Object {
                                      "opacity": 0.4,
                                    },
                                    "display": "block",
                                    "fontSize": "md",
                                    "fontWeight": "medium",
                                    "marginEnd": 3,
                                    "mb": 2,
                                    "opacity": 1,
                                    "textAlign": "start",
                                    "transition": "all 0.2s",
                                  }
                                }
                                className="chakra-form__label"
                                htmlFor="00000000-0000-0000-0000-000000000000"
                                id="field-1-label"
                              >
                                <label
                                  className="chakra-form__label css-1qqx8g3"
                                  htmlFor="00000000-0000-0000-0000-000000000000"
                                  id="field-1-label"
                                >
                                  Name
                                </label>
                              </Styled(label)>
                            </FormLabel>
                            <Input
                              id="00000000-0000-0000-0000-000000000000"
                              isInvalid={false}
                              onChange={[Function]}
                              value="Test timetable"
                            >
                              <Styled(input)
                                __css={
                                  Object {
                                    "_disabled": Object {
                                      "cursor": "not-allowed",
                                      "opacity": 0.4,
                                    },
                                    "_focus": Object {
                                      "borderColor": "#3182ce",
                                      "boxShadow": "0 0 0 1px #3182ce",
                                      "zIndex": 1,
                                    },
                                    "_hover": Object {
                                      "borderColor": "gray.300",
                                    },
                                    "_invalid": Object {
                                      "borderColor": "#E53E3E",
                                      "boxShadow": "0 0 0 1px #E53E3E",
                                    },
                                    "_readOnly": Object {
                                      "boxShadow": "none !important",
                                      "userSelect": "all",
                                    },
                                    "appearance": "none",
                                    "bg": "inherit",
                                    "border": "1px solid",
                                    "borderColor": "inherit",
                                    "borderRadius": "md",
                                    "fontSize": "md",
                                    "h": 10,
                                    "minWidth": 0,
                                    "outline": 0,
                                    "position": "relative",
                                    "px": 4,
                                    "transition": "all 0.2s",
                                    "width": "100%",
                                  }
                                }
                                className="chakra-input"
                                disabled={false}
                                id="00000000-0000-0000-0000-000000000000"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                readOnly={false}
                                required={false}
                                value="Test timetable"
                              >
                                <input
                                  className="chakra-input css-18q2db8"
                                  disabled={false}
                                  id="00000000-0000-0000-0000-000000000000"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  readOnly={false}
                                  required={false}
                                  value="Test timetable"
                                />
                              </Styled(input)>
                            </Input>
                          </div>
                        </Styled(div)>
                      </FormControl>
                      <TimetableEntry
                        key=".1"
                        modificationStops={Array []}
                        timetable={
                          Object {
                            "_id": "timetable-id",
                            "dwellTime": 10,
                            "dwellTimes": Array [
                              12,
                            ],
                            "endTime": 57600,
                            "exactTimes": false,
                            "friday": true,
                            "headwaySecs": 900,
                            "modificationId": "1234",
                            "modificationName": "Test Modification",
                            "monday": true,
                            "name": "Test timetable",
                            "patternTrips": Array [
                              "abcd",
                            ],
                            "phaseAtStop": "",
                            "phaseFromStop": "",
                            "phaseFromTimetable": "",
                            "phaseSeconds": 300,
                            "saturday": false,
                            "segmentSpeeds": Array [],
                            "sourceTrip": "abcd",
                            "startTime": 28800,
                            "sunday": false,
                            "thursday": true,
                            "tuesday": true,
                            "wednesday": true,
                          }
                        }
                        update={[MockFunction]}
                      >
                        <Stack
                          spacing={4}
                        >
                          <Styled(div)
                            __css={
                              Object {
                                "& > *:not(style) ~ *:not(style)": Object {
                                  "marginStart": 0,
                                  "marginTop": 4,
                                },
                              }
                            }
                            className="chakra-stack"
                            display="flex"
                            flexDirection="column"
                          >
                            <div
                              className="chakra-stack css-4daikc"
                            >
                              <FormControl
                                key=".0"
                              >
                                <Styled(div)
                                  __css={
                                    Object {
                                      "position": "relative",
                                      "width": "100%",
                                    }
                                  }
                                  className="chakra-form-control"
                                  role="group"
                                >
                                  <div
                                    className="chakra-form-control css-1kxonj9"
                                    role="group"
                                  >
                                    <FormLabel>
                                      <Styled(label)
                                        __css={
                                          Object {
                                            "_disabled": Object {
                                              "opacity": 0.4,
                                            },
                                            "display": "block",
                                            "fontSize": "md",
                                            "fontWeight": "medium",
                                            "marginEnd": 3,
                                            "mb": 2,
                                            "opacity": 1,
                                            "textAlign": "start",
                                            "transition": "all 0.2s",
                                          }
                                        }
                                        className="chakra-form__label"
                                        htmlFor="field-2"
                                        id="field-2-label"
                                      >
                                        <label
                                          className="chakra-form__label css-1qqx8g3"
                                          htmlFor="field-2"
                                          id="field-2-label"
                                        >
                                          Days active
                                        </label>
                                      </Styled(label)>
                                    </FormLabel>
                                    <SimpleGrid
                                      columns={5}
                                    >
                                      <Grid
                                        templateColumns="repeat(5, 1fr)"
                                      >
                                        <Styled(div)
                                          __css={
                                            Object {
                                              "display": "grid",
                                              "gridArea": undefined,
                                              "gridAutoColumns": undefined,
                                              "gridAutoFlow": undefined,
                                              "gridAutoRows": undefined,
                                              "gridColumn": undefined,
                                              "gridColumnGap": undefined,
                                              "gridGap": undefined,
                                              "gridRow": undefined,
                                              "gridRowGap": undefined,
                                              "gridTemplateAreas": undefined,
                                              "gridTemplateColumns": "repeat(5, 1fr)",
                                              "gridTemplateRows": undefined,
                                            }
                                          }
                                        >
                                          <div
                                            className="css-1l2zrv3"
                                          >
                                            <Day
                                              day="Monday"
                                              isChecked={true}
                                              key="Monday"
                                              update={[MockFunction]}
                                            >
                                              <Checkbox
                                                fontWeight="normal"
                                                isChecked={true}
                                                onChange={[Function]}
                                              >
                                                <Styled(label)
                                                  __css={Object {}}
                                                  className="chakra-checkbox"
                                                  fontWeight="normal"
                                                >
                                                  <label
                                                    className="chakra-checkbox css-wun7cp"
                                                  >
                                                    <input
                                                      checked={true}
                                                      className="chakra-checkbox__input"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      style={
                                                        Object {
                                                          "border": "0px",
                                                          "clip": "rect(0px, 0px, 0px, 0px)",
                                                          "height": "1px",
                                                          "margin": "-1px",
                                                          "overflow": "hidden",
                                                          "padding": "0px",
                                                          "position": "absolute",
                                                          "whiteSpace": "nowrap",
                                                          "width": "1px",
                                                        }
                                                      }
                                                      type="checkbox"
                                                    />
                                                    <Styled(span)
                                                      __css={
                                                        Object {
                                                          "_checked": Object {
                                                            "_disabled": Object {
                                                              "bg": "gray.200",
                                                              "borderColor": "gray.200",
                                                              "color": "gray.500",
                                                            },
                                                            "_hover": Object {
                                                              "bg": "blue.600",
                                                              "borderColor": "blue.600",
                                                            },
                                                            "bg": "blue.500",
                                                            "borderColor": "blue.500",
                                                            "color": "white",
                                                          },
                                                          "_disabled": Object {
                                                            "bg": "gray.100",
                                                            "borderColor": "gray.100",
                                                          },
                                                          "_focus": Object {
                                                            "boxShadow": "outline",
                                                          },
                                                          "_indeterminate": Object {
                                                            "bg": "blue.500",
                                                            "borderColor": "blue.500",
                                                            "color": "white",
                                                          },
                                                          "_invalid": Object {
                                                            "borderColor": "red.500",
                                                          },
                                                          "border": "2px solid",
                                                          "borderColor": "inherit",
                                                          "borderRadius": "sm",
                                                          "color": "white",
                                                          "h": 4,
                                                          "transition": "box-shadow 250ms",
                                                          "w": 4,
                                                        }
                                                      }
                                                      aria-hidden={true}
                                                      className="chakra-checkbox__control"
                                                      data-checked=""
                                                      onMouseDown={[Function]}
                                                      onMouseEnter={[Function]}
                                                      onMouseLeave={[Function]}
                                                      onMouseUp={[Function]}
                                                    >
                                                      <span
                                                        aria-hidden={true}
                                                        className="chakra-checkbox__control css-co2d90"
                                                        data-checked=""
                                                        onMouseDown={[Function]}
                                                        onMouseEnter={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                      >
                                                        <CheckboxIcon
                                                          __css={
                                                            Object {
                                                              "color": undefined,
                                                              "fontSize": "0.625rem",
                                                              "opacity": 1,
                                                              "transform": "scale(1)",
                                                              "transition": "transform 200ms",
                                                            }
                                                          }
                                                          isChecked={true}
                                                        >
                                                          <CheckboxTransition
                                                            open={true}
                                                          >
                                                            <AnimatePresence
                                                              initial={false}
                                                            >
                                                              <PresenceChild
                                                                initial={false}
                                                                isPresent={true}
                                                                key=""
                                                                presenceAffectsLayout={true}
                                                              >
                                                                <ForwardRef(MotionComponent)
                                                                  animate="checked"
                                                                  exit="unchecked"
                                                                  initial="unchecked"
                                                                  style={
                                                                    Object {
                                                                      "alignItems": "center",
                                                                      "display": "flex",
                                                                      "height": "100%",
                                                                      "justifyContent": "center",
                                                                    }
                                                                  }
                                                                  variants={
                                                                    Object {
                                                                      "checked": Object {
                                                                        "scale": 1,
                                                                      },
                                                                      "unchecked": Object {
                                                                        "scale": 0.5,
                                                                      },
                                                                    }
                                                                  }
                                                                >
                                                                  <div
                                                                    style={
                                                                      Object {
                                                                        "alignItems": "center",
                                                                        "display": "flex",
                                                                        "height": "100%",
                                                                        "justifyContent": "center",
                                                                        "transform": "none",
                                                                      }
                                                                    }
                                                                  >
                                                                    <CheckIcon
                                                                      __css={
                                                                        Object {
                                                                          "color": undefined,
                                                                          "fontSize": "0.625rem",
                                                                          "opacity": 1,
                                                                          "transform": "scale(1)",
                                                                          "transition": "transform 200ms",
                                                                        }
                                                                      }
                                                                    >
                                                                      <ForwardRef(MotionComponent)
                                                                        __css={
                                                                          Object {
                                                                            "color": undefined,
                                                                            "fontSize": "0.625rem",
                                                                            "opacity": 1,
                                                                            "transform": "scale(1)",
                                                                            "transition": "transform 200ms",
                                                                          }
                                                                        }
                                                                        style={
                                                                          Object {
                                                                            "fill": "none",
                                                                            "stroke": "currentColor",
                                                                            "strokeDasharray": 16,
                                                                            "strokeWidth": 2,
                                                                          }
                                                                        }
                                                                        variants={
                                                                          Object {
                                                                            "checked": Object {
                                                                              "opacity": 1,
                                                                              "strokeDashoffset": 0,
                                                                              "transition": Object {
                                                                                "duration": 0.2,
                                                                              },
                                                                            },
                                                                            "unchecked": Object {
                                                                              "opacity": 0,
                                                                              "strokeDashoffset": 16,
                                                                            },
                                                                          }
                                                                        }
                                                                        viewBox="0 0 12 10"
                                                                        width="1.2em"
                                                                      >
                                                                        <Styled(svg)
                                                                          __css={
                                                                            Object {
                                                                              "color": undefined,
                                                                              "fontSize": "0.625rem",
                                                                              "opacity": 1,
                                                                              "transform": "scale(1)",
                                                                              "transition": "transform 200ms",
                                                                            }
                                                                          }
                                                                          style={
                                                                            Object {
                                                                              "fill": "none",
                                                                              "opacity": 1,
                                                                              "stroke": "currentColor",
                                                                              "strokeDasharray": 16,
                                                                              "strokeDashoffset": 0,
                                                                              "strokeWidth": 2,
                                                                            }
                                                                          }
                                                                          variants={
                                                                            Object {
                                                                              "checked": Object {
                                                                                "opacity": 1,
                                                                                "strokeDashoffset": 0,
                                                                                "transition": Object {
                                                                                  "duration": 0.2,
                                                                                },
                                                                              },
                                                                              "unchecked": Object {
                                                                                "opacity": 0,
                                                                                "strokeDashoffset": 16,
                                                                              },
                                                                            }
                                                                          }
                                                                          viewBox="0 0 12 10"
                                                                          width="1.2em"
                                                                        >
                                                                          <svg
                                                                            className="css-da6t8b"
                                                                            style={
                                                                              Object {
                                                                                "fill": "none",
                                                                                "opacity": 1,
                                                                                "stroke": "currentColor",
                                                                                "strokeDasharray": 16,
                                                                                "strokeDashoffset": 0,
                                                                                "strokeWidth": 2,
                                                                              }
                                                                            }
                                                                            variants={
                                                                              Object {
                                                                                "checked": Object {
                                                                                  "opacity": 1,
                                                                                  "strokeDashoffset": 0,
                                                                                  "transition": Object {
                                                                                    "duration": 0.2,
                                                                                  },
                                                                                },
                                                                                "unchecked": Object {
                                                                                  "opacity": 0,
                                                                                  "strokeDashoffset": 16,
                                                                                },
                                                                              }
                                                                            }
                                                                            viewBox="0 0 12 10"
                                                                          >
                                                                            <polyline
                                                                              points="1.5 6 4.5 9 10.5 1"
                                                                            />
                                                                          </svg>
                                                                        </Styled(svg)>
                                                                        <Component
                                                                          __css={
                                                                            Object {
                                                                              "color": undefined,
                                                                              "fontSize": "0.625rem",
                                                                              "opacity": 1,
                                                                              "transform": "scale(1)",
                                                                              "transition": "transform 200ms",
                                                                            }
                                                                          }
                                                                          key="animation"
                                                                          style={
                                                                            Object {
                                                                              "fill": "none",
                                                                              "stroke": "currentColor",
                                                                              "strokeDasharray": 16,
                                                                              "strokeWidth": 2,
                                                                            }
                                                                          }
                                                                          variants={
                                                                            Object {
                                                                              "checked": Object {
                                                                                "opacity": 1,
                                                                                "strokeDashoffset": 0,
                                                                                "transition": Object {
                                                                                  "duration": 0.2,
                                                                                },
                                                                              },
                                                                              "unchecked": Object {
                                                                                "opacity": 0,
                                                                                "strokeDashoffset": 16,
                                                                              },
                                                                            }
                                                                          }
                                                                          viewBox="0 0 12 10"
                                                                          visualElement={
                                                                            Object {
                                                                              "addChild": [Function],
                                                                              "addValue": [Function],
                                                                              "addVariantChild": [Function],
                                                                              "animationState": Object {
                                                                                "animateChanges": [Function],
                                                                                "getState": [Function],
                                                                                "isAnimated": [Function],
                                                                                "setActive": [Function],
                                                                                "setAnimateFunction": [Function],
                                                                              },
                                                                              "blockInitialAnimation": true,
                                                                              "build": [Function],
                                                                              "clearAllListeners": [Function],
                                                                              "clearState": [Function],
                                                                              "current": <svg
                                                                                class="css-da6t8b"
                                                                                style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                                variants="[object Object]"
                                                                                viewBox="0 0 12 10"
                                                                              >
                                                                                <polyline
                                                                                  points="1.5 6 4.5 9 10.5 1"
                                                                                />
                                                                              </svg>,
                                                                              "depth": 1,
                                                                              "enableLayoutProjection": [Function],
                                                                              "forEachValue": [Function],
                                                                              "getBaseTarget": [Function],
                                                                              "getClosestVariantNode": [Function],
                                                                              "getDefaultTransition": [Function],
                                                                              "getInstance": [Function],
                                                                              "getLatestValues": [Function],
                                                                              "getLayoutId": [Function],
                                                                              "getLayoutState": [Function],
                                                                              "getProjectionAnimationProgress": [Function],
                                                                              "getProps": [Function],
                                                                              "getStaticValue": [Function],
                                                                              "getValue": [Function],
                                                                              "getVariant": [Function],
                                                                              "getVariantContext": [Function],
                                                                              "hasValue": [Function],
                                                                              "isHoverEventsEnabled": true,
                                                                              "isMounted": [Function],
                                                                              "isPresenceRoot": false,
                                                                              "isPresent": true,
                                                                              "isStatic": false,
                                                                              "isVisible": undefined,
                                                                              "lockProjectionTarget": [Function],
                                                                              "makeTargetAnimatable": [Function],
                                                                              "manuallyAnimateOnMount": false,
                                                                              "measureViewportBox": [Function],
                                                                              "notifyAnimationComplete": [Function],
                                                                              "notifyAnimationStart": [Function],
                                                                              "notifyBeforeLayoutMeasure": [Function],
                                                                              "notifyLayoutAnimationComplete": [Function],
                                                                              "notifyLayoutMeasure": [Function],
                                                                              "notifyLayoutReady": [Function],
                                                                              "notifyLayoutUpdate": [Function],
                                                                              "notifyRender": [Function],
                                                                              "notifySetAxisTarget": [Function],
                                                                              "notifyUpdate": [Function],
                                                                              "notifyViewportBoxUpdate": [Function],
                                                                              "onAnimationComplete": [Function],
                                                                              "onAnimationStart": [Function],
                                                                              "onBeforeLayoutMeasure": [Function],
                                                                              "onLayoutAnimationComplete": [Function],
                                                                              "onLayoutMeasure": [Function],
                                                                              "onLayoutUpdate": [Function],
                                                                              "onRender": [Function],
                                                                              "onSetAxisTarget": [Function],
                                                                              "onUpdate": [Function],
                                                                              "onViewportBoxUpdate": [Function],
                                                                              "path": Array [
                                                                                Object {
                                                                                  "addChild": [Function],
                                                                                  "addValue": [Function],
                                                                                  "addVariantChild": [Function],
                                                                                  "animationState": Object {
                                                                                    "animateChanges": [Function],
                                                                                    "getState": [Function],
                                                                                    "isAnimated": [Function],
                                                                                    "setActive": [Function],
                                                                                    "setAnimateFunction": [Function],
                                                                                  },
                                                                                  "blockInitialAnimation": true,
                                                                                  "build": [Function],
                                                                                  "clearAllListeners": [Function],
                                                                                  "clearState": [Function],
                                                                                  "current": <div
                                                                                    style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                                                  >
                                                                                    <svg
                                                                                      class="css-da6t8b"
                                                                                      style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                                      variants="[object Object]"
                                                                                      viewBox="0 0 12 10"
                                                                                    >
                                                                                      <polyline
                                                                                        points="1.5 6 4.5 9 10.5 1"
                                                                                      />
                                                                                    </svg>
                                                                                  </div>,
                                                                                  "depth": 0,
                                                                                  "enableLayoutProjection": [Function],
                                                                                  "forEachValue": [Function],
                                                                                  "getBaseTarget": [Function],
                                                                                  "getClosestVariantNode": [Function],
                                                                                  "getDefaultTransition": [Function],
                                                                                  "getInstance": [Function],
                                                                                  "getLatestValues": [Function],
                                                                                  "getLayoutId": [Function],
                                                                                  "getLayoutState": [Function],
                                                                                  "getProjectionAnimationProgress": [Function],
                                                                                  "getProps": [Function],
                                                                                  "getStaticValue": [Function],
                                                                                  "getValue": [Function],
                                                                                  "getVariant": [Function],
                                                                                  "getVariantContext": [Function],
                                                                                  "hasValue": [Function],
                                                                                  "isHoverEventsEnabled": true,
                                                                                  "isMounted": [Function],
                                                                                  "isPresenceRoot": true,
                                                                                  "isPresent": true,
                                                                                  "isStatic": false,
                                                                                  "isVisible": undefined,
                                                                                  "lockProjectionTarget": [Function],
                                                                                  "makeTargetAnimatable": [Function],
                                                                                  "manuallyAnimateOnMount": false,
                                                                                  "measureViewportBox": [Function],
                                                                                  "notifyAnimationComplete": [Function],
                                                                                  "notifyAnimationStart": [Function],
                                                                                  "notifyBeforeLayoutMeasure": [Function],
                                                                                  "notifyLayoutAnimationComplete": [Function],
                                                                                  "notifyLayoutMeasure": [Function],
                                                                                  "notifyLayoutReady": [Function],
                                                                                  "notifyLayoutUpdate": [Function],
                                                                                  "notifyRender": [Function],
                                                                                  "notifySetAxisTarget": [Function],
                                                                                  "notifyUpdate": [Function],
                                                                                  "notifyViewportBoxUpdate": [Function],
                                                                                  "onAnimationComplete": [Function],
                                                                                  "onAnimationStart": [Function],
                                                                                  "onBeforeLayoutMeasure": [Function],
                                                                                  "onLayoutAnimationComplete": [Function],
                                                                                  "onLayoutMeasure": [Function],
                                                                                  "onLayoutUpdate": [Function],
                                                                                  "onRender": [Function],
                                                                                  "onSetAxisTarget": [Function],
                                                                                  "onUpdate": [Function],
                                                                                  "onViewportBoxUpdate": [Function],
                                                                                  "path": Array [],
                                                                                  "pointTo": [Function],
                                                                                  "presence": 0,
                                                                                  "presenceId": 0,
                                                                                  "projection": Object {
                                                                                    "isEnabled": false,
                                                                                    "isTargetLocked": false,
                                                                                    "target": Object {
                                                                                      "x": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                      "y": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                    },
                                                                                    "targetFinal": Object {
                                                                                      "x": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                      "y": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                    },
                                                                                  },
                                                                                  "readValue": [Function],
                                                                                  "rebaseProjectionTarget": [Function],
                                                                                  "ref": [Function],
                                                                                  "removeValue": [Function],
                                                                                  "resetTransform": [Function],
                                                                                  "scheduleRender": [Function],
                                                                                  "scheduleUpdateLayoutProjection": [Function],
                                                                                  "setBaseTarget": [Function],
                                                                                  "setCrossfader": [Function],
                                                                                  "setProjectionTargetAxis": [Function],
                                                                                  "setProps": [Function],
                                                                                  "setStaticValue": [Function],
                                                                                  "setVisibility": [Function],
                                                                                  "snapshotViewportBox": [Function],
                                                                                  "sortNodePosition": [Function],
                                                                                  "startLayoutAnimation": [Function],
                                                                                  "stopLayoutAnimation": [Function],
                                                                                  "suspendHoverEvents": [Function],
                                                                                  "syncRender": [Function],
                                                                                  "treeType": "dom",
                                                                                  "unlockProjectionTarget": [Function],
                                                                                  "updateLayoutMeasurement": [Function],
                                                                                  "updateLayoutProjection": [Function],
                                                                                  "updatePropListeners": [Function],
                                                                                  "variantChildren": Set {
                                                                                    [Circular],
                                                                                  },
                                                                                  "withoutTransform": [Function],
                                                                                },
                                                                              ],
                                                                              "pointTo": [Function],
                                                                              "presence": 0,
                                                                              "presenceId": 0,
                                                                              "projection": Object {
                                                                                "isEnabled": false,
                                                                                "isTargetLocked": false,
                                                                                "target": Object {
                                                                                  "x": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                  "y": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                },
                                                                                "targetFinal": Object {
                                                                                  "x": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                  "y": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                },
                                                                              },
                                                                              "readValue": [Function],
                                                                              "rebaseProjectionTarget": [Function],
                                                                              "ref": [Function],
                                                                              "removeValue": [Function],
                                                                              "resetTransform": [Function],
                                                                              "scheduleRender": [Function],
                                                                              "scheduleUpdateLayoutProjection": [Function],
                                                                              "setBaseTarget": [Function],
                                                                              "setCrossfader": [Function],
                                                                              "setProjectionTargetAxis": [Function],
                                                                              "setProps": [Function],
                                                                              "setStaticValue": [Function],
                                                                              "setVisibility": [Function],
                                                                              "snapshotViewportBox": [Function],
                                                                              "sortNodePosition": [Function],
                                                                              "startLayoutAnimation": [Function],
                                                                              "stopLayoutAnimation": [Function],
                                                                              "suspendHoverEvents": [Function],
                                                                              "syncRender": [Function],
                                                                              "treeType": "dom",
                                                                              "unlockProjectionTarget": [Function],
                                                                              "updateLayoutMeasurement": [Function],
                                                                              "updateLayoutProjection": [Function],
                                                                              "updatePropListeners": [Function],
                                                                              "variantChildren": Set {},
                                                                              "withoutTransform": [Function],
                                                                            }
                                                                          }
                                                                          width="1.2em"
                                                                        />
                                                                      </ForwardRef(MotionComponent)>
                                                                    </CheckIcon>
                                                                  </div>
                                                                  <Component
                                                                    animate="checked"
                                                                    exit="unchecked"
                                                                    initial="unchecked"
                                                                    key="animation"
                                                                    style={
                                                                      Object {
                                                                        "alignItems": "center",
                                                                        "display": "flex",
                                                                        "height": "100%",
                                                                        "justifyContent": "center",
                                                                      }
                                                                    }
                                                                    variants={
                                                                      Object {
                                                                        "checked": Object {
                                                                          "scale": 1,
                                                                        },
                                                                        "unchecked": Object {
                                                                          "scale": 0.5,
                                                                        },
                                                                      }
                                                                    }
                                                                    visualElement={
                                                                      Object {
                                                                        "addChild": [Function],
                                                                        "addValue": [Function],
                                                                        "addVariantChild": [Function],
                                                                        "animationState": Object {
                                                                          "animateChanges": [Function],
                                                                          "getState": [Function],
                                                                          "isAnimated": [Function],
                                                                          "setActive": [Function],
                                                                          "setAnimateFunction": [Function],
                                                                        },
                                                                        "blockInitialAnimation": true,
                                                                        "build": [Function],
                                                                        "clearAllListeners": [Function],
                                                                        "clearState": [Function],
                                                                        "current": <div
                                                                          style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                                        >
                                                                          <svg
                                                                            class="css-da6t8b"
                                                                            style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                            variants="[object Object]"
                                                                            viewBox="0 0 12 10"
                                                                          >
                                                                            <polyline
                                                                              points="1.5 6 4.5 9 10.5 1"
                                                                            />
                                                                          </svg>
                                                                        </div>,
                                                                        "depth": 0,
                                                                        "enableLayoutProjection": [Function],
                                                                        "forEachValue": [Function],
                                                                        "getBaseTarget": [Function],
                                                                        "getClosestVariantNode": [Function],
                                                                        "getDefaultTransition": [Function],
                                                                        "getInstance": [Function],
                                                                        "getLatestValues": [Function],
                                                                        "getLayoutId": [Function],
                                                                        "getLayoutState": [Function],
                                                                        "getProjectionAnimationProgress": [Function],
                                                                        "getProps": [Function],
                                                                        "getStaticValue": [Function],
                                                                        "getValue": [Function],
                                                                        "getVariant": [Function],
                                                                        "getVariantContext": [Function],
                                                                        "hasValue": [Function],
                                                                        "isHoverEventsEnabled": true,
                                                                        "isMounted": [Function],
                                                                        "isPresenceRoot": true,
                                                                        "isPresent": true,
                                                                        "isStatic": false,
                                                                        "isVisible": undefined,
                                                                        "lockProjectionTarget": [Function],
                                                                        "makeTargetAnimatable": [Function],
                                                                        "manuallyAnimateOnMount": false,
                                                                        "measureViewportBox": [Function],
                                                                        "notifyAnimationComplete": [Function],
                                                                        "notifyAnimationStart": [Function],
                                                                        "notifyBeforeLayoutMeasure": [Function],
                                                                        "notifyLayoutAnimationComplete": [Function],
                                                                        "notifyLayoutMeasure": [Function],
                                                                        "notifyLayoutReady": [Function],
                                                                        "notifyLayoutUpdate": [Function],
                                                                        "notifyRender": [Function],
                                                                        "notifySetAxisTarget": [Function],
                                                                        "notifyUpdate": [Function],
                                                                        "notifyViewportBoxUpdate": [Function],
                                                                        "onAnimationComplete": [Function],
                                                                        "onAnimationStart": [Function],
                                                                        "onBeforeLayoutMeasure": [Function],
                                                                        "onLayoutAnimationComplete": [Function],
                                                                        "onLayoutMeasure": [Function],
                                                                        "onLayoutUpdate": [Function],
                                                                        "onRender": [Function],
                                                                        "onSetAxisTarget": [Function],
                                                                        "onUpdate": [Function],
                                                                        "onViewportBoxUpdate": [Function],
                                                                        "path": Array [],
                                                                        "pointTo": [Function],
                                                                        "presence": 0,
                                                                        "presenceId": 0,
                                                                        "projection": Object {
                                                                          "isEnabled": false,
                                                                          "isTargetLocked": false,
                                                                          "target": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                          "targetFinal": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                        },
                                                                        "readValue": [Function],
                                                                        "rebaseProjectionTarget": [Function],
                                                                        "ref": [Function],
                                                                        "removeValue": [Function],
                                                                        "resetTransform": [Function],
                                                                        "scheduleRender": [Function],
                                                                        "scheduleUpdateLayoutProjection": [Function],
                                                                        "setBaseTarget": [Function],
                                                                        "setCrossfader": [Function],
                                                                        "setProjectionTargetAxis": [Function],
                                                                        "setProps": [Function],
                                                                        "setStaticValue": [Function],
                                                                        "setVisibility": [Function],
                                                                        "snapshotViewportBox": [Function],
                                                                        "sortNodePosition": [Function],
                                                                        "startLayoutAnimation": [Function],
                                                                        "stopLayoutAnimation": [Function],
                                                                        "suspendHoverEvents": [Function],
                                                                        "syncRender": [Function],
                                                                        "treeType": "dom",
                                                                        "unlockProjectionTarget": [Function],
                                                                        "updateLayoutMeasurement": [Function],
                                                                        "updateLayoutProjection": [Function],
                                                                        "updatePropListeners": [Function],
                                                                        "variantChildren": Set {
                                                                          Object {
                                                                            "addChild": [Function],
                                                                            "addValue": [Function],
                                                                            "addVariantChild": [Function],
                                                                            "animationState": Object {
                                                                              "animateChanges": [Function],
                                                                              "getState": [Function],
                                                                              "isAnimated": [Function],
                                                                              "setActive": [Function],
                                                                              "setAnimateFunction": [Function],
                                                                            },
                                                                            "blockInitialAnimation": true,
                                                                            "build": [Function],
                                                                            "clearAllListeners": [Function],
                                                                            "clearState": [Function],
                                                                            "current": <svg
                                                                              class="css-da6t8b"
                                                                              style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                              variants="[object Object]"
                                                                              viewBox="0 0 12 10"
                                                                            >
                                                                              <polyline
                                                                                points="1.5 6 4.5 9 10.5 1"
                                                                              />
                                                                            </svg>,
                                                                            "depth": 1,
                                                                            "enableLayoutProjection": [Function],
                                                                            "forEachValue": [Function],
                                                                            "getBaseTarget": [Function],
                                                                            "getClosestVariantNode": [Function],
                                                                            "getDefaultTransition": [Function],
                                                                            "getInstance": [Function],
                                                                            "getLatestValues": [Function],
                                                                            "getLayoutId": [Function],
                                                                            "getLayoutState": [Function],
                                                                            "getProjectionAnimationProgress": [Function],
                                                                            "getProps": [Function],
                                                                            "getStaticValue": [Function],
                                                                            "getValue": [Function],
                                                                            "getVariant": [Function],
                                                                            "getVariantContext": [Function],
                                                                            "hasValue": [Function],
                                                                            "isHoverEventsEnabled": true,
                                                                            "isMounted": [Function],
                                                                            "isPresenceRoot": false,
                                                                            "isPresent": true,
                                                                            "isStatic": false,
                                                                            "isVisible": undefined,
                                                                            "lockProjectionTarget": [Function],
                                                                            "makeTargetAnimatable": [Function],
                                                                            "manuallyAnimateOnMount": false,
                                                                            "measureViewportBox": [Function],
                                                                            "notifyAnimationComplete": [Function],
                                                                            "notifyAnimationStart": [Function],
                                                                            "notifyBeforeLayoutMeasure": [Function],
                                                                            "notifyLayoutAnimationComplete": [Function],
                                                                            "notifyLayoutMeasure": [Function],
                                                                            "notifyLayoutReady": [Function],
                                                                            "notifyLayoutUpdate": [Function],
                                                                            "notifyRender": [Function],
                                                                            "notifySetAxisTarget": [Function],
                                                                            "notifyUpdate": [Function],
                                                                            "notifyViewportBoxUpdate": [Function],
                                                                            "onAnimationComplete": [Function],
                                                                            "onAnimationStart": [Function],
                                                                            "onBeforeLayoutMeasure": [Function],
                                                                            "onLayoutAnimationComplete": [Function],
                                                                            "onLayoutMeasure": [Function],
                                                                            "onLayoutUpdate": [Function],
                                                                            "onRender": [Function],
                                                                            "onSetAxisTarget": [Function],
                                                                            "onUpdate": [Function],
                                                                            "onViewportBoxUpdate": [Function],
                                                                            "path": Array [
                                                                              [Circular],
                                                                            ],
                                                                            "pointTo": [Function],
                                                                            "presence": 0,
                                                                            "presenceId": 0,
                                                                            "projection": Object {
                                                                              "isEnabled": false,
                                                                              "isTargetLocked": false,
                                                                              "target": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                              "targetFinal": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                            },
                                                                            "readValue": [Function],
                                                                            "rebaseProjectionTarget": [Function],
                                                                            "ref": [Function],
                                                                            "removeValue": [Function],
                                                                            "resetTransform": [Function],
                                                                            "scheduleRender": [Function],
                                                                            "scheduleUpdateLayoutProjection": [Function],
                                                                            "setBaseTarget": [Function],
                                                                            "setCrossfader": [Function],
                                                                            "setProjectionTargetAxis": [Function],
                                                                            "setProps": [Function],
                                                                            "setStaticValue": [Function],
                                                                            "setVisibility": [Function],
                                                                            "snapshotViewportBox": [Function],
                                                                            "sortNodePosition": [Function],
                                                                            "startLayoutAnimation": [Function],
                                                                            "stopLayoutAnimation": [Function],
                                                                            "suspendHoverEvents": [Function],
                                                                            "syncRender": [Function],
                                                                            "treeType": "dom",
                                                                            "unlockProjectionTarget": [Function],
                                                                            "updateLayoutMeasurement": [Function],
                                                                            "updateLayoutProjection": [Function],
                                                                            "updatePropListeners": [Function],
                                                                            "variantChildren": Set {},
                                                                            "withoutTransform": [Function],
                                                                          },
                                                                        },
                                                                        "withoutTransform": [Function],
                                                                      }
                                                                    }
                                                                  />
                                                                  <Component
                                                                    animate="checked"
                                                                    exit="unchecked"
                                                                    initial="unchecked"
                                                                    key="exit"
                                                                    style={
                                                                      Object {
                                                                        "alignItems": "center",
                                                                        "display": "flex",
                                                                        "height": "100%",
                                                                        "justifyContent": "center",
                                                                      }
                                                                    }
                                                                    variants={
                                                                      Object {
                                                                        "checked": Object {
                                                                          "scale": 1,
                                                                        },
                                                                        "unchecked": Object {
                                                                          "scale": 0.5,
                                                                        },
                                                                      }
                                                                    }
                                                                    visualElement={
                                                                      Object {
                                                                        "addChild": [Function],
                                                                        "addValue": [Function],
                                                                        "addVariantChild": [Function],
                                                                        "animationState": Object {
                                                                          "animateChanges": [Function],
                                                                          "getState": [Function],
                                                                          "isAnimated": [Function],
                                                                          "setActive": [Function],
                                                                          "setAnimateFunction": [Function],
                                                                        },
                                                                        "blockInitialAnimation": true,
                                                                        "build": [Function],
                                                                        "clearAllListeners": [Function],
                                                                        "clearState": [Function],
                                                                        "current": <div
                                                                          style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                                        >
                                                                          <svg
                                                                            class="css-da6t8b"
                                                                            style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                            variants="[object Object]"
                                                                            viewBox="0 0 12 10"
                                                                          >
                                                                            <polyline
                                                                              points="1.5 6 4.5 9 10.5 1"
                                                                            />
                                                                          </svg>
                                                                        </div>,
                                                                        "depth": 0,
                                                                        "enableLayoutProjection": [Function],
                                                                        "forEachValue": [Function],
                                                                        "getBaseTarget": [Function],
                                                                        "getClosestVariantNode": [Function],
                                                                        "getDefaultTransition": [Function],
                                                                        "getInstance": [Function],
                                                                        "getLatestValues": [Function],
                                                                        "getLayoutId": [Function],
                                                                        "getLayoutState": [Function],
                                                                        "getProjectionAnimationProgress": [Function],
                                                                        "getProps": [Function],
                                                                        "getStaticValue": [Function],
                                                                        "getValue": [Function],
                                                                        "getVariant": [Function],
                                                                        "getVariantContext": [Function],
                                                                        "hasValue": [Function],
                                                                        "isHoverEventsEnabled": true,
                                                                        "isMounted": [Function],
                                                                        "isPresenceRoot": true,
                                                                        "isPresent": true,
                                                                        "isStatic": false,
                                                                        "isVisible": undefined,
                                                                        "lockProjectionTarget": [Function],
                                                                        "makeTargetAnimatable": [Function],
                                                                        "manuallyAnimateOnMount": false,
                                                                        "measureViewportBox": [Function],
                                                                        "notifyAnimationComplete": [Function],
                                                                        "notifyAnimationStart": [Function],
                                                                        "notifyBeforeLayoutMeasure": [Function],
                                                                        "notifyLayoutAnimationComplete": [Function],
                                                                        "notifyLayoutMeasure": [Function],
                                                                        "notifyLayoutReady": [Function],
                                                                        "notifyLayoutUpdate": [Function],
                                                                        "notifyRender": [Function],
                                                                        "notifySetAxisTarget": [Function],
                                                                        "notifyUpdate": [Function],
                                                                        "notifyViewportBoxUpdate": [Function],
                                                                        "onAnimationComplete": [Function],
                                                                        "onAnimationStart": [Function],
                                                                        "onBeforeLayoutMeasure": [Function],
                                                                        "onLayoutAnimationComplete": [Function],
                                                                        "onLayoutMeasure": [Function],
                                                                        "onLayoutUpdate": [Function],
                                                                        "onRender": [Function],
                                                                        "onSetAxisTarget": [Function],
                                                                        "onUpdate": [Function],
                                                                        "onViewportBoxUpdate": [Function],
                                                                        "path": Array [],
                                                                        "pointTo": [Function],
                                                                        "presence": 0,
                                                                        "presenceId": 0,
                                                                        "projection": Object {
                                                                          "isEnabled": false,
                                                                          "isTargetLocked": false,
                                                                          "target": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                          "targetFinal": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                        },
                                                                        "readValue": [Function],
                                                                        "rebaseProjectionTarget": [Function],
                                                                        "ref": [Function],
                                                                        "removeValue": [Function],
                                                                        "resetTransform": [Function],
                                                                        "scheduleRender": [Function],
                                                                        "scheduleUpdateLayoutProjection": [Function],
                                                                        "setBaseTarget": [Function],
                                                                        "setCrossfader": [Function],
                                                                        "setProjectionTargetAxis": [Function],
                                                                        "setProps": [Function],
                                                                        "setStaticValue": [Function],
                                                                        "setVisibility": [Function],
                                                                        "snapshotViewportBox": [Function],
                                                                        "sortNodePosition": [Function],
                                                                        "startLayoutAnimation": [Function],
                                                                        "stopLayoutAnimation": [Function],
                                                                        "suspendHoverEvents": [Function],
                                                                        "syncRender": [Function],
                                                                        "treeType": "dom",
                                                                        "unlockProjectionTarget": [Function],
                                                                        "updateLayoutMeasurement": [Function],
                                                                        "updateLayoutProjection": [Function],
                                                                        "updatePropListeners": [Function],
                                                                        "variantChildren": Set {
                                                                          Object {
                                                                            "addChild": [Function],
                                                                            "addValue": [Function],
                                                                            "addVariantChild": [Function],
                                                                            "animationState": Object {
                                                                              "animateChanges": [Function],
                                                                              "getState": [Function],
                                                                              "isAnimated": [Function],
                                                                              "setActive": [Function],
                                                                              "setAnimateFunction": [Function],
                                                                            },
                                                                            "blockInitialAnimation": true,
                                                                            "build": [Function],
                                                                            "clearAllListeners": [Function],
                                                                            "clearState": [Function],
                                                                            "current": <svg
                                                                              class="css-da6t8b"
                                                                              style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                              variants="[object Object]"
                                                                              viewBox="0 0 12 10"
                                                                            >
                                                                              <polyline
                                                                                points="1.5 6 4.5 9 10.5 1"
                                                                              />
                                                                            </svg>,
                                                                            "depth": 1,
                                                                            "enableLayoutProjection": [Function],
                                                                            "forEachValue": [Function],
                                                                            "getBaseTarget": [Function],
                                                                            "getClosestVariantNode": [Function],
                                                                            "getDefaultTransition": [Function],
                                                                            "getInstance": [Function],
                                                                            "getLatestValues": [Function],
                                                                            "getLayoutId": [Function],
                                                                            "getLayoutState": [Function],
                                                                            "getProjectionAnimationProgress": [Function],
                                                                            "getProps": [Function],
                                                                            "getStaticValue": [Function],
                                                                            "getValue": [Function],
                                                                            "getVariant": [Function],
                                                                            "getVariantContext": [Function],
                                                                            "hasValue": [Function],
                                                                            "isHoverEventsEnabled": true,
                                                                            "isMounted": [Function],
                                                                            "isPresenceRoot": false,
                                                                            "isPresent": true,
                                                                            "isStatic": false,
                                                                            "isVisible": undefined,
                                                                            "lockProjectionTarget": [Function],
                                                                            "makeTargetAnimatable": [Function],
                                                                            "manuallyAnimateOnMount": false,
                                                                            "measureViewportBox": [Function],
                                                                            "notifyAnimationComplete": [Function],
                                                                            "notifyAnimationStart": [Function],
                                                                            "notifyBeforeLayoutMeasure": [Function],
                                                                            "notifyLayoutAnimationComplete": [Function],
                                                                            "notifyLayoutMeasure": [Function],
                                                                            "notifyLayoutReady": [Function],
                                                                            "notifyLayoutUpdate": [Function],
                                                                            "notifyRender": [Function],
                                                                            "notifySetAxisTarget": [Function],
                                                                            "notifyUpdate": [Function],
                                                                            "notifyViewportBoxUpdate": [Function],
                                                                            "onAnimationComplete": [Function],
                                                                            "onAnimationStart": [Function],
                                                                            "onBeforeLayoutMeasure": [Function],
                                                                            "onLayoutAnimationComplete": [Function],
                                                                            "onLayoutMeasure": [Function],
                                                                            "onLayoutUpdate": [Function],
                                                                            "onRender": [Function],
                                                                            "onSetAxisTarget": [Function],
                                                                            "onUpdate": [Function],
                                                                            "onViewportBoxUpdate": [Function],
                                                                            "path": Array [
                                                                              [Circular],
                                                                            ],
                                                                            "pointTo": [Function],
                                                                            "presence": 0,
                                                                            "presenceId": 0,
                                                                            "projection": Object {
                                                                              "isEnabled": false,
                                                                              "isTargetLocked": false,
                                                                              "target": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                              "targetFinal": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                            },
                                                                            "readValue": [Function],
                                                                            "rebaseProjectionTarget": [Function],
                                                                            "ref": [Function],
                                                                            "removeValue": [Function],
                                                                            "resetTransform": [Function],
                                                                            "scheduleRender": [Function],
                                                                            "scheduleUpdateLayoutProjection": [Function],
                                                                            "setBaseTarget": [Function],
                                                                            "setCrossfader": [Function],
                                                                            "setProjectionTargetAxis": [Function],
                                                                            "setProps": [Function],
                                                                            "setStaticValue": [Function],
                                                                            "setVisibility": [Function],
                                                                            "snapshotViewportBox": [Function],
                                                                            "sortNodePosition": [Function],
                                                                            "startLayoutAnimation": [Function],
                                                                            "stopLayoutAnimation": [Function],
                                                                            "suspendHoverEvents": [Function],
                                                                            "syncRender": [Function],
                                                                            "treeType": "dom",
                                                                            "unlockProjectionTarget": [Function],
                                                                            "updateLayoutMeasurement": [Function],
                                                                            "updateLayoutProjection": [Function],
                                                                            "updatePropListeners": [Function],
                                                                            "variantChildren": Set {},
                                                                            "withoutTransform": [Function],
                                                                          },
                                                                        },
                                                                        "withoutTransform": [Function],
                                                                      }
                                                                    }
                                                                  />
                                                                </ForwardRef(MotionComponent)>
                                                              </PresenceChild>
                                                            </AnimatePresence>
                                                          </CheckboxTransition>
                                                        </CheckboxIcon>
                                                      </span>
                                                    </Styled(span)>
                                                    <Styled(span)
                                                      __css={
                                                        Object {
                                                          "_disabled": Object {
                                                            "opacity": 0.4,
                                                          },
                                                          "fontSize": "md",
                                                          "marginStart": "0.5rem",
                                                          "userSelect": "none",
                                                        }
                                                      }
                                                      className="chakra-checkbox__label"
                                                      data-checked=""
                                                      onMouseDown={[Function]}
                                                      onTouchStart={[Function]}
                                                    >
                                                      <span
                                                        className="chakra-checkbox__label css-sklcna"
                                                        data-checked=""
                                                        onMouseDown={[Function]}
                                                        onTouchStart={[Function]}
                                                      >
                                                        Mon
                                                      </span>
                                                    </Styled(span)>
                                                  </label>
                                                </Styled(label)>
                                              </Checkbox>
                                            </Day>
                                            <Day
                                              day="Tuesday"
                                              isChecked={true}
                                              key="Tuesday"
                                              update={[MockFunction]}
                                            >
                                              <Checkbox
                                                fontWeight="normal"
                                                isChecked={true}
                                                onChange={[Function]}
                                              >
                                                <Styled(label)
                                                  __css={Object {}}
                                                  className="chakra-checkbox"
                                                  fontWeight="normal"
                                                >
                                                  <label
                                                    className="chakra-checkbox css-wun7cp"
                                                  >
                                                    <input
                                                      checked={true}
                                                      className="chakra-checkbox__input"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      style={
                                                        Object {
                                                          "border": "0px",
                                                          "clip": "rect(0px, 0px, 0px, 0px)",
                                                          "height": "1px",
                                                          "margin": "-1px",
                                                          "overflow": "hidden",
                                                          "padding": "0px",
                                                          "position": "absolute",
                                                          "whiteSpace": "nowrap",
                                                          "width": "1px",
                                                        }
                                                      }
                                                      type="checkbox"
                                                    />
                                                    <Styled(span)
                                                      __css={
                                                        Object {
                                                          "_checked": Object {
                                                            "_disabled": Object {
                                                              "bg": "gray.200",
                                                              "borderColor": "gray.200",
                                                              "color": "gray.500",
                                                            },
                                                            "_hover": Object {
                                                              "bg": "blue.600",
                                                              "borderColor": "blue.600",
                                                            },
                                                            "bg": "blue.500",
                                                            "borderColor": "blue.500",
                                                            "color": "white",
                                                          },
                                                          "_disabled": Object {
                                                            "bg": "gray.100",
                                                            "borderColor": "gray.100",
                                                          },
                                                          "_focus": Object {
                                                            "boxShadow": "outline",
                                                          },
                                                          "_indeterminate": Object {
                                                            "bg": "blue.500",
                                                            "borderColor": "blue.500",
                                                            "color": "white",
                                                          },
                                                          "_invalid": Object {
                                                            "borderColor": "red.500",
                                                          },
                                                          "border": "2px solid",
                                                          "borderColor": "inherit",
                                                          "borderRadius": "sm",
                                                          "color": "white",
                                                          "h": 4,
                                                          "transition": "box-shadow 250ms",
                                                          "w": 4,
                                                        }
                                                      }
                                                      aria-hidden={true}
                                                      className="chakra-checkbox__control"
                                                      data-checked=""
                                                      onMouseDown={[Function]}
                                                      onMouseEnter={[Function]}
                                                      onMouseLeave={[Function]}
                                                      onMouseUp={[Function]}
                                                    >
                                                      <span
                                                        aria-hidden={true}
                                                        className="chakra-checkbox__control css-co2d90"
                                                        data-checked=""
                                                        onMouseDown={[Function]}
                                                        onMouseEnter={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                      >
                                                        <CheckboxIcon
                                                          __css={
                                                            Object {
                                                              "color": undefined,
                                                              "fontSize": "0.625rem",
                                                              "opacity": 1,
                                                              "transform": "scale(1)",
                                                              "transition": "transform 200ms",
                                                            }
                                                          }
                                                          isChecked={true}
                                                        >
                                                          <CheckboxTransition
                                                            open={true}
                                                          >
                                                            <AnimatePresence
                                                              initial={false}
                                                            >
                                                              <PresenceChild
                                                                initial={false}
                                                                isPresent={true}
                                                                key=""
                                                                presenceAffectsLayout={true}
                                                              >
                                                                <ForwardRef(MotionComponent)
                                                                  animate="checked"
                                                                  exit="unchecked"
                                                                  initial="unchecked"
                                                                  style={
                                                                    Object {
                                                                      "alignItems": "center",
                                                                      "display": "flex",
                                                                      "height": "100%",
                                                                      "justifyContent": "center",
                                                                    }
                                                                  }
                                                                  variants={
                                                                    Object {
                                                                      "checked": Object {
                                                                        "scale": 1,
                                                                      },
                                                                      "unchecked": Object {
                                                                        "scale": 0.5,
                                                                      },
                                                                    }
                                                                  }
                                                                >
                                                                  <div
                                                                    style={
                                                                      Object {
                                                                        "alignItems": "center",
                                                                        "display": "flex",
                                                                        "height": "100%",
                                                                        "justifyContent": "center",
                                                                        "transform": "none",
                                                                      }
                                                                    }
                                                                  >
                                                                    <CheckIcon
                                                                      __css={
                                                                        Object {
                                                                          "color": undefined,
                                                                          "fontSize": "0.625rem",
                                                                          "opacity": 1,
                                                                          "transform": "scale(1)",
                                                                          "transition": "transform 200ms",
                                                                        }
                                                                      }
                                                                    >
                                                                      <ForwardRef(MotionComponent)
                                                                        __css={
                                                                          Object {
                                                                            "color": undefined,
                                                                            "fontSize": "0.625rem",
                                                                            "opacity": 1,
                                                                            "transform": "scale(1)",
                                                                            "transition": "transform 200ms",
                                                                          }
                                                                        }
                                                                        style={
                                                                          Object {
                                                                            "fill": "none",
                                                                            "stroke": "currentColor",
                                                                            "strokeDasharray": 16,
                                                                            "strokeWidth": 2,
                                                                          }
                                                                        }
                                                                        variants={
                                                                          Object {
                                                                            "checked": Object {
                                                                              "opacity": 1,
                                                                              "strokeDashoffset": 0,
                                                                              "transition": Object {
                                                                                "duration": 0.2,
                                                                              },
                                                                            },
                                                                            "unchecked": Object {
                                                                              "opacity": 0,
                                                                              "strokeDashoffset": 16,
                                                                            },
                                                                          }
                                                                        }
                                                                        viewBox="0 0 12 10"
                                                                        width="1.2em"
                                                                      >
                                                                        <Styled(svg)
                                                                          __css={
                                                                            Object {
                                                                              "color": undefined,
                                                                              "fontSize": "0.625rem",
                                                                              "opacity": 1,
                                                                              "transform": "scale(1)",
                                                                              "transition": "transform 200ms",
                                                                            }
                                                                          }
                                                                          style={
                                                                            Object {
                                                                              "fill": "none",
                                                                              "opacity": 1,
                                                                              "stroke": "currentColor",
                                                                              "strokeDasharray": 16,
                                                                              "strokeDashoffset": 0,
                                                                              "strokeWidth": 2,
                                                                            }
                                                                          }
                                                                          variants={
                                                                            Object {
                                                                              "checked": Object {
                                                                                "opacity": 1,
                                                                                "strokeDashoffset": 0,
                                                                                "transition": Object {
                                                                                  "duration": 0.2,
                                                                                },
                                                                              },
                                                                              "unchecked": Object {
                                                                                "opacity": 0,
                                                                                "strokeDashoffset": 16,
                                                                              },
                                                                            }
                                                                          }
                                                                          viewBox="0 0 12 10"
                                                                          width="1.2em"
                                                                        >
                                                                          <svg
                                                                            className="css-da6t8b"
                                                                            style={
                                                                              Object {
                                                                                "fill": "none",
                                                                                "opacity": 1,
                                                                                "stroke": "currentColor",
                                                                                "strokeDasharray": 16,
                                                                                "strokeDashoffset": 0,
                                                                                "strokeWidth": 2,
                                                                              }
                                                                            }
                                                                            variants={
                                                                              Object {
                                                                                "checked": Object {
                                                                                  "opacity": 1,
                                                                                  "strokeDashoffset": 0,
                                                                                  "transition": Object {
                                                                                    "duration": 0.2,
                                                                                  },
                                                                                },
                                                                                "unchecked": Object {
                                                                                  "opacity": 0,
                                                                                  "strokeDashoffset": 16,
                                                                                },
                                                                              }
                                                                            }
                                                                            viewBox="0 0 12 10"
                                                                          >
                                                                            <polyline
                                                                              points="1.5 6 4.5 9 10.5 1"
                                                                            />
                                                                          </svg>
                                                                        </Styled(svg)>
                                                                        <Component
                                                                          __css={
                                                                            Object {
                                                                              "color": undefined,
                                                                              "fontSize": "0.625rem",
                                                                              "opacity": 1,
                                                                              "transform": "scale(1)",
                                                                              "transition": "transform 200ms",
                                                                            }
                                                                          }
                                                                          key="animation"
                                                                          style={
                                                                            Object {
                                                                              "fill": "none",
                                                                              "stroke": "currentColor",
                                                                              "strokeDasharray": 16,
                                                                              "strokeWidth": 2,
                                                                            }
                                                                          }
                                                                          variants={
                                                                            Object {
                                                                              "checked": Object {
                                                                                "opacity": 1,
                                                                                "strokeDashoffset": 0,
                                                                                "transition": Object {
                                                                                  "duration": 0.2,
                                                                                },
                                                                              },
                                                                              "unchecked": Object {
                                                                                "opacity": 0,
                                                                                "strokeDashoffset": 16,
                                                                              },
                                                                            }
                                                                          }
                                                                          viewBox="0 0 12 10"
                                                                          visualElement={
                                                                            Object {
                                                                              "addChild": [Function],
                                                                              "addValue": [Function],
                                                                              "addVariantChild": [Function],
                                                                              "animationState": Object {
                                                                                "animateChanges": [Function],
                                                                                "getState": [Function],
                                                                                "isAnimated": [Function],
                                                                                "setActive": [Function],
                                                                                "setAnimateFunction": [Function],
                                                                              },
                                                                              "blockInitialAnimation": true,
                                                                              "build": [Function],
                                                                              "clearAllListeners": [Function],
                                                                              "clearState": [Function],
                                                                              "current": <svg
                                                                                class="css-da6t8b"
                                                                                style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                                variants="[object Object]"
                                                                                viewBox="0 0 12 10"
                                                                              >
                                                                                <polyline
                                                                                  points="1.5 6 4.5 9 10.5 1"
                                                                                />
                                                                              </svg>,
                                                                              "depth": 1,
                                                                              "enableLayoutProjection": [Function],
                                                                              "forEachValue": [Function],
                                                                              "getBaseTarget": [Function],
                                                                              "getClosestVariantNode": [Function],
                                                                              "getDefaultTransition": [Function],
                                                                              "getInstance": [Function],
                                                                              "getLatestValues": [Function],
                                                                              "getLayoutId": [Function],
                                                                              "getLayoutState": [Function],
                                                                              "getProjectionAnimationProgress": [Function],
                                                                              "getProps": [Function],
                                                                              "getStaticValue": [Function],
                                                                              "getValue": [Function],
                                                                              "getVariant": [Function],
                                                                              "getVariantContext": [Function],
                                                                              "hasValue": [Function],
                                                                              "isHoverEventsEnabled": true,
                                                                              "isMounted": [Function],
                                                                              "isPresenceRoot": false,
                                                                              "isPresent": true,
                                                                              "isStatic": false,
                                                                              "isVisible": undefined,
                                                                              "lockProjectionTarget": [Function],
                                                                              "makeTargetAnimatable": [Function],
                                                                              "manuallyAnimateOnMount": false,
                                                                              "measureViewportBox": [Function],
                                                                              "notifyAnimationComplete": [Function],
                                                                              "notifyAnimationStart": [Function],
                                                                              "notifyBeforeLayoutMeasure": [Function],
                                                                              "notifyLayoutAnimationComplete": [Function],
                                                                              "notifyLayoutMeasure": [Function],
                                                                              "notifyLayoutReady": [Function],
                                                                              "notifyLayoutUpdate": [Function],
                                                                              "notifyRender": [Function],
                                                                              "notifySetAxisTarget": [Function],
                                                                              "notifyUpdate": [Function],
                                                                              "notifyViewportBoxUpdate": [Function],
                                                                              "onAnimationComplete": [Function],
                                                                              "onAnimationStart": [Function],
                                                                              "onBeforeLayoutMeasure": [Function],
                                                                              "onLayoutAnimationComplete": [Function],
                                                                              "onLayoutMeasure": [Function],
                                                                              "onLayoutUpdate": [Function],
                                                                              "onRender": [Function],
                                                                              "onSetAxisTarget": [Function],
                                                                              "onUpdate": [Function],
                                                                              "onViewportBoxUpdate": [Function],
                                                                              "path": Array [
                                                                                Object {
                                                                                  "addChild": [Function],
                                                                                  "addValue": [Function],
                                                                                  "addVariantChild": [Function],
                                                                                  "animationState": Object {
                                                                                    "animateChanges": [Function],
                                                                                    "getState": [Function],
                                                                                    "isAnimated": [Function],
                                                                                    "setActive": [Function],
                                                                                    "setAnimateFunction": [Function],
                                                                                  },
                                                                                  "blockInitialAnimation": true,
                                                                                  "build": [Function],
                                                                                  "clearAllListeners": [Function],
                                                                                  "clearState": [Function],
                                                                                  "current": <div
                                                                                    style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                                                  >
                                                                                    <svg
                                                                                      class="css-da6t8b"
                                                                                      style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                                      variants="[object Object]"
                                                                                      viewBox="0 0 12 10"
                                                                                    >
                                                                                      <polyline
                                                                                        points="1.5 6 4.5 9 10.5 1"
                                                                                      />
                                                                                    </svg>
                                                                                  </div>,
                                                                                  "depth": 0,
                                                                                  "enableLayoutProjection": [Function],
                                                                                  "forEachValue": [Function],
                                                                                  "getBaseTarget": [Function],
                                                                                  "getClosestVariantNode": [Function],
                                                                                  "getDefaultTransition": [Function],
                                                                                  "getInstance": [Function],
                                                                                  "getLatestValues": [Function],
                                                                                  "getLayoutId": [Function],
                                                                                  "getLayoutState": [Function],
                                                                                  "getProjectionAnimationProgress": [Function],
                                                                                  "getProps": [Function],
                                                                                  "getStaticValue": [Function],
                                                                                  "getValue": [Function],
                                                                                  "getVariant": [Function],
                                                                                  "getVariantContext": [Function],
                                                                                  "hasValue": [Function],
                                                                                  "isHoverEventsEnabled": true,
                                                                                  "isMounted": [Function],
                                                                                  "isPresenceRoot": true,
                                                                                  "isPresent": true,
                                                                                  "isStatic": false,
                                                                                  "isVisible": undefined,
                                                                                  "lockProjectionTarget": [Function],
                                                                                  "makeTargetAnimatable": [Function],
                                                                                  "manuallyAnimateOnMount": false,
                                                                                  "measureViewportBox": [Function],
                                                                                  "notifyAnimationComplete": [Function],
                                                                                  "notifyAnimationStart": [Function],
                                                                                  "notifyBeforeLayoutMeasure": [Function],
                                                                                  "notifyLayoutAnimationComplete": [Function],
                                                                                  "notifyLayoutMeasure": [Function],
                                                                                  "notifyLayoutReady": [Function],
                                                                                  "notifyLayoutUpdate": [Function],
                                                                                  "notifyRender": [Function],
                                                                                  "notifySetAxisTarget": [Function],
                                                                                  "notifyUpdate": [Function],
                                                                                  "notifyViewportBoxUpdate": [Function],
                                                                                  "onAnimationComplete": [Function],
                                                                                  "onAnimationStart": [Function],
                                                                                  "onBeforeLayoutMeasure": [Function],
                                                                                  "onLayoutAnimationComplete": [Function],
                                                                                  "onLayoutMeasure": [Function],
                                                                                  "onLayoutUpdate": [Function],
                                                                                  "onRender": [Function],
                                                                                  "onSetAxisTarget": [Function],
                                                                                  "onUpdate": [Function],
                                                                                  "onViewportBoxUpdate": [Function],
                                                                                  "path": Array [],
                                                                                  "pointTo": [Function],
                                                                                  "presence": 0,
                                                                                  "presenceId": 1,
                                                                                  "projection": Object {
                                                                                    "isEnabled": false,
                                                                                    "isTargetLocked": false,
                                                                                    "target": Object {
                                                                                      "x": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                      "y": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                    },
                                                                                    "targetFinal": Object {
                                                                                      "x": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                      "y": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                    },
                                                                                  },
                                                                                  "readValue": [Function],
                                                                                  "rebaseProjectionTarget": [Function],
                                                                                  "ref": [Function],
                                                                                  "removeValue": [Function],
                                                                                  "resetTransform": [Function],
                                                                                  "scheduleRender": [Function],
                                                                                  "scheduleUpdateLayoutProjection": [Function],
                                                                                  "setBaseTarget": [Function],
                                                                                  "setCrossfader": [Function],
                                                                                  "setProjectionTargetAxis": [Function],
                                                                                  "setProps": [Function],
                                                                                  "setStaticValue": [Function],
                                                                                  "setVisibility": [Function],
                                                                                  "snapshotViewportBox": [Function],
                                                                                  "sortNodePosition": [Function],
                                                                                  "startLayoutAnimation": [Function],
                                                                                  "stopLayoutAnimation": [Function],
                                                                                  "suspendHoverEvents": [Function],
                                                                                  "syncRender": [Function],
                                                                                  "treeType": "dom",
                                                                                  "unlockProjectionTarget": [Function],
                                                                                  "updateLayoutMeasurement": [Function],
                                                                                  "updateLayoutProjection": [Function],
                                                                                  "updatePropListeners": [Function],
                                                                                  "variantChildren": Set {
                                                                                    [Circular],
                                                                                  },
                                                                                  "withoutTransform": [Function],
                                                                                },
                                                                              ],
                                                                              "pointTo": [Function],
                                                                              "presence": 0,
                                                                              "presenceId": 1,
                                                                              "projection": Object {
                                                                                "isEnabled": false,
                                                                                "isTargetLocked": false,
                                                                                "target": Object {
                                                                                  "x": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                  "y": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                },
                                                                                "targetFinal": Object {
                                                                                  "x": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                  "y": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                },
                                                                              },
                                                                              "readValue": [Function],
                                                                              "rebaseProjectionTarget": [Function],
                                                                              "ref": [Function],
                                                                              "removeValue": [Function],
                                                                              "resetTransform": [Function],
                                                                              "scheduleRender": [Function],
                                                                              "scheduleUpdateLayoutProjection": [Function],
                                                                              "setBaseTarget": [Function],
                                                                              "setCrossfader": [Function],
                                                                              "setProjectionTargetAxis": [Function],
                                                                              "setProps": [Function],
                                                                              "setStaticValue": [Function],
                                                                              "setVisibility": [Function],
                                                                              "snapshotViewportBox": [Function],
                                                                              "sortNodePosition": [Function],
                                                                              "startLayoutAnimation": [Function],
                                                                              "stopLayoutAnimation": [Function],
                                                                              "suspendHoverEvents": [Function],
                                                                              "syncRender": [Function],
                                                                              "treeType": "dom",
                                                                              "unlockProjectionTarget": [Function],
                                                                              "updateLayoutMeasurement": [Function],
                                                                              "updateLayoutProjection": [Function],
                                                                              "updatePropListeners": [Function],
                                                                              "variantChildren": Set {},
                                                                              "withoutTransform": [Function],
                                                                            }
                                                                          }
                                                                          width="1.2em"
                                                                        />
                                                                      </ForwardRef(MotionComponent)>
                                                                    </CheckIcon>
                                                                  </div>
                                                                  <Component
                                                                    animate="checked"
                                                                    exit="unchecked"
                                                                    initial="unchecked"
                                                                    key="animation"
                                                                    style={
                                                                      Object {
                                                                        "alignItems": "center",
                                                                        "display": "flex",
                                                                        "height": "100%",
                                                                        "justifyContent": "center",
                                                                      }
                                                                    }
                                                                    variants={
                                                                      Object {
                                                                        "checked": Object {
                                                                          "scale": 1,
                                                                        },
                                                                        "unchecked": Object {
                                                                          "scale": 0.5,
                                                                        },
                                                                      }
                                                                    }
                                                                    visualElement={
                                                                      Object {
                                                                        "addChild": [Function],
                                                                        "addValue": [Function],
                                                                        "addVariantChild": [Function],
                                                                        "animationState": Object {
                                                                          "animateChanges": [Function],
                                                                          "getState": [Function],
                                                                          "isAnimated": [Function],
                                                                          "setActive": [Function],
                                                                          "setAnimateFunction": [Function],
                                                                        },
                                                                        "blockInitialAnimation": true,
                                                                        "build": [Function],
                                                                        "clearAllListeners": [Function],
                                                                        "clearState": [Function],
                                                                        "current": <div
                                                                          style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                                        >
                                                                          <svg
                                                                            class="css-da6t8b"
                                                                            style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                            variants="[object Object]"
                                                                            viewBox="0 0 12 10"
                                                                          >
                                                                            <polyline
                                                                              points="1.5 6 4.5 9 10.5 1"
                                                                            />
                                                                          </svg>
                                                                        </div>,
                                                                        "depth": 0,
                                                                        "enableLayoutProjection": [Function],
                                                                        "forEachValue": [Function],
                                                                        "getBaseTarget": [Function],
                                                                        "getClosestVariantNode": [Function],
                                                                        "getDefaultTransition": [Function],
                                                                        "getInstance": [Function],
                                                                        "getLatestValues": [Function],
                                                                        "getLayoutId": [Function],
                                                                        "getLayoutState": [Function],
                                                                        "getProjectionAnimationProgress": [Function],
                                                                        "getProps": [Function],
                                                                        "getStaticValue": [Function],
                                                                        "getValue": [Function],
                                                                        "getVariant": [Function],
                                                                        "getVariantContext": [Function],
                                                                        "hasValue": [Function],
                                                                        "isHoverEventsEnabled": true,
                                                                        "isMounted": [Function],
                                                                        "isPresenceRoot": true,
                                                                        "isPresent": true,
                                                                        "isStatic": false,
                                                                        "isVisible": undefined,
                                                                        "lockProjectionTarget": [Function],
                                                                        "makeTargetAnimatable": [Function],
                                                                        "manuallyAnimateOnMount": false,
                                                                        "measureViewportBox": [Function],
                                                                        "notifyAnimationComplete": [Function],
                                                                        "notifyAnimationStart": [Function],
                                                                        "notifyBeforeLayoutMeasure": [Function],
                                                                        "notifyLayoutAnimationComplete": [Function],
                                                                        "notifyLayoutMeasure": [Function],
                                                                        "notifyLayoutReady": [Function],
                                                                        "notifyLayoutUpdate": [Function],
                                                                        "notifyRender": [Function],
                                                                        "notifySetAxisTarget": [Function],
                                                                        "notifyUpdate": [Function],
                                                                        "notifyViewportBoxUpdate": [Function],
                                                                        "onAnimationComplete": [Function],
                                                                        "onAnimationStart": [Function],
                                                                        "onBeforeLayoutMeasure": [Function],
                                                                        "onLayoutAnimationComplete": [Function],
                                                                        "onLayoutMeasure": [Function],
                                                                        "onLayoutUpdate": [Function],
                                                                        "onRender": [Function],
                                                                        "onSetAxisTarget": [Function],
                                                                        "onUpdate": [Function],
                                                                        "onViewportBoxUpdate": [Function],
                                                                        "path": Array [],
                                                                        "pointTo": [Function],
                                                                        "presence": 0,
                                                                        "presenceId": 1,
                                                                        "projection": Object {
                                                                          "isEnabled": false,
                                                                          "isTargetLocked": false,
                                                                          "target": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                          "targetFinal": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                        },
                                                                        "readValue": [Function],
                                                                        "rebaseProjectionTarget": [Function],
                                                                        "ref": [Function],
                                                                        "removeValue": [Function],
                                                                        "resetTransform": [Function],
                                                                        "scheduleRender": [Function],
                                                                        "scheduleUpdateLayoutProjection": [Function],
                                                                        "setBaseTarget": [Function],
                                                                        "setCrossfader": [Function],
                                                                        "setProjectionTargetAxis": [Function],
                                                                        "setProps": [Function],
                                                                        "setStaticValue": [Function],
                                                                        "setVisibility": [Function],
                                                                        "snapshotViewportBox": [Function],
                                                                        "sortNodePosition": [Function],
                                                                        "startLayoutAnimation": [Function],
                                                                        "stopLayoutAnimation": [Function],
                                                                        "suspendHoverEvents": [Function],
                                                                        "syncRender": [Function],
                                                                        "treeType": "dom",
                                                                        "unlockProjectionTarget": [Function],
                                                                        "updateLayoutMeasurement": [Function],
                                                                        "updateLayoutProjection": [Function],
                                                                        "updatePropListeners": [Function],
                                                                        "variantChildren": Set {
                                                                          Object {
                                                                            "addChild": [Function],
                                                                            "addValue": [Function],
                                                                            "addVariantChild": [Function],
                                                                            "animationState": Object {
                                                                              "animateChanges": [Function],
                                                                              "getState": [Function],
                                                                              "isAnimated": [Function],
                                                                              "setActive": [Function],
                                                                              "setAnimateFunction": [Function],
                                                                            },
                                                                            "blockInitialAnimation": true,
                                                                            "build": [Function],
                                                                            "clearAllListeners": [Function],
                                                                            "clearState": [Function],
                                                                            "current": <svg
                                                                              class="css-da6t8b"
                                                                              style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                              variants="[object Object]"
                                                                              viewBox="0 0 12 10"
                                                                            >
                                                                              <polyline
                                                                                points="1.5 6 4.5 9 10.5 1"
                                                                              />
                                                                            </svg>,
                                                                            "depth": 1,
                                                                            "enableLayoutProjection": [Function],
                                                                            "forEachValue": [Function],
                                                                            "getBaseTarget": [Function],
                                                                            "getClosestVariantNode": [Function],
                                                                            "getDefaultTransition": [Function],
                                                                            "getInstance": [Function],
                                                                            "getLatestValues": [Function],
                                                                            "getLayoutId": [Function],
                                                                            "getLayoutState": [Function],
                                                                            "getProjectionAnimationProgress": [Function],
                                                                            "getProps": [Function],
                                                                            "getStaticValue": [Function],
                                                                            "getValue": [Function],
                                                                            "getVariant": [Function],
                                                                            "getVariantContext": [Function],
                                                                            "hasValue": [Function],
                                                                            "isHoverEventsEnabled": true,
                                                                            "isMounted": [Function],
                                                                            "isPresenceRoot": false,
                                                                            "isPresent": true,
                                                                            "isStatic": false,
                                                                            "isVisible": undefined,
                                                                            "lockProjectionTarget": [Function],
                                                                            "makeTargetAnimatable": [Function],
                                                                            "manuallyAnimateOnMount": false,
                                                                            "measureViewportBox": [Function],
                                                                            "notifyAnimationComplete": [Function],
                                                                            "notifyAnimationStart": [Function],
                                                                            "notifyBeforeLayoutMeasure": [Function],
                                                                            "notifyLayoutAnimationComplete": [Function],
                                                                            "notifyLayoutMeasure": [Function],
                                                                            "notifyLayoutReady": [Function],
                                                                            "notifyLayoutUpdate": [Function],
                                                                            "notifyRender": [Function],
                                                                            "notifySetAxisTarget": [Function],
                                                                            "notifyUpdate": [Function],
                                                                            "notifyViewportBoxUpdate": [Function],
                                                                            "onAnimationComplete": [Function],
                                                                            "onAnimationStart": [Function],
                                                                            "onBeforeLayoutMeasure": [Function],
                                                                            "onLayoutAnimationComplete": [Function],
                                                                            "onLayoutMeasure": [Function],
                                                                            "onLayoutUpdate": [Function],
                                                                            "onRender": [Function],
                                                                            "onSetAxisTarget": [Function],
                                                                            "onUpdate": [Function],
                                                                            "onViewportBoxUpdate": [Function],
                                                                            "path": Array [
                                                                              [Circular],
                                                                            ],
                                                                            "pointTo": [Function],
                                                                            "presence": 0,
                                                                            "presenceId": 1,
                                                                            "projection": Object {
                                                                              "isEnabled": false,
                                                                              "isTargetLocked": false,
                                                                              "target": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                              "targetFinal": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                            },
                                                                            "readValue": [Function],
                                                                            "rebaseProjectionTarget": [Function],
                                                                            "ref": [Function],
                                                                            "removeValue": [Function],
                                                                            "resetTransform": [Function],
                                                                            "scheduleRender": [Function],
                                                                            "scheduleUpdateLayoutProjection": [Function],
                                                                            "setBaseTarget": [Function],
                                                                            "setCrossfader": [Function],
                                                                            "setProjectionTargetAxis": [Function],
                                                                            "setProps": [Function],
                                                                            "setStaticValue": [Function],
                                                                            "setVisibility": [Function],
                                                                            "snapshotViewportBox": [Function],
                                                                            "sortNodePosition": [Function],
                                                                            "startLayoutAnimation": [Function],
                                                                            "stopLayoutAnimation": [Function],
                                                                            "suspendHoverEvents": [Function],
                                                                            "syncRender": [Function],
                                                                            "treeType": "dom",
                                                                            "unlockProjectionTarget": [Function],
                                                                            "updateLayoutMeasurement": [Function],
                                                                            "updateLayoutProjection": [Function],
                                                                            "updatePropListeners": [Function],
                                                                            "variantChildren": Set {},
                                                                            "withoutTransform": [Function],
                                                                          },
                                                                        },
                                                                        "withoutTransform": [Function],
                                                                      }
                                                                    }
                                                                  />
                                                                  <Component
                                                                    animate="checked"
                                                                    exit="unchecked"
                                                                    initial="unchecked"
                                                                    key="exit"
                                                                    style={
                                                                      Object {
                                                                        "alignItems": "center",
                                                                        "display": "flex",
                                                                        "height": "100%",
                                                                        "justifyContent": "center",
                                                                      }
                                                                    }
                                                                    variants={
                                                                      Object {
                                                                        "checked": Object {
                                                                          "scale": 1,
                                                                        },
                                                                        "unchecked": Object {
                                                                          "scale": 0.5,
                                                                        },
                                                                      }
                                                                    }
                                                                    visualElement={
                                                                      Object {
                                                                        "addChild": [Function],
                                                                        "addValue": [Function],
                                                                        "addVariantChild": [Function],
                                                                        "animationState": Object {
                                                                          "animateChanges": [Function],
                                                                          "getState": [Function],
                                                                          "isAnimated": [Function],
                                                                          "setActive": [Function],
                                                                          "setAnimateFunction": [Function],
                                                                        },
                                                                        "blockInitialAnimation": true,
                                                                        "build": [Function],
                                                                        "clearAllListeners": [Function],
                                                                        "clearState": [Function],
                                                                        "current": <div
                                                                          style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                                        >
                                                                          <svg
                                                                            class="css-da6t8b"
                                                                            style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                            variants="[object Object]"
                                                                            viewBox="0 0 12 10"
                                                                          >
                                                                            <polyline
                                                                              points="1.5 6 4.5 9 10.5 1"
                                                                            />
                                                                          </svg>
                                                                        </div>,
                                                                        "depth": 0,
                                                                        "enableLayoutProjection": [Function],
                                                                        "forEachValue": [Function],
                                                                        "getBaseTarget": [Function],
                                                                        "getClosestVariantNode": [Function],
                                                                        "getDefaultTransition": [Function],
                                                                        "getInstance": [Function],
                                                                        "getLatestValues": [Function],
                                                                        "getLayoutId": [Function],
                                                                        "getLayoutState": [Function],
                                                                        "getProjectionAnimationProgress": [Function],
                                                                        "getProps": [Function],
                                                                        "getStaticValue": [Function],
                                                                        "getValue": [Function],
                                                                        "getVariant": [Function],
                                                                        "getVariantContext": [Function],
                                                                        "hasValue": [Function],
                                                                        "isHoverEventsEnabled": true,
                                                                        "isMounted": [Function],
                                                                        "isPresenceRoot": true,
                                                                        "isPresent": true,
                                                                        "isStatic": false,
                                                                        "isVisible": undefined,
                                                                        "lockProjectionTarget": [Function],
                                                                        "makeTargetAnimatable": [Function],
                                                                        "manuallyAnimateOnMount": false,
                                                                        "measureViewportBox": [Function],
                                                                        "notifyAnimationComplete": [Function],
                                                                        "notifyAnimationStart": [Function],
                                                                        "notifyBeforeLayoutMeasure": [Function],
                                                                        "notifyLayoutAnimationComplete": [Function],
                                                                        "notifyLayoutMeasure": [Function],
                                                                        "notifyLayoutReady": [Function],
                                                                        "notifyLayoutUpdate": [Function],
                                                                        "notifyRender": [Function],
                                                                        "notifySetAxisTarget": [Function],
                                                                        "notifyUpdate": [Function],
                                                                        "notifyViewportBoxUpdate": [Function],
                                                                        "onAnimationComplete": [Function],
                                                                        "onAnimationStart": [Function],
                                                                        "onBeforeLayoutMeasure": [Function],
                                                                        "onLayoutAnimationComplete": [Function],
                                                                        "onLayoutMeasure": [Function],
                                                                        "onLayoutUpdate": [Function],
                                                                        "onRender": [Function],
                                                                        "onSetAxisTarget": [Function],
                                                                        "onUpdate": [Function],
                                                                        "onViewportBoxUpdate": [Function],
                                                                        "path": Array [],
                                                                        "pointTo": [Function],
                                                                        "presence": 0,
                                                                        "presenceId": 1,
                                                                        "projection": Object {
                                                                          "isEnabled": false,
                                                                          "isTargetLocked": false,
                                                                          "target": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                          "targetFinal": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                        },
                                                                        "readValue": [Function],
                                                                        "rebaseProjectionTarget": [Function],
                                                                        "ref": [Function],
                                                                        "removeValue": [Function],
                                                                        "resetTransform": [Function],
                                                                        "scheduleRender": [Function],
                                                                        "scheduleUpdateLayoutProjection": [Function],
                                                                        "setBaseTarget": [Function],
                                                                        "setCrossfader": [Function],
                                                                        "setProjectionTargetAxis": [Function],
                                                                        "setProps": [Function],
                                                                        "setStaticValue": [Function],
                                                                        "setVisibility": [Function],
                                                                        "snapshotViewportBox": [Function],
                                                                        "sortNodePosition": [Function],
                                                                        "startLayoutAnimation": [Function],
                                                                        "stopLayoutAnimation": [Function],
                                                                        "suspendHoverEvents": [Function],
                                                                        "syncRender": [Function],
                                                                        "treeType": "dom",
                                                                        "unlockProjectionTarget": [Function],
                                                                        "updateLayoutMeasurement": [Function],
                                                                        "updateLayoutProjection": [Function],
                                                                        "updatePropListeners": [Function],
                                                                        "variantChildren": Set {
                                                                          Object {
                                                                            "addChild": [Function],
                                                                            "addValue": [Function],
                                                                            "addVariantChild": [Function],
                                                                            "animationState": Object {
                                                                              "animateChanges": [Function],
                                                                              "getState": [Function],
                                                                              "isAnimated": [Function],
                                                                              "setActive": [Function],
                                                                              "setAnimateFunction": [Function],
                                                                            },
                                                                            "blockInitialAnimation": true,
                                                                            "build": [Function],
                                                                            "clearAllListeners": [Function],
                                                                            "clearState": [Function],
                                                                            "current": <svg
                                                                              class="css-da6t8b"
                                                                              style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                              variants="[object Object]"
                                                                              viewBox="0 0 12 10"
                                                                            >
                                                                              <polyline
                                                                                points="1.5 6 4.5 9 10.5 1"
                                                                              />
                                                                            </svg>,
                                                                            "depth": 1,
                                                                            "enableLayoutProjection": [Function],
                                                                            "forEachValue": [Function],
                                                                            "getBaseTarget": [Function],
                                                                            "getClosestVariantNode": [Function],
                                                                            "getDefaultTransition": [Function],
                                                                            "getInstance": [Function],
                                                                            "getLatestValues": [Function],
                                                                            "getLayoutId": [Function],
                                                                            "getLayoutState": [Function],
                                                                            "getProjectionAnimationProgress": [Function],
                                                                            "getProps": [Function],
                                                                            "getStaticValue": [Function],
                                                                            "getValue": [Function],
                                                                            "getVariant": [Function],
                                                                            "getVariantContext": [Function],
                                                                            "hasValue": [Function],
                                                                            "isHoverEventsEnabled": true,
                                                                            "isMounted": [Function],
                                                                            "isPresenceRoot": false,
                                                                            "isPresent": true,
                                                                            "isStatic": false,
                                                                            "isVisible": undefined,
                                                                            "lockProjectionTarget": [Function],
                                                                            "makeTargetAnimatable": [Function],
                                                                            "manuallyAnimateOnMount": false,
                                                                            "measureViewportBox": [Function],
                                                                            "notifyAnimationComplete": [Function],
                                                                            "notifyAnimationStart": [Function],
                                                                            "notifyBeforeLayoutMeasure": [Function],
                                                                            "notifyLayoutAnimationComplete": [Function],
                                                                            "notifyLayoutMeasure": [Function],
                                                                            "notifyLayoutReady": [Function],
                                                                            "notifyLayoutUpdate": [Function],
                                                                            "notifyRender": [Function],
                                                                            "notifySetAxisTarget": [Function],
                                                                            "notifyUpdate": [Function],
                                                                            "notifyViewportBoxUpdate": [Function],
                                                                            "onAnimationComplete": [Function],
                                                                            "onAnimationStart": [Function],
                                                                            "onBeforeLayoutMeasure": [Function],
                                                                            "onLayoutAnimationComplete": [Function],
                                                                            "onLayoutMeasure": [Function],
                                                                            "onLayoutUpdate": [Function],
                                                                            "onRender": [Function],
                                                                            "onSetAxisTarget": [Function],
                                                                            "onUpdate": [Function],
                                                                            "onViewportBoxUpdate": [Function],
                                                                            "path": Array [
                                                                              [Circular],
                                                                            ],
                                                                            "pointTo": [Function],
                                                                            "presence": 0,
                                                                            "presenceId": 1,
                                                                            "projection": Object {
                                                                              "isEnabled": false,
                                                                              "isTargetLocked": false,
                                                                              "target": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                              "targetFinal": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                            },
                                                                            "readValue": [Function],
                                                                            "rebaseProjectionTarget": [Function],
                                                                            "ref": [Function],
                                                                            "removeValue": [Function],
                                                                            "resetTransform": [Function],
                                                                            "scheduleRender": [Function],
                                                                            "scheduleUpdateLayoutProjection": [Function],
                                                                            "setBaseTarget": [Function],
                                                                            "setCrossfader": [Function],
                                                                            "setProjectionTargetAxis": [Function],
                                                                            "setProps": [Function],
                                                                            "setStaticValue": [Function],
                                                                            "setVisibility": [Function],
                                                                            "snapshotViewportBox": [Function],
                                                                            "sortNodePosition": [Function],
                                                                            "startLayoutAnimation": [Function],
                                                                            "stopLayoutAnimation": [Function],
                                                                            "suspendHoverEvents": [Function],
                                                                            "syncRender": [Function],
                                                                            "treeType": "dom",
                                                                            "unlockProjectionTarget": [Function],
                                                                            "updateLayoutMeasurement": [Function],
                                                                            "updateLayoutProjection": [Function],
                                                                            "updatePropListeners": [Function],
                                                                            "variantChildren": Set {},
                                                                            "withoutTransform": [Function],
                                                                          },
                                                                        },
                                                                        "withoutTransform": [Function],
                                                                      }
                                                                    }
                                                                  />
                                                                </ForwardRef(MotionComponent)>
                                                              </PresenceChild>
                                                            </AnimatePresence>
                                                          </CheckboxTransition>
                                                        </CheckboxIcon>
                                                      </span>
                                                    </Styled(span)>
                                                    <Styled(span)
                                                      __css={
                                                        Object {
                                                          "_disabled": Object {
                                                            "opacity": 0.4,
                                                          },
                                                          "fontSize": "md",
                                                          "marginStart": "0.5rem",
                                                          "userSelect": "none",
                                                        }
                                                      }
                                                      className="chakra-checkbox__label"
                                                      data-checked=""
                                                      onMouseDown={[Function]}
                                                      onTouchStart={[Function]}
                                                    >
                                                      <span
                                                        className="chakra-checkbox__label css-sklcna"
                                                        data-checked=""
                                                        onMouseDown={[Function]}
                                                        onTouchStart={[Function]}
                                                      >
                                                        Tue
                                                      </span>
                                                    </Styled(span)>
                                                  </label>
                                                </Styled(label)>
                                              </Checkbox>
                                            </Day>
                                            <Day
                                              day="Wednesday"
                                              isChecked={true}
                                              key="Wednesday"
                                              update={[MockFunction]}
                                            >
                                              <Checkbox
                                                fontWeight="normal"
                                                isChecked={true}
                                                onChange={[Function]}
                                              >
                                                <Styled(label)
                                                  __css={Object {}}
                                                  className="chakra-checkbox"
                                                  fontWeight="normal"
                                                >
                                                  <label
                                                    className="chakra-checkbox css-wun7cp"
                                                  >
                                                    <input
                                                      checked={true}
                                                      className="chakra-checkbox__input"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      style={
                                                        Object {
                                                          "border": "0px",
                                                          "clip": "rect(0px, 0px, 0px, 0px)",
                                                          "height": "1px",
                                                          "margin": "-1px",
                                                          "overflow": "hidden",
                                                          "padding": "0px",
                                                          "position": "absolute",
                                                          "whiteSpace": "nowrap",
                                                          "width": "1px",
                                                        }
                                                      }
                                                      type="checkbox"
                                                    />
                                                    <Styled(span)
                                                      __css={
                                                        Object {
                                                          "_checked": Object {
                                                            "_disabled": Object {
                                                              "bg": "gray.200",
                                                              "borderColor": "gray.200",
                                                              "color": "gray.500",
                                                            },
                                                            "_hover": Object {
                                                              "bg": "blue.600",
                                                              "borderColor": "blue.600",
                                                            },
                                                            "bg": "blue.500",
                                                            "borderColor": "blue.500",
                                                            "color": "white",
                                                          },
                                                          "_disabled": Object {
                                                            "bg": "gray.100",
                                                            "borderColor": "gray.100",
                                                          },
                                                          "_focus": Object {
                                                            "boxShadow": "outline",
                                                          },
                                                          "_indeterminate": Object {
                                                            "bg": "blue.500",
                                                            "borderColor": "blue.500",
                                                            "color": "white",
                                                          },
                                                          "_invalid": Object {
                                                            "borderColor": "red.500",
                                                          },
                                                          "border": "2px solid",
                                                          "borderColor": "inherit",
                                                          "borderRadius": "sm",
                                                          "color": "white",
                                                          "h": 4,
                                                          "transition": "box-shadow 250ms",
                                                          "w": 4,
                                                        }
                                                      }
                                                      aria-hidden={true}
                                                      className="chakra-checkbox__control"
                                                      data-checked=""
                                                      onMouseDown={[Function]}
                                                      onMouseEnter={[Function]}
                                                      onMouseLeave={[Function]}
                                                      onMouseUp={[Function]}
                                                    >
                                                      <span
                                                        aria-hidden={true}
                                                        className="chakra-checkbox__control css-co2d90"
                                                        data-checked=""
                                                        onMouseDown={[Function]}
                                                        onMouseEnter={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                      >
                                                        <CheckboxIcon
                                                          __css={
                                                            Object {
                                                              "color": undefined,
                                                              "fontSize": "0.625rem",
                                                              "opacity": 1,
                                                              "transform": "scale(1)",
                                                              "transition": "transform 200ms",
                                                            }
                                                          }
                                                          isChecked={true}
                                                        >
                                                          <CheckboxTransition
                                                            open={true}
                                                          >
                                                            <AnimatePresence
                                                              initial={false}
                                                            >
                                                              <PresenceChild
                                                                initial={false}
                                                                isPresent={true}
                                                                key=""
                                                                presenceAffectsLayout={true}
                                                              >
                                                                <ForwardRef(MotionComponent)
                                                                  animate="checked"
                                                                  exit="unchecked"
                                                                  initial="unchecked"
                                                                  style={
                                                                    Object {
                                                                      "alignItems": "center",
                                                                      "display": "flex",
                                                                      "height": "100%",
                                                                      "justifyContent": "center",
                                                                    }
                                                                  }
                                                                  variants={
                                                                    Object {
                                                                      "checked": Object {
                                                                        "scale": 1,
                                                                      },
                                                                      "unchecked": Object {
                                                                        "scale": 0.5,
                                                                      },
                                                                    }
                                                                  }
                                                                >
                                                                  <div
                                                                    style={
                                                                      Object {
                                                                        "alignItems": "center",
                                                                        "display": "flex",
                                                                        "height": "100%",
                                                                        "justifyContent": "center",
                                                                        "transform": "none",
                                                                      }
                                                                    }
                                                                  >
                                                                    <CheckIcon
                                                                      __css={
                                                                        Object {
                                                                          "color": undefined,
                                                                          "fontSize": "0.625rem",
                                                                          "opacity": 1,
                                                                          "transform": "scale(1)",
                                                                          "transition": "transform 200ms",
                                                                        }
                                                                      }
                                                                    >
                                                                      <ForwardRef(MotionComponent)
                                                                        __css={
                                                                          Object {
                                                                            "color": undefined,
                                                                            "fontSize": "0.625rem",
                                                                            "opacity": 1,
                                                                            "transform": "scale(1)",
                                                                            "transition": "transform 200ms",
                                                                          }
                                                                        }
                                                                        style={
                                                                          Object {
                                                                            "fill": "none",
                                                                            "stroke": "currentColor",
                                                                            "strokeDasharray": 16,
                                                                            "strokeWidth": 2,
                                                                          }
                                                                        }
                                                                        variants={
                                                                          Object {
                                                                            "checked": Object {
                                                                              "opacity": 1,
                                                                              "strokeDashoffset": 0,
                                                                              "transition": Object {
                                                                                "duration": 0.2,
                                                                              },
                                                                            },
                                                                            "unchecked": Object {
                                                                              "opacity": 0,
                                                                              "strokeDashoffset": 16,
                                                                            },
                                                                          }
                                                                        }
                                                                        viewBox="0 0 12 10"
                                                                        width="1.2em"
                                                                      >
                                                                        <Styled(svg)
                                                                          __css={
                                                                            Object {
                                                                              "color": undefined,
                                                                              "fontSize": "0.625rem",
                                                                              "opacity": 1,
                                                                              "transform": "scale(1)",
                                                                              "transition": "transform 200ms",
                                                                            }
                                                                          }
                                                                          style={
                                                                            Object {
                                                                              "fill": "none",
                                                                              "opacity": 1,
                                                                              "stroke": "currentColor",
                                                                              "strokeDasharray": 16,
                                                                              "strokeDashoffset": 0,
                                                                              "strokeWidth": 2,
                                                                            }
                                                                          }
                                                                          variants={
                                                                            Object {
                                                                              "checked": Object {
                                                                                "opacity": 1,
                                                                                "strokeDashoffset": 0,
                                                                                "transition": Object {
                                                                                  "duration": 0.2,
                                                                                },
                                                                              },
                                                                              "unchecked": Object {
                                                                                "opacity": 0,
                                                                                "strokeDashoffset": 16,
                                                                              },
                                                                            }
                                                                          }
                                                                          viewBox="0 0 12 10"
                                                                          width="1.2em"
                                                                        >
                                                                          <svg
                                                                            className="css-da6t8b"
                                                                            style={
                                                                              Object {
                                                                                "fill": "none",
                                                                                "opacity": 1,
                                                                                "stroke": "currentColor",
                                                                                "strokeDasharray": 16,
                                                                                "strokeDashoffset": 0,
                                                                                "strokeWidth": 2,
                                                                              }
                                                                            }
                                                                            variants={
                                                                              Object {
                                                                                "checked": Object {
                                                                                  "opacity": 1,
                                                                                  "strokeDashoffset": 0,
                                                                                  "transition": Object {
                                                                                    "duration": 0.2,
                                                                                  },
                                                                                },
                                                                                "unchecked": Object {
                                                                                  "opacity": 0,
                                                                                  "strokeDashoffset": 16,
                                                                                },
                                                                              }
                                                                            }
                                                                            viewBox="0 0 12 10"
                                                                          >
                                                                            <polyline
                                                                              points="1.5 6 4.5 9 10.5 1"
                                                                            />
                                                                          </svg>
                                                                        </Styled(svg)>
                                                                        <Component
                                                                          __css={
                                                                            Object {
                                                                              "color": undefined,
                                                                              "fontSize": "0.625rem",
                                                                              "opacity": 1,
                                                                              "transform": "scale(1)",
                                                                              "transition": "transform 200ms",
                                                                            }
                                                                          }
                                                                          key="animation"
                                                                          style={
                                                                            Object {
                                                                              "fill": "none",
                                                                              "stroke": "currentColor",
                                                                              "strokeDasharray": 16,
                                                                              "strokeWidth": 2,
                                                                            }
                                                                          }
                                                                          variants={
                                                                            Object {
                                                                              "checked": Object {
                                                                                "opacity": 1,
                                                                                "strokeDashoffset": 0,
                                                                                "transition": Object {
                                                                                  "duration": 0.2,
                                                                                },
                                                                              },
                                                                              "unchecked": Object {
                                                                                "opacity": 0,
                                                                                "strokeDashoffset": 16,
                                                                              },
                                                                            }
                                                                          }
                                                                          viewBox="0 0 12 10"
                                                                          visualElement={
                                                                            Object {
                                                                              "addChild": [Function],
                                                                              "addValue": [Function],
                                                                              "addVariantChild": [Function],
                                                                              "animationState": Object {
                                                                                "animateChanges": [Function],
                                                                                "getState": [Function],
                                                                                "isAnimated": [Function],
                                                                                "setActive": [Function],
                                                                                "setAnimateFunction": [Function],
                                                                              },
                                                                              "blockInitialAnimation": true,
                                                                              "build": [Function],
                                                                              "clearAllListeners": [Function],
                                                                              "clearState": [Function],
                                                                              "current": <svg
                                                                                class="css-da6t8b"
                                                                                style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                                variants="[object Object]"
                                                                                viewBox="0 0 12 10"
                                                                              >
                                                                                <polyline
                                                                                  points="1.5 6 4.5 9 10.5 1"
                                                                                />
                                                                              </svg>,
                                                                              "depth": 1,
                                                                              "enableLayoutProjection": [Function],
                                                                              "forEachValue": [Function],
                                                                              "getBaseTarget": [Function],
                                                                              "getClosestVariantNode": [Function],
                                                                              "getDefaultTransition": [Function],
                                                                              "getInstance": [Function],
                                                                              "getLatestValues": [Function],
                                                                              "getLayoutId": [Function],
                                                                              "getLayoutState": [Function],
                                                                              "getProjectionAnimationProgress": [Function],
                                                                              "getProps": [Function],
                                                                              "getStaticValue": [Function],
                                                                              "getValue": [Function],
                                                                              "getVariant": [Function],
                                                                              "getVariantContext": [Function],
                                                                              "hasValue": [Function],
                                                                              "isHoverEventsEnabled": true,
                                                                              "isMounted": [Function],
                                                                              "isPresenceRoot": false,
                                                                              "isPresent": true,
                                                                              "isStatic": false,
                                                                              "isVisible": undefined,
                                                                              "lockProjectionTarget": [Function],
                                                                              "makeTargetAnimatable": [Function],
                                                                              "manuallyAnimateOnMount": false,
                                                                              "measureViewportBox": [Function],
                                                                              "notifyAnimationComplete": [Function],
                                                                              "notifyAnimationStart": [Function],
                                                                              "notifyBeforeLayoutMeasure": [Function],
                                                                              "notifyLayoutAnimationComplete": [Function],
                                                                              "notifyLayoutMeasure": [Function],
                                                                              "notifyLayoutReady": [Function],
                                                                              "notifyLayoutUpdate": [Function],
                                                                              "notifyRender": [Function],
                                                                              "notifySetAxisTarget": [Function],
                                                                              "notifyUpdate": [Function],
                                                                              "notifyViewportBoxUpdate": [Function],
                                                                              "onAnimationComplete": [Function],
                                                                              "onAnimationStart": [Function],
                                                                              "onBeforeLayoutMeasure": [Function],
                                                                              "onLayoutAnimationComplete": [Function],
                                                                              "onLayoutMeasure": [Function],
                                                                              "onLayoutUpdate": [Function],
                                                                              "onRender": [Function],
                                                                              "onSetAxisTarget": [Function],
                                                                              "onUpdate": [Function],
                                                                              "onViewportBoxUpdate": [Function],
                                                                              "path": Array [
                                                                                Object {
                                                                                  "addChild": [Function],
                                                                                  "addValue": [Function],
                                                                                  "addVariantChild": [Function],
                                                                                  "animationState": Object {
                                                                                    "animateChanges": [Function],
                                                                                    "getState": [Function],
                                                                                    "isAnimated": [Function],
                                                                                    "setActive": [Function],
                                                                                    "setAnimateFunction": [Function],
                                                                                  },
                                                                                  "blockInitialAnimation": true,
                                                                                  "build": [Function],
                                                                                  "clearAllListeners": [Function],
                                                                                  "clearState": [Function],
                                                                                  "current": <div
                                                                                    style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                                                  >
                                                                                    <svg
                                                                                      class="css-da6t8b"
                                                                                      style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                                      variants="[object Object]"
                                                                                      viewBox="0 0 12 10"
                                                                                    >
                                                                                      <polyline
                                                                                        points="1.5 6 4.5 9 10.5 1"
                                                                                      />
                                                                                    </svg>
                                                                                  </div>,
                                                                                  "depth": 0,
                                                                                  "enableLayoutProjection": [Function],
                                                                                  "forEachValue": [Function],
                                                                                  "getBaseTarget": [Function],
                                                                                  "getClosestVariantNode": [Function],
                                                                                  "getDefaultTransition": [Function],
                                                                                  "getInstance": [Function],
                                                                                  "getLatestValues": [Function],
                                                                                  "getLayoutId": [Function],
                                                                                  "getLayoutState": [Function],
                                                                                  "getProjectionAnimationProgress": [Function],
                                                                                  "getProps": [Function],
                                                                                  "getStaticValue": [Function],
                                                                                  "getValue": [Function],
                                                                                  "getVariant": [Function],
                                                                                  "getVariantContext": [Function],
                                                                                  "hasValue": [Function],
                                                                                  "isHoverEventsEnabled": true,
                                                                                  "isMounted": [Function],
                                                                                  "isPresenceRoot": true,
                                                                                  "isPresent": true,
                                                                                  "isStatic": false,
                                                                                  "isVisible": undefined,
                                                                                  "lockProjectionTarget": [Function],
                                                                                  "makeTargetAnimatable": [Function],
                                                                                  "manuallyAnimateOnMount": false,
                                                                                  "measureViewportBox": [Function],
                                                                                  "notifyAnimationComplete": [Function],
                                                                                  "notifyAnimationStart": [Function],
                                                                                  "notifyBeforeLayoutMeasure": [Function],
                                                                                  "notifyLayoutAnimationComplete": [Function],
                                                                                  "notifyLayoutMeasure": [Function],
                                                                                  "notifyLayoutReady": [Function],
                                                                                  "notifyLayoutUpdate": [Function],
                                                                                  "notifyRender": [Function],
                                                                                  "notifySetAxisTarget": [Function],
                                                                                  "notifyUpdate": [Function],
                                                                                  "notifyViewportBoxUpdate": [Function],
                                                                                  "onAnimationComplete": [Function],
                                                                                  "onAnimationStart": [Function],
                                                                                  "onBeforeLayoutMeasure": [Function],
                                                                                  "onLayoutAnimationComplete": [Function],
                                                                                  "onLayoutMeasure": [Function],
                                                                                  "onLayoutUpdate": [Function],
                                                                                  "onRender": [Function],
                                                                                  "onSetAxisTarget": [Function],
                                                                                  "onUpdate": [Function],
                                                                                  "onViewportBoxUpdate": [Function],
                                                                                  "path": Array [],
                                                                                  "pointTo": [Function],
                                                                                  "presence": 0,
                                                                                  "presenceId": 2,
                                                                                  "projection": Object {
                                                                                    "isEnabled": false,
                                                                                    "isTargetLocked": false,
                                                                                    "target": Object {
                                                                                      "x": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                      "y": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                    },
                                                                                    "targetFinal": Object {
                                                                                      "x": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                      "y": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                    },
                                                                                  },
                                                                                  "readValue": [Function],
                                                                                  "rebaseProjectionTarget": [Function],
                                                                                  "ref": [Function],
                                                                                  "removeValue": [Function],
                                                                                  "resetTransform": [Function],
                                                                                  "scheduleRender": [Function],
                                                                                  "scheduleUpdateLayoutProjection": [Function],
                                                                                  "setBaseTarget": [Function],
                                                                                  "setCrossfader": [Function],
                                                                                  "setProjectionTargetAxis": [Function],
                                                                                  "setProps": [Function],
                                                                                  "setStaticValue": [Function],
                                                                                  "setVisibility": [Function],
                                                                                  "snapshotViewportBox": [Function],
                                                                                  "sortNodePosition": [Function],
                                                                                  "startLayoutAnimation": [Function],
                                                                                  "stopLayoutAnimation": [Function],
                                                                                  "suspendHoverEvents": [Function],
                                                                                  "syncRender": [Function],
                                                                                  "treeType": "dom",
                                                                                  "unlockProjectionTarget": [Function],
                                                                                  "updateLayoutMeasurement": [Function],
                                                                                  "updateLayoutProjection": [Function],
                                                                                  "updatePropListeners": [Function],
                                                                                  "variantChildren": Set {
                                                                                    [Circular],
                                                                                  },
                                                                                  "withoutTransform": [Function],
                                                                                },
                                                                              ],
                                                                              "pointTo": [Function],
                                                                              "presence": 0,
                                                                              "presenceId": 2,
                                                                              "projection": Object {
                                                                                "isEnabled": false,
                                                                                "isTargetLocked": false,
                                                                                "target": Object {
                                                                                  "x": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                  "y": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                },
                                                                                "targetFinal": Object {
                                                                                  "x": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                  "y": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                },
                                                                              },
                                                                              "readValue": [Function],
                                                                              "rebaseProjectionTarget": [Function],
                                                                              "ref": [Function],
                                                                              "removeValue": [Function],
                                                                              "resetTransform": [Function],
                                                                              "scheduleRender": [Function],
                                                                              "scheduleUpdateLayoutProjection": [Function],
                                                                              "setBaseTarget": [Function],
                                                                              "setCrossfader": [Function],
                                                                              "setProjectionTargetAxis": [Function],
                                                                              "setProps": [Function],
                                                                              "setStaticValue": [Function],
                                                                              "setVisibility": [Function],
                                                                              "snapshotViewportBox": [Function],
                                                                              "sortNodePosition": [Function],
                                                                              "startLayoutAnimation": [Function],
                                                                              "stopLayoutAnimation": [Function],
                                                                              "suspendHoverEvents": [Function],
                                                                              "syncRender": [Function],
                                                                              "treeType": "dom",
                                                                              "unlockProjectionTarget": [Function],
                                                                              "updateLayoutMeasurement": [Function],
                                                                              "updateLayoutProjection": [Function],
                                                                              "updatePropListeners": [Function],
                                                                              "variantChildren": Set {},
                                                                              "withoutTransform": [Function],
                                                                            }
                                                                          }
                                                                          width="1.2em"
                                                                        />
                                                                      </ForwardRef(MotionComponent)>
                                                                    </CheckIcon>
                                                                  </div>
                                                                  <Component
                                                                    animate="checked"
                                                                    exit="unchecked"
                                                                    initial="unchecked"
                                                                    key="animation"
                                                                    style={
                                                                      Object {
                                                                        "alignItems": "center",
                                                                        "display": "flex",
                                                                        "height": "100%",
                                                                        "justifyContent": "center",
                                                                      }
                                                                    }
                                                                    variants={
                                                                      Object {
                                                                        "checked": Object {
                                                                          "scale": 1,
                                                                        },
                                                                        "unchecked": Object {
                                                                          "scale": 0.5,
                                                                        },
                                                                      }
                                                                    }
                                                                    visualElement={
                                                                      Object {
                                                                        "addChild": [Function],
                                                                        "addValue": [Function],
                                                                        "addVariantChild": [Function],
                                                                        "animationState": Object {
                                                                          "animateChanges": [Function],
                                                                          "getState": [Function],
                                                                          "isAnimated": [Function],
                                                                          "setActive": [Function],
                                                                          "setAnimateFunction": [Function],
                                                                        },
                                                                        "blockInitialAnimation": true,
                                                                        "build": [Function],
                                                                        "clearAllListeners": [Function],
                                                                        "clearState": [Function],
                                                                        "current": <div
                                                                          style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                                        >
                                                                          <svg
                                                                            class="css-da6t8b"
                                                                            style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                            variants="[object Object]"
                                                                            viewBox="0 0 12 10"
                                                                          >
                                                                            <polyline
                                                                              points="1.5 6 4.5 9 10.5 1"
                                                                            />
                                                                          </svg>
                                                                        </div>,
                                                                        "depth": 0,
                                                                        "enableLayoutProjection": [Function],
                                                                        "forEachValue": [Function],
                                                                        "getBaseTarget": [Function],
                                                                        "getClosestVariantNode": [Function],
                                                                        "getDefaultTransition": [Function],
                                                                        "getInstance": [Function],
                                                                        "getLatestValues": [Function],
                                                                        "getLayoutId": [Function],
                                                                        "getLayoutState": [Function],
                                                                        "getProjectionAnimationProgress": [Function],
                                                                        "getProps": [Function],
                                                                        "getStaticValue": [Function],
                                                                        "getValue": [Function],
                                                                        "getVariant": [Function],
                                                                        "getVariantContext": [Function],
                                                                        "hasValue": [Function],
                                                                        "isHoverEventsEnabled": true,
                                                                        "isMounted": [Function],
                                                                        "isPresenceRoot": true,
                                                                        "isPresent": true,
                                                                        "isStatic": false,
                                                                        "isVisible": undefined,
                                                                        "lockProjectionTarget": [Function],
                                                                        "makeTargetAnimatable": [Function],
                                                                        "manuallyAnimateOnMount": false,
                                                                        "measureViewportBox": [Function],
                                                                        "notifyAnimationComplete": [Function],
                                                                        "notifyAnimationStart": [Function],
                                                                        "notifyBeforeLayoutMeasure": [Function],
                                                                        "notifyLayoutAnimationComplete": [Function],
                                                                        "notifyLayoutMeasure": [Function],
                                                                        "notifyLayoutReady": [Function],
                                                                        "notifyLayoutUpdate": [Function],
                                                                        "notifyRender": [Function],
                                                                        "notifySetAxisTarget": [Function],
                                                                        "notifyUpdate": [Function],
                                                                        "notifyViewportBoxUpdate": [Function],
                                                                        "onAnimationComplete": [Function],
                                                                        "onAnimationStart": [Function],
                                                                        "onBeforeLayoutMeasure": [Function],
                                                                        "onLayoutAnimationComplete": [Function],
                                                                        "onLayoutMeasure": [Function],
                                                                        "onLayoutUpdate": [Function],
                                                                        "onRender": [Function],
                                                                        "onSetAxisTarget": [Function],
                                                                        "onUpdate": [Function],
                                                                        "onViewportBoxUpdate": [Function],
                                                                        "path": Array [],
                                                                        "pointTo": [Function],
                                                                        "presence": 0,
                                                                        "presenceId": 2,
                                                                        "projection": Object {
                                                                          "isEnabled": false,
                                                                          "isTargetLocked": false,
                                                                          "target": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                          "targetFinal": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                        },
                                                                        "readValue": [Function],
                                                                        "rebaseProjectionTarget": [Function],
                                                                        "ref": [Function],
                                                                        "removeValue": [Function],
                                                                        "resetTransform": [Function],
                                                                        "scheduleRender": [Function],
                                                                        "scheduleUpdateLayoutProjection": [Function],
                                                                        "setBaseTarget": [Function],
                                                                        "setCrossfader": [Function],
                                                                        "setProjectionTargetAxis": [Function],
                                                                        "setProps": [Function],
                                                                        "setStaticValue": [Function],
                                                                        "setVisibility": [Function],
                                                                        "snapshotViewportBox": [Function],
                                                                        "sortNodePosition": [Function],
                                                                        "startLayoutAnimation": [Function],
                                                                        "stopLayoutAnimation": [Function],
                                                                        "suspendHoverEvents": [Function],
                                                                        "syncRender": [Function],
                                                                        "treeType": "dom",
                                                                        "unlockProjectionTarget": [Function],
                                                                        "updateLayoutMeasurement": [Function],
                                                                        "updateLayoutProjection": [Function],
                                                                        "updatePropListeners": [Function],
                                                                        "variantChildren": Set {
                                                                          Object {
                                                                            "addChild": [Function],
                                                                            "addValue": [Function],
                                                                            "addVariantChild": [Function],
                                                                            "animationState": Object {
                                                                              "animateChanges": [Function],
                                                                              "getState": [Function],
                                                                              "isAnimated": [Function],
                                                                              "setActive": [Function],
                                                                              "setAnimateFunction": [Function],
                                                                            },
                                                                            "blockInitialAnimation": true,
                                                                            "build": [Function],
                                                                            "clearAllListeners": [Function],
                                                                            "clearState": [Function],
                                                                            "current": <svg
                                                                              class="css-da6t8b"
                                                                              style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                              variants="[object Object]"
                                                                              viewBox="0 0 12 10"
                                                                            >
                                                                              <polyline
                                                                                points="1.5 6 4.5 9 10.5 1"
                                                                              />
                                                                            </svg>,
                                                                            "depth": 1,
                                                                            "enableLayoutProjection": [Function],
                                                                            "forEachValue": [Function],
                                                                            "getBaseTarget": [Function],
                                                                            "getClosestVariantNode": [Function],
                                                                            "getDefaultTransition": [Function],
                                                                            "getInstance": [Function],
                                                                            "getLatestValues": [Function],
                                                                            "getLayoutId": [Function],
                                                                            "getLayoutState": [Function],
                                                                            "getProjectionAnimationProgress": [Function],
                                                                            "getProps": [Function],
                                                                            "getStaticValue": [Function],
                                                                            "getValue": [Function],
                                                                            "getVariant": [Function],
                                                                            "getVariantContext": [Function],
                                                                            "hasValue": [Function],
                                                                            "isHoverEventsEnabled": true,
                                                                            "isMounted": [Function],
                                                                            "isPresenceRoot": false,
                                                                            "isPresent": true,
                                                                            "isStatic": false,
                                                                            "isVisible": undefined,
                                                                            "lockProjectionTarget": [Function],
                                                                            "makeTargetAnimatable": [Function],
                                                                            "manuallyAnimateOnMount": false,
                                                                            "measureViewportBox": [Function],
                                                                            "notifyAnimationComplete": [Function],
                                                                            "notifyAnimationStart": [Function],
                                                                            "notifyBeforeLayoutMeasure": [Function],
                                                                            "notifyLayoutAnimationComplete": [Function],
                                                                            "notifyLayoutMeasure": [Function],
                                                                            "notifyLayoutReady": [Function],
                                                                            "notifyLayoutUpdate": [Function],
                                                                            "notifyRender": [Function],
                                                                            "notifySetAxisTarget": [Function],
                                                                            "notifyUpdate": [Function],
                                                                            "notifyViewportBoxUpdate": [Function],
                                                                            "onAnimationComplete": [Function],
                                                                            "onAnimationStart": [Function],
                                                                            "onBeforeLayoutMeasure": [Function],
                                                                            "onLayoutAnimationComplete": [Function],
                                                                            "onLayoutMeasure": [Function],
                                                                            "onLayoutUpdate": [Function],
                                                                            "onRender": [Function],
                                                                            "onSetAxisTarget": [Function],
                                                                            "onUpdate": [Function],
                                                                            "onViewportBoxUpdate": [Function],
                                                                            "path": Array [
                                                                              [Circular],
                                                                            ],
                                                                            "pointTo": [Function],
                                                                            "presence": 0,
                                                                            "presenceId": 2,
                                                                            "projection": Object {
                                                                              "isEnabled": false,
                                                                              "isTargetLocked": false,
                                                                              "target": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                              "targetFinal": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                            },
                                                                            "readValue": [Function],
                                                                            "rebaseProjectionTarget": [Function],
                                                                            "ref": [Function],
                                                                            "removeValue": [Function],
                                                                            "resetTransform": [Function],
                                                                            "scheduleRender": [Function],
                                                                            "scheduleUpdateLayoutProjection": [Function],
                                                                            "setBaseTarget": [Function],
                                                                            "setCrossfader": [Function],
                                                                            "setProjectionTargetAxis": [Function],
                                                                            "setProps": [Function],
                                                                            "setStaticValue": [Function],
                                                                            "setVisibility": [Function],
                                                                            "snapshotViewportBox": [Function],
                                                                            "sortNodePosition": [Function],
                                                                            "startLayoutAnimation": [Function],
                                                                            "stopLayoutAnimation": [Function],
                                                                            "suspendHoverEvents": [Function],
                                                                            "syncRender": [Function],
                                                                            "treeType": "dom",
                                                                            "unlockProjectionTarget": [Function],
                                                                            "updateLayoutMeasurement": [Function],
                                                                            "updateLayoutProjection": [Function],
                                                                            "updatePropListeners": [Function],
                                                                            "variantChildren": Set {},
                                                                            "withoutTransform": [Function],
                                                                          },
                                                                        },
                                                                        "withoutTransform": [Function],
                                                                      }
                                                                    }
                                                                  />
                                                                  <Component
                                                                    animate="checked"
                                                                    exit="unchecked"
                                                                    initial="unchecked"
                                                                    key="exit"
                                                                    style={
                                                                      Object {
                                                                        "alignItems": "center",
                                                                        "display": "flex",
                                                                        "height": "100%",
                                                                        "justifyContent": "center",
                                                                      }
                                                                    }
                                                                    variants={
                                                                      Object {
                                                                        "checked": Object {
                                                                          "scale": 1,
                                                                        },
                                                                        "unchecked": Object {
                                                                          "scale": 0.5,
                                                                        },
                                                                      }
                                                                    }
                                                                    visualElement={
                                                                      Object {
                                                                        "addChild": [Function],
                                                                        "addValue": [Function],
                                                                        "addVariantChild": [Function],
                                                                        "animationState": Object {
                                                                          "animateChanges": [Function],
                                                                          "getState": [Function],
                                                                          "isAnimated": [Function],
                                                                          "setActive": [Function],
                                                                          "setAnimateFunction": [Function],
                                                                        },
                                                                        "blockInitialAnimation": true,
                                                                        "build": [Function],
                                                                        "clearAllListeners": [Function],
                                                                        "clearState": [Function],
                                                                        "current": <div
                                                                          style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                                        >
                                                                          <svg
                                                                            class="css-da6t8b"
                                                                            style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                            variants="[object Object]"
                                                                            viewBox="0 0 12 10"
                                                                          >
                                                                            <polyline
                                                                              points="1.5 6 4.5 9 10.5 1"
                                                                            />
                                                                          </svg>
                                                                        </div>,
                                                                        "depth": 0,
                                                                        "enableLayoutProjection": [Function],
                                                                        "forEachValue": [Function],
                                                                        "getBaseTarget": [Function],
                                                                        "getClosestVariantNode": [Function],
                                                                        "getDefaultTransition": [Function],
                                                                        "getInstance": [Function],
                                                                        "getLatestValues": [Function],
                                                                        "getLayoutId": [Function],
                                                                        "getLayoutState": [Function],
                                                                        "getProjectionAnimationProgress": [Function],
                                                                        "getProps": [Function],
                                                                        "getStaticValue": [Function],
                                                                        "getValue": [Function],
                                                                        "getVariant": [Function],
                                                                        "getVariantContext": [Function],
                                                                        "hasValue": [Function],
                                                                        "isHoverEventsEnabled": true,
                                                                        "isMounted": [Function],
                                                                        "isPresenceRoot": true,
                                                                        "isPresent": true,
                                                                        "isStatic": false,
                                                                        "isVisible": undefined,
                                                                        "lockProjectionTarget": [Function],
                                                                        "makeTargetAnimatable": [Function],
                                                                        "manuallyAnimateOnMount": false,
                                                                        "measureViewportBox": [Function],
                                                                        "notifyAnimationComplete": [Function],
                                                                        "notifyAnimationStart": [Function],
                                                                        "notifyBeforeLayoutMeasure": [Function],
                                                                        "notifyLayoutAnimationComplete": [Function],
                                                                        "notifyLayoutMeasure": [Function],
                                                                        "notifyLayoutReady": [Function],
                                                                        "notifyLayoutUpdate": [Function],
                                                                        "notifyRender": [Function],
                                                                        "notifySetAxisTarget": [Function],
                                                                        "notifyUpdate": [Function],
                                                                        "notifyViewportBoxUpdate": [Function],
                                                                        "onAnimationComplete": [Function],
                                                                        "onAnimationStart": [Function],
                                                                        "onBeforeLayoutMeasure": [Function],
                                                                        "onLayoutAnimationComplete": [Function],
                                                                        "onLayoutMeasure": [Function],
                                                                        "onLayoutUpdate": [Function],
                                                                        "onRender": [Function],
                                                                        "onSetAxisTarget": [Function],
                                                                        "onUpdate": [Function],
                                                                        "onViewportBoxUpdate": [Function],
                                                                        "path": Array [],
                                                                        "pointTo": [Function],
                                                                        "presence": 0,
                                                                        "presenceId": 2,
                                                                        "projection": Object {
                                                                          "isEnabled": false,
                                                                          "isTargetLocked": false,
                                                                          "target": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                          "targetFinal": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                        },
                                                                        "readValue": [Function],
                                                                        "rebaseProjectionTarget": [Function],
                                                                        "ref": [Function],
                                                                        "removeValue": [Function],
                                                                        "resetTransform": [Function],
                                                                        "scheduleRender": [Function],
                                                                        "scheduleUpdateLayoutProjection": [Function],
                                                                        "setBaseTarget": [Function],
                                                                        "setCrossfader": [Function],
                                                                        "setProjectionTargetAxis": [Function],
                                                                        "setProps": [Function],
                                                                        "setStaticValue": [Function],
                                                                        "setVisibility": [Function],
                                                                        "snapshotViewportBox": [Function],
                                                                        "sortNodePosition": [Function],
                                                                        "startLayoutAnimation": [Function],
                                                                        "stopLayoutAnimation": [Function],
                                                                        "suspendHoverEvents": [Function],
                                                                        "syncRender": [Function],
                                                                        "treeType": "dom",
                                                                        "unlockProjectionTarget": [Function],
                                                                        "updateLayoutMeasurement": [Function],
                                                                        "updateLayoutProjection": [Function],
                                                                        "updatePropListeners": [Function],
                                                                        "variantChildren": Set {
                                                                          Object {
                                                                            "addChild": [Function],
                                                                            "addValue": [Function],
                                                                            "addVariantChild": [Function],
                                                                            "animationState": Object {
                                                                              "animateChanges": [Function],
                                                                              "getState": [Function],
                                                                              "isAnimated": [Function],
                                                                              "setActive": [Function],
                                                                              "setAnimateFunction": [Function],
                                                                            },
                                                                            "blockInitialAnimation": true,
                                                                            "build": [Function],
                                                                            "clearAllListeners": [Function],
                                                                            "clearState": [Function],
                                                                            "current": <svg
                                                                              class="css-da6t8b"
                                                                              style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                              variants="[object Object]"
                                                                              viewBox="0 0 12 10"
                                                                            >
                                                                              <polyline
                                                                                points="1.5 6 4.5 9 10.5 1"
                                                                              />
                                                                            </svg>,
                                                                            "depth": 1,
                                                                            "enableLayoutProjection": [Function],
                                                                            "forEachValue": [Function],
                                                                            "getBaseTarget": [Function],
                                                                            "getClosestVariantNode": [Function],
                                                                            "getDefaultTransition": [Function],
                                                                            "getInstance": [Function],
                                                                            "getLatestValues": [Function],
                                                                            "getLayoutId": [Function],
                                                                            "getLayoutState": [Function],
                                                                            "getProjectionAnimationProgress": [Function],
                                                                            "getProps": [Function],
                                                                            "getStaticValue": [Function],
                                                                            "getValue": [Function],
                                                                            "getVariant": [Function],
                                                                            "getVariantContext": [Function],
                                                                            "hasValue": [Function],
                                                                            "isHoverEventsEnabled": true,
                                                                            "isMounted": [Function],
                                                                            "isPresenceRoot": false,
                                                                            "isPresent": true,
                                                                            "isStatic": false,
                                                                            "isVisible": undefined,
                                                                            "lockProjectionTarget": [Function],
                                                                            "makeTargetAnimatable": [Function],
                                                                            "manuallyAnimateOnMount": false,
                                                                            "measureViewportBox": [Function],
                                                                            "notifyAnimationComplete": [Function],
                                                                            "notifyAnimationStart": [Function],
                                                                            "notifyBeforeLayoutMeasure": [Function],
                                                                            "notifyLayoutAnimationComplete": [Function],
                                                                            "notifyLayoutMeasure": [Function],
                                                                            "notifyLayoutReady": [Function],
                                                                            "notifyLayoutUpdate": [Function],
                                                                            "notifyRender": [Function],
                                                                            "notifySetAxisTarget": [Function],
                                                                            "notifyUpdate": [Function],
                                                                            "notifyViewportBoxUpdate": [Function],
                                                                            "onAnimationComplete": [Function],
                                                                            "onAnimationStart": [Function],
                                                                            "onBeforeLayoutMeasure": [Function],
                                                                            "onLayoutAnimationComplete": [Function],
                                                                            "onLayoutMeasure": [Function],
                                                                            "onLayoutUpdate": [Function],
                                                                            "onRender": [Function],
                                                                            "onSetAxisTarget": [Function],
                                                                            "onUpdate": [Function],
                                                                            "onViewportBoxUpdate": [Function],
                                                                            "path": Array [
                                                                              [Circular],
                                                                            ],
                                                                            "pointTo": [Function],
                                                                            "presence": 0,
                                                                            "presenceId": 2,
                                                                            "projection": Object {
                                                                              "isEnabled": false,
                                                                              "isTargetLocked": false,
                                                                              "target": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                              "targetFinal": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                            },
                                                                            "readValue": [Function],
                                                                            "rebaseProjectionTarget": [Function],
                                                                            "ref": [Function],
                                                                            "removeValue": [Function],
                                                                            "resetTransform": [Function],
                                                                            "scheduleRender": [Function],
                                                                            "scheduleUpdateLayoutProjection": [Function],
                                                                            "setBaseTarget": [Function],
                                                                            "setCrossfader": [Function],
                                                                            "setProjectionTargetAxis": [Function],
                                                                            "setProps": [Function],
                                                                            "setStaticValue": [Function],
                                                                            "setVisibility": [Function],
                                                                            "snapshotViewportBox": [Function],
                                                                            "sortNodePosition": [Function],
                                                                            "startLayoutAnimation": [Function],
                                                                            "stopLayoutAnimation": [Function],
                                                                            "suspendHoverEvents": [Function],
                                                                            "syncRender": [Function],
                                                                            "treeType": "dom",
                                                                            "unlockProjectionTarget": [Function],
                                                                            "updateLayoutMeasurement": [Function],
                                                                            "updateLayoutProjection": [Function],
                                                                            "updatePropListeners": [Function],
                                                                            "variantChildren": Set {},
                                                                            "withoutTransform": [Function],
                                                                          },
                                                                        },
                                                                        "withoutTransform": [Function],
                                                                      }
                                                                    }
                                                                  />
                                                                </ForwardRef(MotionComponent)>
                                                              </PresenceChild>
                                                            </AnimatePresence>
                                                          </CheckboxTransition>
                                                        </CheckboxIcon>
                                                      </span>
                                                    </Styled(span)>
                                                    <Styled(span)
                                                      __css={
                                                        Object {
                                                          "_disabled": Object {
                                                            "opacity": 0.4,
                                                          },
                                                          "fontSize": "md",
                                                          "marginStart": "0.5rem",
                                                          "userSelect": "none",
                                                        }
                                                      }
                                                      className="chakra-checkbox__label"
                                                      data-checked=""
                                                      onMouseDown={[Function]}
                                                      onTouchStart={[Function]}
                                                    >
                                                      <span
                                                        className="chakra-checkbox__label css-sklcna"
                                                        data-checked=""
                                                        onMouseDown={[Function]}
                                                        onTouchStart={[Function]}
                                                      >
                                                        Wed
                                                      </span>
                                                    </Styled(span)>
                                                  </label>
                                                </Styled(label)>
                                              </Checkbox>
                                            </Day>
                                            <Day
                                              day="Thursday"
                                              isChecked={true}
                                              key="Thursday"
                                              update={[MockFunction]}
                                            >
                                              <Checkbox
                                                fontWeight="normal"
                                                isChecked={true}
                                                onChange={[Function]}
                                              >
                                                <Styled(label)
                                                  __css={Object {}}
                                                  className="chakra-checkbox"
                                                  fontWeight="normal"
                                                >
                                                  <label
                                                    className="chakra-checkbox css-wun7cp"
                                                  >
                                                    <input
                                                      checked={true}
                                                      className="chakra-checkbox__input"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      style={
                                                        Object {
                                                          "border": "0px",
                                                          "clip": "rect(0px, 0px, 0px, 0px)",
                                                          "height": "1px",
                                                          "margin": "-1px",
                                                          "overflow": "hidden",
                                                          "padding": "0px",
                                                          "position": "absolute",
                                                          "whiteSpace": "nowrap",
                                                          "width": "1px",
                                                        }
                                                      }
                                                      type="checkbox"
                                                    />
                                                    <Styled(span)
                                                      __css={
                                                        Object {
                                                          "_checked": Object {
                                                            "_disabled": Object {
                                                              "bg": "gray.200",
                                                              "borderColor": "gray.200",
                                                              "color": "gray.500",
                                                            },
                                                            "_hover": Object {
                                                              "bg": "blue.600",
                                                              "borderColor": "blue.600",
                                                            },
                                                            "bg": "blue.500",
                                                            "borderColor": "blue.500",
                                                            "color": "white",
                                                          },
                                                          "_disabled": Object {
                                                            "bg": "gray.100",
                                                            "borderColor": "gray.100",
                                                          },
                                                          "_focus": Object {
                                                            "boxShadow": "outline",
                                                          },
                                                          "_indeterminate": Object {
                                                            "bg": "blue.500",
                                                            "borderColor": "blue.500",
                                                            "color": "white",
                                                          },
                                                          "_invalid": Object {
                                                            "borderColor": "red.500",
                                                          },
                                                          "border": "2px solid",
                                                          "borderColor": "inherit",
                                                          "borderRadius": "sm",
                                                          "color": "white",
                                                          "h": 4,
                                                          "transition": "box-shadow 250ms",
                                                          "w": 4,
                                                        }
                                                      }
                                                      aria-hidden={true}
                                                      className="chakra-checkbox__control"
                                                      data-checked=""
                                                      onMouseDown={[Function]}
                                                      onMouseEnter={[Function]}
                                                      onMouseLeave={[Function]}
                                                      onMouseUp={[Function]}
                                                    >
                                                      <span
                                                        aria-hidden={true}
                                                        className="chakra-checkbox__control css-co2d90"
                                                        data-checked=""
                                                        onMouseDown={[Function]}
                                                        onMouseEnter={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                      >
                                                        <CheckboxIcon
                                                          __css={
                                                            Object {
                                                              "color": undefined,
                                                              "fontSize": "0.625rem",
                                                              "opacity": 1,
                                                              "transform": "scale(1)",
                                                              "transition": "transform 200ms",
                                                            }
                                                          }
                                                          isChecked={true}
                                                        >
                                                          <CheckboxTransition
                                                            open={true}
                                                          >
                                                            <AnimatePresence
                                                              initial={false}
                                                            >
                                                              <PresenceChild
                                                                initial={false}
                                                                isPresent={true}
                                                                key=""
                                                                presenceAffectsLayout={true}
                                                              >
                                                                <ForwardRef(MotionComponent)
                                                                  animate="checked"
                                                                  exit="unchecked"
                                                                  initial="unchecked"
                                                                  style={
                                                                    Object {
                                                                      "alignItems": "center",
                                                                      "display": "flex",
                                                                      "height": "100%",
                                                                      "justifyContent": "center",
                                                                    }
                                                                  }
                                                                  variants={
                                                                    Object {
                                                                      "checked": Object {
                                                                        "scale": 1,
                                                                      },
                                                                      "unchecked": Object {
                                                                        "scale": 0.5,
                                                                      },
                                                                    }
                                                                  }
                                                                >
                                                                  <div
                                                                    style={
                                                                      Object {
                                                                        "alignItems": "center",
                                                                        "display": "flex",
                                                                        "height": "100%",
                                                                        "justifyContent": "center",
                                                                        "transform": "none",
                                                                      }
                                                                    }
                                                                  >
                                                                    <CheckIcon
                                                                      __css={
                                                                        Object {
                                                                          "color": undefined,
                                                                          "fontSize": "0.625rem",
                                                                          "opacity": 1,
                                                                          "transform": "scale(1)",
                                                                          "transition": "transform 200ms",
                                                                        }
                                                                      }
                                                                    >
                                                                      <ForwardRef(MotionComponent)
                                                                        __css={
                                                                          Object {
                                                                            "color": undefined,
                                                                            "fontSize": "0.625rem",
                                                                            "opacity": 1,
                                                                            "transform": "scale(1)",
                                                                            "transition": "transform 200ms",
                                                                          }
                                                                        }
                                                                        style={
                                                                          Object {
                                                                            "fill": "none",
                                                                            "stroke": "currentColor",
                                                                            "strokeDasharray": 16,
                                                                            "strokeWidth": 2,
                                                                          }
                                                                        }
                                                                        variants={
                                                                          Object {
                                                                            "checked": Object {
                                                                              "opacity": 1,
                                                                              "strokeDashoffset": 0,
                                                                              "transition": Object {
                                                                                "duration": 0.2,
                                                                              },
                                                                            },
                                                                            "unchecked": Object {
                                                                              "opacity": 0,
                                                                              "strokeDashoffset": 16,
                                                                            },
                                                                          }
                                                                        }
                                                                        viewBox="0 0 12 10"
                                                                        width="1.2em"
                                                                      >
                                                                        <Styled(svg)
                                                                          __css={
                                                                            Object {
                                                                              "color": undefined,
                                                                              "fontSize": "0.625rem",
                                                                              "opacity": 1,
                                                                              "transform": "scale(1)",
                                                                              "transition": "transform 200ms",
                                                                            }
                                                                          }
                                                                          style={
                                                                            Object {
                                                                              "fill": "none",
                                                                              "opacity": 1,
                                                                              "stroke": "currentColor",
                                                                              "strokeDasharray": 16,
                                                                              "strokeDashoffset": 0,
                                                                              "strokeWidth": 2,
                                                                            }
                                                                          }
                                                                          variants={
                                                                            Object {
                                                                              "checked": Object {
                                                                                "opacity": 1,
                                                                                "strokeDashoffset": 0,
                                                                                "transition": Object {
                                                                                  "duration": 0.2,
                                                                                },
                                                                              },
                                                                              "unchecked": Object {
                                                                                "opacity": 0,
                                                                                "strokeDashoffset": 16,
                                                                              },
                                                                            }
                                                                          }
                                                                          viewBox="0 0 12 10"
                                                                          width="1.2em"
                                                                        >
                                                                          <svg
                                                                            className="css-da6t8b"
                                                                            style={
                                                                              Object {
                                                                                "fill": "none",
                                                                                "opacity": 1,
                                                                                "stroke": "currentColor",
                                                                                "strokeDasharray": 16,
                                                                                "strokeDashoffset": 0,
                                                                                "strokeWidth": 2,
                                                                              }
                                                                            }
                                                                            variants={
                                                                              Object {
                                                                                "checked": Object {
                                                                                  "opacity": 1,
                                                                                  "strokeDashoffset": 0,
                                                                                  "transition": Object {
                                                                                    "duration": 0.2,
                                                                                  },
                                                                                },
                                                                                "unchecked": Object {
                                                                                  "opacity": 0,
                                                                                  "strokeDashoffset": 16,
                                                                                },
                                                                              }
                                                                            }
                                                                            viewBox="0 0 12 10"
                                                                          >
                                                                            <polyline
                                                                              points="1.5 6 4.5 9 10.5 1"
                                                                            />
                                                                          </svg>
                                                                        </Styled(svg)>
                                                                        <Component
                                                                          __css={
                                                                            Object {
                                                                              "color": undefined,
                                                                              "fontSize": "0.625rem",
                                                                              "opacity": 1,
                                                                              "transform": "scale(1)",
                                                                              "transition": "transform 200ms",
                                                                            }
                                                                          }
                                                                          key="animation"
                                                                          style={
                                                                            Object {
                                                                              "fill": "none",
                                                                              "stroke": "currentColor",
                                                                              "strokeDasharray": 16,
                                                                              "strokeWidth": 2,
                                                                            }
                                                                          }
                                                                          variants={
                                                                            Object {
                                                                              "checked": Object {
                                                                                "opacity": 1,
                                                                                "strokeDashoffset": 0,
                                                                                "transition": Object {
                                                                                  "duration": 0.2,
                                                                                },
                                                                              },
                                                                              "unchecked": Object {
                                                                                "opacity": 0,
                                                                                "strokeDashoffset": 16,
                                                                              },
                                                                            }
                                                                          }
                                                                          viewBox="0 0 12 10"
                                                                          visualElement={
                                                                            Object {
                                                                              "addChild": [Function],
                                                                              "addValue": [Function],
                                                                              "addVariantChild": [Function],
                                                                              "animationState": Object {
                                                                                "animateChanges": [Function],
                                                                                "getState": [Function],
                                                                                "isAnimated": [Function],
                                                                                "setActive": [Function],
                                                                                "setAnimateFunction": [Function],
                                                                              },
                                                                              "blockInitialAnimation": true,
                                                                              "build": [Function],
                                                                              "clearAllListeners": [Function],
                                                                              "clearState": [Function],
                                                                              "current": <svg
                                                                                class="css-da6t8b"
                                                                                style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                                variants="[object Object]"
                                                                                viewBox="0 0 12 10"
                                                                              >
                                                                                <polyline
                                                                                  points="1.5 6 4.5 9 10.5 1"
                                                                                />
                                                                              </svg>,
                                                                              "depth": 1,
                                                                              "enableLayoutProjection": [Function],
                                                                              "forEachValue": [Function],
                                                                              "getBaseTarget": [Function],
                                                                              "getClosestVariantNode": [Function],
                                                                              "getDefaultTransition": [Function],
                                                                              "getInstance": [Function],
                                                                              "getLatestValues": [Function],
                                                                              "getLayoutId": [Function],
                                                                              "getLayoutState": [Function],
                                                                              "getProjectionAnimationProgress": [Function],
                                                                              "getProps": [Function],
                                                                              "getStaticValue": [Function],
                                                                              "getValue": [Function],
                                                                              "getVariant": [Function],
                                                                              "getVariantContext": [Function],
                                                                              "hasValue": [Function],
                                                                              "isHoverEventsEnabled": true,
                                                                              "isMounted": [Function],
                                                                              "isPresenceRoot": false,
                                                                              "isPresent": true,
                                                                              "isStatic": false,
                                                                              "isVisible": undefined,
                                                                              "lockProjectionTarget": [Function],
                                                                              "makeTargetAnimatable": [Function],
                                                                              "manuallyAnimateOnMount": false,
                                                                              "measureViewportBox": [Function],
                                                                              "notifyAnimationComplete": [Function],
                                                                              "notifyAnimationStart": [Function],
                                                                              "notifyBeforeLayoutMeasure": [Function],
                                                                              "notifyLayoutAnimationComplete": [Function],
                                                                              "notifyLayoutMeasure": [Function],
                                                                              "notifyLayoutReady": [Function],
                                                                              "notifyLayoutUpdate": [Function],
                                                                              "notifyRender": [Function],
                                                                              "notifySetAxisTarget": [Function],
                                                                              "notifyUpdate": [Function],
                                                                              "notifyViewportBoxUpdate": [Function],
                                                                              "onAnimationComplete": [Function],
                                                                              "onAnimationStart": [Function],
                                                                              "onBeforeLayoutMeasure": [Function],
                                                                              "onLayoutAnimationComplete": [Function],
                                                                              "onLayoutMeasure": [Function],
                                                                              "onLayoutUpdate": [Function],
                                                                              "onRender": [Function],
                                                                              "onSetAxisTarget": [Function],
                                                                              "onUpdate": [Function],
                                                                              "onViewportBoxUpdate": [Function],
                                                                              "path": Array [
                                                                                Object {
                                                                                  "addChild": [Function],
                                                                                  "addValue": [Function],
                                                                                  "addVariantChild": [Function],
                                                                                  "animationState": Object {
                                                                                    "animateChanges": [Function],
                                                                                    "getState": [Function],
                                                                                    "isAnimated": [Function],
                                                                                    "setActive": [Function],
                                                                                    "setAnimateFunction": [Function],
                                                                                  },
                                                                                  "blockInitialAnimation": true,
                                                                                  "build": [Function],
                                                                                  "clearAllListeners": [Function],
                                                                                  "clearState": [Function],
                                                                                  "current": <div
                                                                                    style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                                                  >
                                                                                    <svg
                                                                                      class="css-da6t8b"
                                                                                      style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                                      variants="[object Object]"
                                                                                      viewBox="0 0 12 10"
                                                                                    >
                                                                                      <polyline
                                                                                        points="1.5 6 4.5 9 10.5 1"
                                                                                      />
                                                                                    </svg>
                                                                                  </div>,
                                                                                  "depth": 0,
                                                                                  "enableLayoutProjection": [Function],
                                                                                  "forEachValue": [Function],
                                                                                  "getBaseTarget": [Function],
                                                                                  "getClosestVariantNode": [Function],
                                                                                  "getDefaultTransition": [Function],
                                                                                  "getInstance": [Function],
                                                                                  "getLatestValues": [Function],
                                                                                  "getLayoutId": [Function],
                                                                                  "getLayoutState": [Function],
                                                                                  "getProjectionAnimationProgress": [Function],
                                                                                  "getProps": [Function],
                                                                                  "getStaticValue": [Function],
                                                                                  "getValue": [Function],
                                                                                  "getVariant": [Function],
                                                                                  "getVariantContext": [Function],
                                                                                  "hasValue": [Function],
                                                                                  "isHoverEventsEnabled": true,
                                                                                  "isMounted": [Function],
                                                                                  "isPresenceRoot": true,
                                                                                  "isPresent": true,
                                                                                  "isStatic": false,
                                                                                  "isVisible": undefined,
                                                                                  "lockProjectionTarget": [Function],
                                                                                  "makeTargetAnimatable": [Function],
                                                                                  "manuallyAnimateOnMount": false,
                                                                                  "measureViewportBox": [Function],
                                                                                  "notifyAnimationComplete": [Function],
                                                                                  "notifyAnimationStart": [Function],
                                                                                  "notifyBeforeLayoutMeasure": [Function],
                                                                                  "notifyLayoutAnimationComplete": [Function],
                                                                                  "notifyLayoutMeasure": [Function],
                                                                                  "notifyLayoutReady": [Function],
                                                                                  "notifyLayoutUpdate": [Function],
                                                                                  "notifyRender": [Function],
                                                                                  "notifySetAxisTarget": [Function],
                                                                                  "notifyUpdate": [Function],
                                                                                  "notifyViewportBoxUpdate": [Function],
                                                                                  "onAnimationComplete": [Function],
                                                                                  "onAnimationStart": [Function],
                                                                                  "onBeforeLayoutMeasure": [Function],
                                                                                  "onLayoutAnimationComplete": [Function],
                                                                                  "onLayoutMeasure": [Function],
                                                                                  "onLayoutUpdate": [Function],
                                                                                  "onRender": [Function],
                                                                                  "onSetAxisTarget": [Function],
                                                                                  "onUpdate": [Function],
                                                                                  "onViewportBoxUpdate": [Function],
                                                                                  "path": Array [],
                                                                                  "pointTo": [Function],
                                                                                  "presence": 0,
                                                                                  "presenceId": 3,
                                                                                  "projection": Object {
                                                                                    "isEnabled": false,
                                                                                    "isTargetLocked": false,
                                                                                    "target": Object {
                                                                                      "x": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                      "y": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                    },
                                                                                    "targetFinal": Object {
                                                                                      "x": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                      "y": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                    },
                                                                                  },
                                                                                  "readValue": [Function],
                                                                                  "rebaseProjectionTarget": [Function],
                                                                                  "ref": [Function],
                                                                                  "removeValue": [Function],
                                                                                  "resetTransform": [Function],
                                                                                  "scheduleRender": [Function],
                                                                                  "scheduleUpdateLayoutProjection": [Function],
                                                                                  "setBaseTarget": [Function],
                                                                                  "setCrossfader": [Function],
                                                                                  "setProjectionTargetAxis": [Function],
                                                                                  "setProps": [Function],
                                                                                  "setStaticValue": [Function],
                                                                                  "setVisibility": [Function],
                                                                                  "snapshotViewportBox": [Function],
                                                                                  "sortNodePosition": [Function],
                                                                                  "startLayoutAnimation": [Function],
                                                                                  "stopLayoutAnimation": [Function],
                                                                                  "suspendHoverEvents": [Function],
                                                                                  "syncRender": [Function],
                                                                                  "treeType": "dom",
                                                                                  "unlockProjectionTarget": [Function],
                                                                                  "updateLayoutMeasurement": [Function],
                                                                                  "updateLayoutProjection": [Function],
                                                                                  "updatePropListeners": [Function],
                                                                                  "variantChildren": Set {
                                                                                    [Circular],
                                                                                  },
                                                                                  "withoutTransform": [Function],
                                                                                },
                                                                              ],
                                                                              "pointTo": [Function],
                                                                              "presence": 0,
                                                                              "presenceId": 3,
                                                                              "projection": Object {
                                                                                "isEnabled": false,
                                                                                "isTargetLocked": false,
                                                                                "target": Object {
                                                                                  "x": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                  "y": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                },
                                                                                "targetFinal": Object {
                                                                                  "x": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                  "y": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                },
                                                                              },
                                                                              "readValue": [Function],
                                                                              "rebaseProjectionTarget": [Function],
                                                                              "ref": [Function],
                                                                              "removeValue": [Function],
                                                                              "resetTransform": [Function],
                                                                              "scheduleRender": [Function],
                                                                              "scheduleUpdateLayoutProjection": [Function],
                                                                              "setBaseTarget": [Function],
                                                                              "setCrossfader": [Function],
                                                                              "setProjectionTargetAxis": [Function],
                                                                              "setProps": [Function],
                                                                              "setStaticValue": [Function],
                                                                              "setVisibility": [Function],
                                                                              "snapshotViewportBox": [Function],
                                                                              "sortNodePosition": [Function],
                                                                              "startLayoutAnimation": [Function],
                                                                              "stopLayoutAnimation": [Function],
                                                                              "suspendHoverEvents": [Function],
                                                                              "syncRender": [Function],
                                                                              "treeType": "dom",
                                                                              "unlockProjectionTarget": [Function],
                                                                              "updateLayoutMeasurement": [Function],
                                                                              "updateLayoutProjection": [Function],
                                                                              "updatePropListeners": [Function],
                                                                              "variantChildren": Set {},
                                                                              "withoutTransform": [Function],
                                                                            }
                                                                          }
                                                                          width="1.2em"
                                                                        />
                                                                      </ForwardRef(MotionComponent)>
                                                                    </CheckIcon>
                                                                  </div>
                                                                  <Component
                                                                    animate="checked"
                                                                    exit="unchecked"
                                                                    initial="unchecked"
                                                                    key="animation"
                                                                    style={
                                                                      Object {
                                                                        "alignItems": "center",
                                                                        "display": "flex",
                                                                        "height": "100%",
                                                                        "justifyContent": "center",
                                                                      }
                                                                    }
                                                                    variants={
                                                                      Object {
                                                                        "checked": Object {
                                                                          "scale": 1,
                                                                        },
                                                                        "unchecked": Object {
                                                                          "scale": 0.5,
                                                                        },
                                                                      }
                                                                    }
                                                                    visualElement={
                                                                      Object {
                                                                        "addChild": [Function],
                                                                        "addValue": [Function],
                                                                        "addVariantChild": [Function],
                                                                        "animationState": Object {
                                                                          "animateChanges": [Function],
                                                                          "getState": [Function],
                                                                          "isAnimated": [Function],
                                                                          "setActive": [Function],
                                                                          "setAnimateFunction": [Function],
                                                                        },
                                                                        "blockInitialAnimation": true,
                                                                        "build": [Function],
                                                                        "clearAllListeners": [Function],
                                                                        "clearState": [Function],
                                                                        "current": <div
                                                                          style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                                        >
                                                                          <svg
                                                                            class="css-da6t8b"
                                                                            style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                            variants="[object Object]"
                                                                            viewBox="0 0 12 10"
                                                                          >
                                                                            <polyline
                                                                              points="1.5 6 4.5 9 10.5 1"
                                                                            />
                                                                          </svg>
                                                                        </div>,
                                                                        "depth": 0,
                                                                        "enableLayoutProjection": [Function],
                                                                        "forEachValue": [Function],
                                                                        "getBaseTarget": [Function],
                                                                        "getClosestVariantNode": [Function],
                                                                        "getDefaultTransition": [Function],
                                                                        "getInstance": [Function],
                                                                        "getLatestValues": [Function],
                                                                        "getLayoutId": [Function],
                                                                        "getLayoutState": [Function],
                                                                        "getProjectionAnimationProgress": [Function],
                                                                        "getProps": [Function],
                                                                        "getStaticValue": [Function],
                                                                        "getValue": [Function],
                                                                        "getVariant": [Function],
                                                                        "getVariantContext": [Function],
                                                                        "hasValue": [Function],
                                                                        "isHoverEventsEnabled": true,
                                                                        "isMounted": [Function],
                                                                        "isPresenceRoot": true,
                                                                        "isPresent": true,
                                                                        "isStatic": false,
                                                                        "isVisible": undefined,
                                                                        "lockProjectionTarget": [Function],
                                                                        "makeTargetAnimatable": [Function],
                                                                        "manuallyAnimateOnMount": false,
                                                                        "measureViewportBox": [Function],
                                                                        "notifyAnimationComplete": [Function],
                                                                        "notifyAnimationStart": [Function],
                                                                        "notifyBeforeLayoutMeasure": [Function],
                                                                        "notifyLayoutAnimationComplete": [Function],
                                                                        "notifyLayoutMeasure": [Function],
                                                                        "notifyLayoutReady": [Function],
                                                                        "notifyLayoutUpdate": [Function],
                                                                        "notifyRender": [Function],
                                                                        "notifySetAxisTarget": [Function],
                                                                        "notifyUpdate": [Function],
                                                                        "notifyViewportBoxUpdate": [Function],
                                                                        "onAnimationComplete": [Function],
                                                                        "onAnimationStart": [Function],
                                                                        "onBeforeLayoutMeasure": [Function],
                                                                        "onLayoutAnimationComplete": [Function],
                                                                        "onLayoutMeasure": [Function],
                                                                        "onLayoutUpdate": [Function],
                                                                        "onRender": [Function],
                                                                        "onSetAxisTarget": [Function],
                                                                        "onUpdate": [Function],
                                                                        "onViewportBoxUpdate": [Function],
                                                                        "path": Array [],
                                                                        "pointTo": [Function],
                                                                        "presence": 0,
                                                                        "presenceId": 3,
                                                                        "projection": Object {
                                                                          "isEnabled": false,
                                                                          "isTargetLocked": false,
                                                                          "target": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                          "targetFinal": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                        },
                                                                        "readValue": [Function],
                                                                        "rebaseProjectionTarget": [Function],
                                                                        "ref": [Function],
                                                                        "removeValue": [Function],
                                                                        "resetTransform": [Function],
                                                                        "scheduleRender": [Function],
                                                                        "scheduleUpdateLayoutProjection": [Function],
                                                                        "setBaseTarget": [Function],
                                                                        "setCrossfader": [Function],
                                                                        "setProjectionTargetAxis": [Function],
                                                                        "setProps": [Function],
                                                                        "setStaticValue": [Function],
                                                                        "setVisibility": [Function],
                                                                        "snapshotViewportBox": [Function],
                                                                        "sortNodePosition": [Function],
                                                                        "startLayoutAnimation": [Function],
                                                                        "stopLayoutAnimation": [Function],
                                                                        "suspendHoverEvents": [Function],
                                                                        "syncRender": [Function],
                                                                        "treeType": "dom",
                                                                        "unlockProjectionTarget": [Function],
                                                                        "updateLayoutMeasurement": [Function],
                                                                        "updateLayoutProjection": [Function],
                                                                        "updatePropListeners": [Function],
                                                                        "variantChildren": Set {
                                                                          Object {
                                                                            "addChild": [Function],
                                                                            "addValue": [Function],
                                                                            "addVariantChild": [Function],
                                                                            "animationState": Object {
                                                                              "animateChanges": [Function],
                                                                              "getState": [Function],
                                                                              "isAnimated": [Function],
                                                                              "setActive": [Function],
                                                                              "setAnimateFunction": [Function],
                                                                            },
                                                                            "blockInitialAnimation": true,
                                                                            "build": [Function],
                                                                            "clearAllListeners": [Function],
                                                                            "clearState": [Function],
                                                                            "current": <svg
                                                                              class="css-da6t8b"
                                                                              style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                              variants="[object Object]"
                                                                              viewBox="0 0 12 10"
                                                                            >
                                                                              <polyline
                                                                                points="1.5 6 4.5 9 10.5 1"
                                                                              />
                                                                            </svg>,
                                                                            "depth": 1,
                                                                            "enableLayoutProjection": [Function],
                                                                            "forEachValue": [Function],
                                                                            "getBaseTarget": [Function],
                                                                            "getClosestVariantNode": [Function],
                                                                            "getDefaultTransition": [Function],
                                                                            "getInstance": [Function],
                                                                            "getLatestValues": [Function],
                                                                            "getLayoutId": [Function],
                                                                            "getLayoutState": [Function],
                                                                            "getProjectionAnimationProgress": [Function],
                                                                            "getProps": [Function],
                                                                            "getStaticValue": [Function],
                                                                            "getValue": [Function],
                                                                            "getVariant": [Function],
                                                                            "getVariantContext": [Function],
                                                                            "hasValue": [Function],
                                                                            "isHoverEventsEnabled": true,
                                                                            "isMounted": [Function],
                                                                            "isPresenceRoot": false,
                                                                            "isPresent": true,
                                                                            "isStatic": false,
                                                                            "isVisible": undefined,
                                                                            "lockProjectionTarget": [Function],
                                                                            "makeTargetAnimatable": [Function],
                                                                            "manuallyAnimateOnMount": false,
                                                                            "measureViewportBox": [Function],
                                                                            "notifyAnimationComplete": [Function],
                                                                            "notifyAnimationStart": [Function],
                                                                            "notifyBeforeLayoutMeasure": [Function],
                                                                            "notifyLayoutAnimationComplete": [Function],
                                                                            "notifyLayoutMeasure": [Function],
                                                                            "notifyLayoutReady": [Function],
                                                                            "notifyLayoutUpdate": [Function],
                                                                            "notifyRender": [Function],
                                                                            "notifySetAxisTarget": [Function],
                                                                            "notifyUpdate": [Function],
                                                                            "notifyViewportBoxUpdate": [Function],
                                                                            "onAnimationComplete": [Function],
                                                                            "onAnimationStart": [Function],
                                                                            "onBeforeLayoutMeasure": [Function],
                                                                            "onLayoutAnimationComplete": [Function],
                                                                            "onLayoutMeasure": [Function],
                                                                            "onLayoutUpdate": [Function],
                                                                            "onRender": [Function],
                                                                            "onSetAxisTarget": [Function],
                                                                            "onUpdate": [Function],
                                                                            "onViewportBoxUpdate": [Function],
                                                                            "path": Array [
                                                                              [Circular],
                                                                            ],
                                                                            "pointTo": [Function],
                                                                            "presence": 0,
                                                                            "presenceId": 3,
                                                                            "projection": Object {
                                                                              "isEnabled": false,
                                                                              "isTargetLocked": false,
                                                                              "target": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                              "targetFinal": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                            },
                                                                            "readValue": [Function],
                                                                            "rebaseProjectionTarget": [Function],
                                                                            "ref": [Function],
                                                                            "removeValue": [Function],
                                                                            "resetTransform": [Function],
                                                                            "scheduleRender": [Function],
                                                                            "scheduleUpdateLayoutProjection": [Function],
                                                                            "setBaseTarget": [Function],
                                                                            "setCrossfader": [Function],
                                                                            "setProjectionTargetAxis": [Function],
                                                                            "setProps": [Function],
                                                                            "setStaticValue": [Function],
                                                                            "setVisibility": [Function],
                                                                            "snapshotViewportBox": [Function],
                                                                            "sortNodePosition": [Function],
                                                                            "startLayoutAnimation": [Function],
                                                                            "stopLayoutAnimation": [Function],
                                                                            "suspendHoverEvents": [Function],
                                                                            "syncRender": [Function],
                                                                            "treeType": "dom",
                                                                            "unlockProjectionTarget": [Function],
                                                                            "updateLayoutMeasurement": [Function],
                                                                            "updateLayoutProjection": [Function],
                                                                            "updatePropListeners": [Function],
                                                                            "variantChildren": Set {},
                                                                            "withoutTransform": [Function],
                                                                          },
                                                                        },
                                                                        "withoutTransform": [Function],
                                                                      }
                                                                    }
                                                                  />
                                                                  <Component
                                                                    animate="checked"
                                                                    exit="unchecked"
                                                                    initial="unchecked"
                                                                    key="exit"
                                                                    style={
                                                                      Object {
                                                                        "alignItems": "center",
                                                                        "display": "flex",
                                                                        "height": "100%",
                                                                        "justifyContent": "center",
                                                                      }
                                                                    }
                                                                    variants={
                                                                      Object {
                                                                        "checked": Object {
                                                                          "scale": 1,
                                                                        },
                                                                        "unchecked": Object {
                                                                          "scale": 0.5,
                                                                        },
                                                                      }
                                                                    }
                                                                    visualElement={
                                                                      Object {
                                                                        "addChild": [Function],
                                                                        "addValue": [Function],
                                                                        "addVariantChild": [Function],
                                                                        "animationState": Object {
                                                                          "animateChanges": [Function],
                                                                          "getState": [Function],
                                                                          "isAnimated": [Function],
                                                                          "setActive": [Function],
                                                                          "setAnimateFunction": [Function],
                                                                        },
                                                                        "blockInitialAnimation": true,
                                                                        "build": [Function],
                                                                        "clearAllListeners": [Function],
                                                                        "clearState": [Function],
                                                                        "current": <div
                                                                          style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                                        >
                                                                          <svg
                                                                            class="css-da6t8b"
                                                                            style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                            variants="[object Object]"
                                                                            viewBox="0 0 12 10"
                                                                          >
                                                                            <polyline
                                                                              points="1.5 6 4.5 9 10.5 1"
                                                                            />
                                                                          </svg>
                                                                        </div>,
                                                                        "depth": 0,
                                                                        "enableLayoutProjection": [Function],
                                                                        "forEachValue": [Function],
                                                                        "getBaseTarget": [Function],
                                                                        "getClosestVariantNode": [Function],
                                                                        "getDefaultTransition": [Function],
                                                                        "getInstance": [Function],
                                                                        "getLatestValues": [Function],
                                                                        "getLayoutId": [Function],
                                                                        "getLayoutState": [Function],
                                                                        "getProjectionAnimationProgress": [Function],
                                                                        "getProps": [Function],
                                                                        "getStaticValue": [Function],
                                                                        "getValue": [Function],
                                                                        "getVariant": [Function],
                                                                        "getVariantContext": [Function],
                                                                        "hasValue": [Function],
                                                                        "isHoverEventsEnabled": true,
                                                                        "isMounted": [Function],
                                                                        "isPresenceRoot": true,
                                                                        "isPresent": true,
                                                                        "isStatic": false,
                                                                        "isVisible": undefined,
                                                                        "lockProjectionTarget": [Function],
                                                                        "makeTargetAnimatable": [Function],
                                                                        "manuallyAnimateOnMount": false,
                                                                        "measureViewportBox": [Function],
                                                                        "notifyAnimationComplete": [Function],
                                                                        "notifyAnimationStart": [Function],
                                                                        "notifyBeforeLayoutMeasure": [Function],
                                                                        "notifyLayoutAnimationComplete": [Function],
                                                                        "notifyLayoutMeasure": [Function],
                                                                        "notifyLayoutReady": [Function],
                                                                        "notifyLayoutUpdate": [Function],
                                                                        "notifyRender": [Function],
                                                                        "notifySetAxisTarget": [Function],
                                                                        "notifyUpdate": [Function],
                                                                        "notifyViewportBoxUpdate": [Function],
                                                                        "onAnimationComplete": [Function],
                                                                        "onAnimationStart": [Function],
                                                                        "onBeforeLayoutMeasure": [Function],
                                                                        "onLayoutAnimationComplete": [Function],
                                                                        "onLayoutMeasure": [Function],
                                                                        "onLayoutUpdate": [Function],
                                                                        "onRender": [Function],
                                                                        "onSetAxisTarget": [Function],
                                                                        "onUpdate": [Function],
                                                                        "onViewportBoxUpdate": [Function],
                                                                        "path": Array [],
                                                                        "pointTo": [Function],
                                                                        "presence": 0,
                                                                        "presenceId": 3,
                                                                        "projection": Object {
                                                                          "isEnabled": false,
                                                                          "isTargetLocked": false,
                                                                          "target": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                          "targetFinal": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                        },
                                                                        "readValue": [Function],
                                                                        "rebaseProjectionTarget": [Function],
                                                                        "ref": [Function],
                                                                        "removeValue": [Function],
                                                                        "resetTransform": [Function],
                                                                        "scheduleRender": [Function],
                                                                        "scheduleUpdateLayoutProjection": [Function],
                                                                        "setBaseTarget": [Function],
                                                                        "setCrossfader": [Function],
                                                                        "setProjectionTargetAxis": [Function],
                                                                        "setProps": [Function],
                                                                        "setStaticValue": [Function],
                                                                        "setVisibility": [Function],
                                                                        "snapshotViewportBox": [Function],
                                                                        "sortNodePosition": [Function],
                                                                        "startLayoutAnimation": [Function],
                                                                        "stopLayoutAnimation": [Function],
                                                                        "suspendHoverEvents": [Function],
                                                                        "syncRender": [Function],
                                                                        "treeType": "dom",
                                                                        "unlockProjectionTarget": [Function],
                                                                        "updateLayoutMeasurement": [Function],
                                                                        "updateLayoutProjection": [Function],
                                                                        "updatePropListeners": [Function],
                                                                        "variantChildren": Set {
                                                                          Object {
                                                                            "addChild": [Function],
                                                                            "addValue": [Function],
                                                                            "addVariantChild": [Function],
                                                                            "animationState": Object {
                                                                              "animateChanges": [Function],
                                                                              "getState": [Function],
                                                                              "isAnimated": [Function],
                                                                              "setActive": [Function],
                                                                              "setAnimateFunction": [Function],
                                                                            },
                                                                            "blockInitialAnimation": true,
                                                                            "build": [Function],
                                                                            "clearAllListeners": [Function],
                                                                            "clearState": [Function],
                                                                            "current": <svg
                                                                              class="css-da6t8b"
                                                                              style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                              variants="[object Object]"
                                                                              viewBox="0 0 12 10"
                                                                            >
                                                                              <polyline
                                                                                points="1.5 6 4.5 9 10.5 1"
                                                                              />
                                                                            </svg>,
                                                                            "depth": 1,
                                                                            "enableLayoutProjection": [Function],
                                                                            "forEachValue": [Function],
                                                                            "getBaseTarget": [Function],
                                                                            "getClosestVariantNode": [Function],
                                                                            "getDefaultTransition": [Function],
                                                                            "getInstance": [Function],
                                                                            "getLatestValues": [Function],
                                                                            "getLayoutId": [Function],
                                                                            "getLayoutState": [Function],
                                                                            "getProjectionAnimationProgress": [Function],
                                                                            "getProps": [Function],
                                                                            "getStaticValue": [Function],
                                                                            "getValue": [Function],
                                                                            "getVariant": [Function],
                                                                            "getVariantContext": [Function],
                                                                            "hasValue": [Function],
                                                                            "isHoverEventsEnabled": true,
                                                                            "isMounted": [Function],
                                                                            "isPresenceRoot": false,
                                                                            "isPresent": true,
                                                                            "isStatic": false,
                                                                            "isVisible": undefined,
                                                                            "lockProjectionTarget": [Function],
                                                                            "makeTargetAnimatable": [Function],
                                                                            "manuallyAnimateOnMount": false,
                                                                            "measureViewportBox": [Function],
                                                                            "notifyAnimationComplete": [Function],
                                                                            "notifyAnimationStart": [Function],
                                                                            "notifyBeforeLayoutMeasure": [Function],
                                                                            "notifyLayoutAnimationComplete": [Function],
                                                                            "notifyLayoutMeasure": [Function],
                                                                            "notifyLayoutReady": [Function],
                                                                            "notifyLayoutUpdate": [Function],
                                                                            "notifyRender": [Function],
                                                                            "notifySetAxisTarget": [Function],
                                                                            "notifyUpdate": [Function],
                                                                            "notifyViewportBoxUpdate": [Function],
                                                                            "onAnimationComplete": [Function],
                                                                            "onAnimationStart": [Function],
                                                                            "onBeforeLayoutMeasure": [Function],
                                                                            "onLayoutAnimationComplete": [Function],
                                                                            "onLayoutMeasure": [Function],
                                                                            "onLayoutUpdate": [Function],
                                                                            "onRender": [Function],
                                                                            "onSetAxisTarget": [Function],
                                                                            "onUpdate": [Function],
                                                                            "onViewportBoxUpdate": [Function],
                                                                            "path": Array [
                                                                              [Circular],
                                                                            ],
                                                                            "pointTo": [Function],
                                                                            "presence": 0,
                                                                            "presenceId": 3,
                                                                            "projection": Object {
                                                                              "isEnabled": false,
                                                                              "isTargetLocked": false,
                                                                              "target": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                              "targetFinal": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                            },
                                                                            "readValue": [Function],
                                                                            "rebaseProjectionTarget": [Function],
                                                                            "ref": [Function],
                                                                            "removeValue": [Function],
                                                                            "resetTransform": [Function],
                                                                            "scheduleRender": [Function],
                                                                            "scheduleUpdateLayoutProjection": [Function],
                                                                            "setBaseTarget": [Function],
                                                                            "setCrossfader": [Function],
                                                                            "setProjectionTargetAxis": [Function],
                                                                            "setProps": [Function],
                                                                            "setStaticValue": [Function],
                                                                            "setVisibility": [Function],
                                                                            "snapshotViewportBox": [Function],
                                                                            "sortNodePosition": [Function],
                                                                            "startLayoutAnimation": [Function],
                                                                            "stopLayoutAnimation": [Function],
                                                                            "suspendHoverEvents": [Function],
                                                                            "syncRender": [Function],
                                                                            "treeType": "dom",
                                                                            "unlockProjectionTarget": [Function],
                                                                            "updateLayoutMeasurement": [Function],
                                                                            "updateLayoutProjection": [Function],
                                                                            "updatePropListeners": [Function],
                                                                            "variantChildren": Set {},
                                                                            "withoutTransform": [Function],
                                                                          },
                                                                        },
                                                                        "withoutTransform": [Function],
                                                                      }
                                                                    }
                                                                  />
                                                                </ForwardRef(MotionComponent)>
                                                              </PresenceChild>
                                                            </AnimatePresence>
                                                          </CheckboxTransition>
                                                        </CheckboxIcon>
                                                      </span>
                                                    </Styled(span)>
                                                    <Styled(span)
                                                      __css={
                                                        Object {
                                                          "_disabled": Object {
                                                            "opacity": 0.4,
                                                          },
                                                          "fontSize": "md",
                                                          "marginStart": "0.5rem",
                                                          "userSelect": "none",
                                                        }
                                                      }
                                                      className="chakra-checkbox__label"
                                                      data-checked=""
                                                      onMouseDown={[Function]}
                                                      onTouchStart={[Function]}
                                                    >
                                                      <span
                                                        className="chakra-checkbox__label css-sklcna"
                                                        data-checked=""
                                                        onMouseDown={[Function]}
                                                        onTouchStart={[Function]}
                                                      >
                                                        Thu
                                                      </span>
                                                    </Styled(span)>
                                                  </label>
                                                </Styled(label)>
                                              </Checkbox>
                                            </Day>
                                            <Day
                                              day="Friday"
                                              isChecked={true}
                                              key="Friday"
                                              update={[MockFunction]}
                                            >
                                              <Checkbox
                                                fontWeight="normal"
                                                isChecked={true}
                                                onChange={[Function]}
                                              >
                                                <Styled(label)
                                                  __css={Object {}}
                                                  className="chakra-checkbox"
                                                  fontWeight="normal"
                                                >
                                                  <label
                                                    className="chakra-checkbox css-wun7cp"
                                                  >
                                                    <input
                                                      checked={true}
                                                      className="chakra-checkbox__input"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      style={
                                                        Object {
                                                          "border": "0px",
                                                          "clip": "rect(0px, 0px, 0px, 0px)",
                                                          "height": "1px",
                                                          "margin": "-1px",
                                                          "overflow": "hidden",
                                                          "padding": "0px",
                                                          "position": "absolute",
                                                          "whiteSpace": "nowrap",
                                                          "width": "1px",
                                                        }
                                                      }
                                                      type="checkbox"
                                                    />
                                                    <Styled(span)
                                                      __css={
                                                        Object {
                                                          "_checked": Object {
                                                            "_disabled": Object {
                                                              "bg": "gray.200",
                                                              "borderColor": "gray.200",
                                                              "color": "gray.500",
                                                            },
                                                            "_hover": Object {
                                                              "bg": "blue.600",
                                                              "borderColor": "blue.600",
                                                            },
                                                            "bg": "blue.500",
                                                            "borderColor": "blue.500",
                                                            "color": "white",
                                                          },
                                                          "_disabled": Object {
                                                            "bg": "gray.100",
                                                            "borderColor": "gray.100",
                                                          },
                                                          "_focus": Object {
                                                            "boxShadow": "outline",
                                                          },
                                                          "_indeterminate": Object {
                                                            "bg": "blue.500",
                                                            "borderColor": "blue.500",
                                                            "color": "white",
                                                          },
                                                          "_invalid": Object {
                                                            "borderColor": "red.500",
                                                          },
                                                          "border": "2px solid",
                                                          "borderColor": "inherit",
                                                          "borderRadius": "sm",
                                                          "color": "white",
                                                          "h": 4,
                                                          "transition": "box-shadow 250ms",
                                                          "w": 4,
                                                        }
                                                      }
                                                      aria-hidden={true}
                                                      className="chakra-checkbox__control"
                                                      data-checked=""
                                                      onMouseDown={[Function]}
                                                      onMouseEnter={[Function]}
                                                      onMouseLeave={[Function]}
                                                      onMouseUp={[Function]}
                                                    >
                                                      <span
                                                        aria-hidden={true}
                                                        className="chakra-checkbox__control css-co2d90"
                                                        data-checked=""
                                                        onMouseDown={[Function]}
                                                        onMouseEnter={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                      >
                                                        <CheckboxIcon
                                                          __css={
                                                            Object {
                                                              "color": undefined,
                                                              "fontSize": "0.625rem",
                                                              "opacity": 1,
                                                              "transform": "scale(1)",
                                                              "transition": "transform 200ms",
                                                            }
                                                          }
                                                          isChecked={true}
                                                        >
                                                          <CheckboxTransition
                                                            open={true}
                                                          >
                                                            <AnimatePresence
                                                              initial={false}
                                                            >
                                                              <PresenceChild
                                                                initial={false}
                                                                isPresent={true}
                                                                key=""
                                                                presenceAffectsLayout={true}
                                                              >
                                                                <ForwardRef(MotionComponent)
                                                                  animate="checked"
                                                                  exit="unchecked"
                                                                  initial="unchecked"
                                                                  style={
                                                                    Object {
                                                                      "alignItems": "center",
                                                                      "display": "flex",
                                                                      "height": "100%",
                                                                      "justifyContent": "center",
                                                                    }
                                                                  }
                                                                  variants={
                                                                    Object {
                                                                      "checked": Object {
                                                                        "scale": 1,
                                                                      },
                                                                      "unchecked": Object {
                                                                        "scale": 0.5,
                                                                      },
                                                                    }
                                                                  }
                                                                >
                                                                  <div
                                                                    style={
                                                                      Object {
                                                                        "alignItems": "center",
                                                                        "display": "flex",
                                                                        "height": "100%",
                                                                        "justifyContent": "center",
                                                                        "transform": "none",
                                                                      }
                                                                    }
                                                                  >
                                                                    <CheckIcon
                                                                      __css={
                                                                        Object {
                                                                          "color": undefined,
                                                                          "fontSize": "0.625rem",
                                                                          "opacity": 1,
                                                                          "transform": "scale(1)",
                                                                          "transition": "transform 200ms",
                                                                        }
                                                                      }
                                                                    >
                                                                      <ForwardRef(MotionComponent)
                                                                        __css={
                                                                          Object {
                                                                            "color": undefined,
                                                                            "fontSize": "0.625rem",
                                                                            "opacity": 1,
                                                                            "transform": "scale(1)",
                                                                            "transition": "transform 200ms",
                                                                          }
                                                                        }
                                                                        style={
                                                                          Object {
                                                                            "fill": "none",
                                                                            "stroke": "currentColor",
                                                                            "strokeDasharray": 16,
                                                                            "strokeWidth": 2,
                                                                          }
                                                                        }
                                                                        variants={
                                                                          Object {
                                                                            "checked": Object {
                                                                              "opacity": 1,
                                                                              "strokeDashoffset": 0,
                                                                              "transition": Object {
                                                                                "duration": 0.2,
                                                                              },
                                                                            },
                                                                            "unchecked": Object {
                                                                              "opacity": 0,
                                                                              "strokeDashoffset": 16,
                                                                            },
                                                                          }
                                                                        }
                                                                        viewBox="0 0 12 10"
                                                                        width="1.2em"
                                                                      >
                                                                        <Styled(svg)
                                                                          __css={
                                                                            Object {
                                                                              "color": undefined,
                                                                              "fontSize": "0.625rem",
                                                                              "opacity": 1,
                                                                              "transform": "scale(1)",
                                                                              "transition": "transform 200ms",
                                                                            }
                                                                          }
                                                                          style={
                                                                            Object {
                                                                              "fill": "none",
                                                                              "opacity": 1,
                                                                              "stroke": "currentColor",
                                                                              "strokeDasharray": 16,
                                                                              "strokeDashoffset": 0,
                                                                              "strokeWidth": 2,
                                                                            }
                                                                          }
                                                                          variants={
                                                                            Object {
                                                                              "checked": Object {
                                                                                "opacity": 1,
                                                                                "strokeDashoffset": 0,
                                                                                "transition": Object {
                                                                                  "duration": 0.2,
                                                                                },
                                                                              },
                                                                              "unchecked": Object {
                                                                                "opacity": 0,
                                                                                "strokeDashoffset": 16,
                                                                              },
                                                                            }
                                                                          }
                                                                          viewBox="0 0 12 10"
                                                                          width="1.2em"
                                                                        >
                                                                          <svg
                                                                            className="css-da6t8b"
                                                                            style={
                                                                              Object {
                                                                                "fill": "none",
                                                                                "opacity": 1,
                                                                                "stroke": "currentColor",
                                                                                "strokeDasharray": 16,
                                                                                "strokeDashoffset": 0,
                                                                                "strokeWidth": 2,
                                                                              }
                                                                            }
                                                                            variants={
                                                                              Object {
                                                                                "checked": Object {
                                                                                  "opacity": 1,
                                                                                  "strokeDashoffset": 0,
                                                                                  "transition": Object {
                                                                                    "duration": 0.2,
                                                                                  },
                                                                                },
                                                                                "unchecked": Object {
                                                                                  "opacity": 0,
                                                                                  "strokeDashoffset": 16,
                                                                                },
                                                                              }
                                                                            }
                                                                            viewBox="0 0 12 10"
                                                                          >
                                                                            <polyline
                                                                              points="1.5 6 4.5 9 10.5 1"
                                                                            />
                                                                          </svg>
                                                                        </Styled(svg)>
                                                                        <Component
                                                                          __css={
                                                                            Object {
                                                                              "color": undefined,
                                                                              "fontSize": "0.625rem",
                                                                              "opacity": 1,
                                                                              "transform": "scale(1)",
                                                                              "transition": "transform 200ms",
                                                                            }
                                                                          }
                                                                          key="animation"
                                                                          style={
                                                                            Object {
                                                                              "fill": "none",
                                                                              "stroke": "currentColor",
                                                                              "strokeDasharray": 16,
                                                                              "strokeWidth": 2,
                                                                            }
                                                                          }
                                                                          variants={
                                                                            Object {
                                                                              "checked": Object {
                                                                                "opacity": 1,
                                                                                "strokeDashoffset": 0,
                                                                                "transition": Object {
                                                                                  "duration": 0.2,
                                                                                },
                                                                              },
                                                                              "unchecked": Object {
                                                                                "opacity": 0,
                                                                                "strokeDashoffset": 16,
                                                                              },
                                                                            }
                                                                          }
                                                                          viewBox="0 0 12 10"
                                                                          visualElement={
                                                                            Object {
                                                                              "addChild": [Function],
                                                                              "addValue": [Function],
                                                                              "addVariantChild": [Function],
                                                                              "animationState": Object {
                                                                                "animateChanges": [Function],
                                                                                "getState": [Function],
                                                                                "isAnimated": [Function],
                                                                                "setActive": [Function],
                                                                                "setAnimateFunction": [Function],
                                                                              },
                                                                              "blockInitialAnimation": true,
                                                                              "build": [Function],
                                                                              "clearAllListeners": [Function],
                                                                              "clearState": [Function],
                                                                              "current": <svg
                                                                                class="css-da6t8b"
                                                                                style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                                variants="[object Object]"
                                                                                viewBox="0 0 12 10"
                                                                              >
                                                                                <polyline
                                                                                  points="1.5 6 4.5 9 10.5 1"
                                                                                />
                                                                              </svg>,
                                                                              "depth": 1,
                                                                              "enableLayoutProjection": [Function],
                                                                              "forEachValue": [Function],
                                                                              "getBaseTarget": [Function],
                                                                              "getClosestVariantNode": [Function],
                                                                              "getDefaultTransition": [Function],
                                                                              "getInstance": [Function],
                                                                              "getLatestValues": [Function],
                                                                              "getLayoutId": [Function],
                                                                              "getLayoutState": [Function],
                                                                              "getProjectionAnimationProgress": [Function],
                                                                              "getProps": [Function],
                                                                              "getStaticValue": [Function],
                                                                              "getValue": [Function],
                                                                              "getVariant": [Function],
                                                                              "getVariantContext": [Function],
                                                                              "hasValue": [Function],
                                                                              "isHoverEventsEnabled": true,
                                                                              "isMounted": [Function],
                                                                              "isPresenceRoot": false,
                                                                              "isPresent": true,
                                                                              "isStatic": false,
                                                                              "isVisible": undefined,
                                                                              "lockProjectionTarget": [Function],
                                                                              "makeTargetAnimatable": [Function],
                                                                              "manuallyAnimateOnMount": false,
                                                                              "measureViewportBox": [Function],
                                                                              "notifyAnimationComplete": [Function],
                                                                              "notifyAnimationStart": [Function],
                                                                              "notifyBeforeLayoutMeasure": [Function],
                                                                              "notifyLayoutAnimationComplete": [Function],
                                                                              "notifyLayoutMeasure": [Function],
                                                                              "notifyLayoutReady": [Function],
                                                                              "notifyLayoutUpdate": [Function],
                                                                              "notifyRender": [Function],
                                                                              "notifySetAxisTarget": [Function],
                                                                              "notifyUpdate": [Function],
                                                                              "notifyViewportBoxUpdate": [Function],
                                                                              "onAnimationComplete": [Function],
                                                                              "onAnimationStart": [Function],
                                                                              "onBeforeLayoutMeasure": [Function],
                                                                              "onLayoutAnimationComplete": [Function],
                                                                              "onLayoutMeasure": [Function],
                                                                              "onLayoutUpdate": [Function],
                                                                              "onRender": [Function],
                                                                              "onSetAxisTarget": [Function],
                                                                              "onUpdate": [Function],
                                                                              "onViewportBoxUpdate": [Function],
                                                                              "path": Array [
                                                                                Object {
                                                                                  "addChild": [Function],
                                                                                  "addValue": [Function],
                                                                                  "addVariantChild": [Function],
                                                                                  "animationState": Object {
                                                                                    "animateChanges": [Function],
                                                                                    "getState": [Function],
                                                                                    "isAnimated": [Function],
                                                                                    "setActive": [Function],
                                                                                    "setAnimateFunction": [Function],
                                                                                  },
                                                                                  "blockInitialAnimation": true,
                                                                                  "build": [Function],
                                                                                  "clearAllListeners": [Function],
                                                                                  "clearState": [Function],
                                                                                  "current": <div
                                                                                    style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                                                  >
                                                                                    <svg
                                                                                      class="css-da6t8b"
                                                                                      style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                                      variants="[object Object]"
                                                                                      viewBox="0 0 12 10"
                                                                                    >
                                                                                      <polyline
                                                                                        points="1.5 6 4.5 9 10.5 1"
                                                                                      />
                                                                                    </svg>
                                                                                  </div>,
                                                                                  "depth": 0,
                                                                                  "enableLayoutProjection": [Function],
                                                                                  "forEachValue": [Function],
                                                                                  "getBaseTarget": [Function],
                                                                                  "getClosestVariantNode": [Function],
                                                                                  "getDefaultTransition": [Function],
                                                                                  "getInstance": [Function],
                                                                                  "getLatestValues": [Function],
                                                                                  "getLayoutId": [Function],
                                                                                  "getLayoutState": [Function],
                                                                                  "getProjectionAnimationProgress": [Function],
                                                                                  "getProps": [Function],
                                                                                  "getStaticValue": [Function],
                                                                                  "getValue": [Function],
                                                                                  "getVariant": [Function],
                                                                                  "getVariantContext": [Function],
                                                                                  "hasValue": [Function],
                                                                                  "isHoverEventsEnabled": true,
                                                                                  "isMounted": [Function],
                                                                                  "isPresenceRoot": true,
                                                                                  "isPresent": true,
                                                                                  "isStatic": false,
                                                                                  "isVisible": undefined,
                                                                                  "lockProjectionTarget": [Function],
                                                                                  "makeTargetAnimatable": [Function],
                                                                                  "manuallyAnimateOnMount": false,
                                                                                  "measureViewportBox": [Function],
                                                                                  "notifyAnimationComplete": [Function],
                                                                                  "notifyAnimationStart": [Function],
                                                                                  "notifyBeforeLayoutMeasure": [Function],
                                                                                  "notifyLayoutAnimationComplete": [Function],
                                                                                  "notifyLayoutMeasure": [Function],
                                                                                  "notifyLayoutReady": [Function],
                                                                                  "notifyLayoutUpdate": [Function],
                                                                                  "notifyRender": [Function],
                                                                                  "notifySetAxisTarget": [Function],
                                                                                  "notifyUpdate": [Function],
                                                                                  "notifyViewportBoxUpdate": [Function],
                                                                                  "onAnimationComplete": [Function],
                                                                                  "onAnimationStart": [Function],
                                                                                  "onBeforeLayoutMeasure": [Function],
                                                                                  "onLayoutAnimationComplete": [Function],
                                                                                  "onLayoutMeasure": [Function],
                                                                                  "onLayoutUpdate": [Function],
                                                                                  "onRender": [Function],
                                                                                  "onSetAxisTarget": [Function],
                                                                                  "onUpdate": [Function],
                                                                                  "onViewportBoxUpdate": [Function],
                                                                                  "path": Array [],
                                                                                  "pointTo": [Function],
                                                                                  "presence": 0,
                                                                                  "presenceId": 4,
                                                                                  "projection": Object {
                                                                                    "isEnabled": false,
                                                                                    "isTargetLocked": false,
                                                                                    "target": Object {
                                                                                      "x": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                      "y": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                    },
                                                                                    "targetFinal": Object {
                                                                                      "x": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                      "y": Object {
                                                                                        "max": 1,
                                                                                        "min": 0,
                                                                                      },
                                                                                    },
                                                                                  },
                                                                                  "readValue": [Function],
                                                                                  "rebaseProjectionTarget": [Function],
                                                                                  "ref": [Function],
                                                                                  "removeValue": [Function],
                                                                                  "resetTransform": [Function],
                                                                                  "scheduleRender": [Function],
                                                                                  "scheduleUpdateLayoutProjection": [Function],
                                                                                  "setBaseTarget": [Function],
                                                                                  "setCrossfader": [Function],
                                                                                  "setProjectionTargetAxis": [Function],
                                                                                  "setProps": [Function],
                                                                                  "setStaticValue": [Function],
                                                                                  "setVisibility": [Function],
                                                                                  "snapshotViewportBox": [Function],
                                                                                  "sortNodePosition": [Function],
                                                                                  "startLayoutAnimation": [Function],
                                                                                  "stopLayoutAnimation": [Function],
                                                                                  "suspendHoverEvents": [Function],
                                                                                  "syncRender": [Function],
                                                                                  "treeType": "dom",
                                                                                  "unlockProjectionTarget": [Function],
                                                                                  "updateLayoutMeasurement": [Function],
                                                                                  "updateLayoutProjection": [Function],
                                                                                  "updatePropListeners": [Function],
                                                                                  "variantChildren": Set {
                                                                                    [Circular],
                                                                                  },
                                                                                  "withoutTransform": [Function],
                                                                                },
                                                                              ],
                                                                              "pointTo": [Function],
                                                                              "presence": 0,
                                                                              "presenceId": 4,
                                                                              "projection": Object {
                                                                                "isEnabled": false,
                                                                                "isTargetLocked": false,
                                                                                "target": Object {
                                                                                  "x": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                  "y": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                },
                                                                                "targetFinal": Object {
                                                                                  "x": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                  "y": Object {
                                                                                    "max": 1,
                                                                                    "min": 0,
                                                                                  },
                                                                                },
                                                                              },
                                                                              "readValue": [Function],
                                                                              "rebaseProjectionTarget": [Function],
                                                                              "ref": [Function],
                                                                              "removeValue": [Function],
                                                                              "resetTransform": [Function],
                                                                              "scheduleRender": [Function],
                                                                              "scheduleUpdateLayoutProjection": [Function],
                                                                              "setBaseTarget": [Function],
                                                                              "setCrossfader": [Function],
                                                                              "setProjectionTargetAxis": [Function],
                                                                              "setProps": [Function],
                                                                              "setStaticValue": [Function],
                                                                              "setVisibility": [Function],
                                                                              "snapshotViewportBox": [Function],
                                                                              "sortNodePosition": [Function],
                                                                              "startLayoutAnimation": [Function],
                                                                              "stopLayoutAnimation": [Function],
                                                                              "suspendHoverEvents": [Function],
                                                                              "syncRender": [Function],
                                                                              "treeType": "dom",
                                                                              "unlockProjectionTarget": [Function],
                                                                              "updateLayoutMeasurement": [Function],
                                                                              "updateLayoutProjection": [Function],
                                                                              "updatePropListeners": [Function],
                                                                              "variantChildren": Set {},
                                                                              "withoutTransform": [Function],
                                                                            }
                                                                          }
                                                                          width="1.2em"
                                                                        />
                                                                      </ForwardRef(MotionComponent)>
                                                                    </CheckIcon>
                                                                  </div>
                                                                  <Component
                                                                    animate="checked"
                                                                    exit="unchecked"
                                                                    initial="unchecked"
                                                                    key="animation"
                                                                    style={
                                                                      Object {
                                                                        "alignItems": "center",
                                                                        "display": "flex",
                                                                        "height": "100%",
                                                                        "justifyContent": "center",
                                                                      }
                                                                    }
                                                                    variants={
                                                                      Object {
                                                                        "checked": Object {
                                                                          "scale": 1,
                                                                        },
                                                                        "unchecked": Object {
                                                                          "scale": 0.5,
                                                                        },
                                                                      }
                                                                    }
                                                                    visualElement={
                                                                      Object {
                                                                        "addChild": [Function],
                                                                        "addValue": [Function],
                                                                        "addVariantChild": [Function],
                                                                        "animationState": Object {
                                                                          "animateChanges": [Function],
                                                                          "getState": [Function],
                                                                          "isAnimated": [Function],
                                                                          "setActive": [Function],
                                                                          "setAnimateFunction": [Function],
                                                                        },
                                                                        "blockInitialAnimation": true,
                                                                        "build": [Function],
                                                                        "clearAllListeners": [Function],
                                                                        "clearState": [Function],
                                                                        "current": <div
                                                                          style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                                        >
                                                                          <svg
                                                                            class="css-da6t8b"
                                                                            style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                            variants="[object Object]"
                                                                            viewBox="0 0 12 10"
                                                                          >
                                                                            <polyline
                                                                              points="1.5 6 4.5 9 10.5 1"
                                                                            />
                                                                          </svg>
                                                                        </div>,
                                                                        "depth": 0,
                                                                        "enableLayoutProjection": [Function],
                                                                        "forEachValue": [Function],
                                                                        "getBaseTarget": [Function],
                                                                        "getClosestVariantNode": [Function],
                                                                        "getDefaultTransition": [Function],
                                                                        "getInstance": [Function],
                                                                        "getLatestValues": [Function],
                                                                        "getLayoutId": [Function],
                                                                        "getLayoutState": [Function],
                                                                        "getProjectionAnimationProgress": [Function],
                                                                        "getProps": [Function],
                                                                        "getStaticValue": [Function],
                                                                        "getValue": [Function],
                                                                        "getVariant": [Function],
                                                                        "getVariantContext": [Function],
                                                                        "hasValue": [Function],
                                                                        "isHoverEventsEnabled": true,
                                                                        "isMounted": [Function],
                                                                        "isPresenceRoot": true,
                                                                        "isPresent": true,
                                                                        "isStatic": false,
                                                                        "isVisible": undefined,
                                                                        "lockProjectionTarget": [Function],
                                                                        "makeTargetAnimatable": [Function],
                                                                        "manuallyAnimateOnMount": false,
                                                                        "measureViewportBox": [Function],
                                                                        "notifyAnimationComplete": [Function],
                                                                        "notifyAnimationStart": [Function],
                                                                        "notifyBeforeLayoutMeasure": [Function],
                                                                        "notifyLayoutAnimationComplete": [Function],
                                                                        "notifyLayoutMeasure": [Function],
                                                                        "notifyLayoutReady": [Function],
                                                                        "notifyLayoutUpdate": [Function],
                                                                        "notifyRender": [Function],
                                                                        "notifySetAxisTarget": [Function],
                                                                        "notifyUpdate": [Function],
                                                                        "notifyViewportBoxUpdate": [Function],
                                                                        "onAnimationComplete": [Function],
                                                                        "onAnimationStart": [Function],
                                                                        "onBeforeLayoutMeasure": [Function],
                                                                        "onLayoutAnimationComplete": [Function],
                                                                        "onLayoutMeasure": [Function],
                                                                        "onLayoutUpdate": [Function],
                                                                        "onRender": [Function],
                                                                        "onSetAxisTarget": [Function],
                                                                        "onUpdate": [Function],
                                                                        "onViewportBoxUpdate": [Function],
                                                                        "path": Array [],
                                                                        "pointTo": [Function],
                                                                        "presence": 0,
                                                                        "presenceId": 4,
                                                                        "projection": Object {
                                                                          "isEnabled": false,
                                                                          "isTargetLocked": false,
                                                                          "target": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                          "targetFinal": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                        },
                                                                        "readValue": [Function],
                                                                        "rebaseProjectionTarget": [Function],
                                                                        "ref": [Function],
                                                                        "removeValue": [Function],
                                                                        "resetTransform": [Function],
                                                                        "scheduleRender": [Function],
                                                                        "scheduleUpdateLayoutProjection": [Function],
                                                                        "setBaseTarget": [Function],
                                                                        "setCrossfader": [Function],
                                                                        "setProjectionTargetAxis": [Function],
                                                                        "setProps": [Function],
                                                                        "setStaticValue": [Function],
                                                                        "setVisibility": [Function],
                                                                        "snapshotViewportBox": [Function],
                                                                        "sortNodePosition": [Function],
                                                                        "startLayoutAnimation": [Function],
                                                                        "stopLayoutAnimation": [Function],
                                                                        "suspendHoverEvents": [Function],
                                                                        "syncRender": [Function],
                                                                        "treeType": "dom",
                                                                        "unlockProjectionTarget": [Function],
                                                                        "updateLayoutMeasurement": [Function],
                                                                        "updateLayoutProjection": [Function],
                                                                        "updatePropListeners": [Function],
                                                                        "variantChildren": Set {
                                                                          Object {
                                                                            "addChild": [Function],
                                                                            "addValue": [Function],
                                                                            "addVariantChild": [Function],
                                                                            "animationState": Object {
                                                                              "animateChanges": [Function],
                                                                              "getState": [Function],
                                                                              "isAnimated": [Function],
                                                                              "setActive": [Function],
                                                                              "setAnimateFunction": [Function],
                                                                            },
                                                                            "blockInitialAnimation": true,
                                                                            "build": [Function],
                                                                            "clearAllListeners": [Function],
                                                                            "clearState": [Function],
                                                                            "current": <svg
                                                                              class="css-da6t8b"
                                                                              style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                              variants="[object Object]"
                                                                              viewBox="0 0 12 10"
                                                                            >
                                                                              <polyline
                                                                                points="1.5 6 4.5 9 10.5 1"
                                                                              />
                                                                            </svg>,
                                                                            "depth": 1,
                                                                            "enableLayoutProjection": [Function],
                                                                            "forEachValue": [Function],
                                                                            "getBaseTarget": [Function],
                                                                            "getClosestVariantNode": [Function],
                                                                            "getDefaultTransition": [Function],
                                                                            "getInstance": [Function],
                                                                            "getLatestValues": [Function],
                                                                            "getLayoutId": [Function],
                                                                            "getLayoutState": [Function],
                                                                            "getProjectionAnimationProgress": [Function],
                                                                            "getProps": [Function],
                                                                            "getStaticValue": [Function],
                                                                            "getValue": [Function],
                                                                            "getVariant": [Function],
                                                                            "getVariantContext": [Function],
                                                                            "hasValue": [Function],
                                                                            "isHoverEventsEnabled": true,
                                                                            "isMounted": [Function],
                                                                            "isPresenceRoot": false,
                                                                            "isPresent": true,
                                                                            "isStatic": false,
                                                                            "isVisible": undefined,
                                                                            "lockProjectionTarget": [Function],
                                                                            "makeTargetAnimatable": [Function],
                                                                            "manuallyAnimateOnMount": false,
                                                                            "measureViewportBox": [Function],
                                                                            "notifyAnimationComplete": [Function],
                                                                            "notifyAnimationStart": [Function],
                                                                            "notifyBeforeLayoutMeasure": [Function],
                                                                            "notifyLayoutAnimationComplete": [Function],
                                                                            "notifyLayoutMeasure": [Function],
                                                                            "notifyLayoutReady": [Function],
                                                                            "notifyLayoutUpdate": [Function],
                                                                            "notifyRender": [Function],
                                                                            "notifySetAxisTarget": [Function],
                                                                            "notifyUpdate": [Function],
                                                                            "notifyViewportBoxUpdate": [Function],
                                                                            "onAnimationComplete": [Function],
                                                                            "onAnimationStart": [Function],
                                                                            "onBeforeLayoutMeasure": [Function],
                                                                            "onLayoutAnimationComplete": [Function],
                                                                            "onLayoutMeasure": [Function],
                                                                            "onLayoutUpdate": [Function],
                                                                            "onRender": [Function],
                                                                            "onSetAxisTarget": [Function],
                                                                            "onUpdate": [Function],
                                                                            "onViewportBoxUpdate": [Function],
                                                                            "path": Array [
                                                                              [Circular],
                                                                            ],
                                                                            "pointTo": [Function],
                                                                            "presence": 0,
                                                                            "presenceId": 4,
                                                                            "projection": Object {
                                                                              "isEnabled": false,
                                                                              "isTargetLocked": false,
                                                                              "target": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                              "targetFinal": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                            },
                                                                            "readValue": [Function],
                                                                            "rebaseProjectionTarget": [Function],
                                                                            "ref": [Function],
                                                                            "removeValue": [Function],
                                                                            "resetTransform": [Function],
                                                                            "scheduleRender": [Function],
                                                                            "scheduleUpdateLayoutProjection": [Function],
                                                                            "setBaseTarget": [Function],
                                                                            "setCrossfader": [Function],
                                                                            "setProjectionTargetAxis": [Function],
                                                                            "setProps": [Function],
                                                                            "setStaticValue": [Function],
                                                                            "setVisibility": [Function],
                                                                            "snapshotViewportBox": [Function],
                                                                            "sortNodePosition": [Function],
                                                                            "startLayoutAnimation": [Function],
                                                                            "stopLayoutAnimation": [Function],
                                                                            "suspendHoverEvents": [Function],
                                                                            "syncRender": [Function],
                                                                            "treeType": "dom",
                                                                            "unlockProjectionTarget": [Function],
                                                                            "updateLayoutMeasurement": [Function],
                                                                            "updateLayoutProjection": [Function],
                                                                            "updatePropListeners": [Function],
                                                                            "variantChildren": Set {},
                                                                            "withoutTransform": [Function],
                                                                          },
                                                                        },
                                                                        "withoutTransform": [Function],
                                                                      }
                                                                    }
                                                                  />
                                                                  <Component
                                                                    animate="checked"
                                                                    exit="unchecked"
                                                                    initial="unchecked"
                                                                    key="exit"
                                                                    style={
                                                                      Object {
                                                                        "alignItems": "center",
                                                                        "display": "flex",
                                                                        "height": "100%",
                                                                        "justifyContent": "center",
                                                                      }
                                                                    }
                                                                    variants={
                                                                      Object {
                                                                        "checked": Object {
                                                                          "scale": 1,
                                                                        },
                                                                        "unchecked": Object {
                                                                          "scale": 0.5,
                                                                        },
                                                                      }
                                                                    }
                                                                    visualElement={
                                                                      Object {
                                                                        "addChild": [Function],
                                                                        "addValue": [Function],
                                                                        "addVariantChild": [Function],
                                                                        "animationState": Object {
                                                                          "animateChanges": [Function],
                                                                          "getState": [Function],
                                                                          "isAnimated": [Function],
                                                                          "setActive": [Function],
                                                                          "setAnimateFunction": [Function],
                                                                        },
                                                                        "blockInitialAnimation": true,
                                                                        "build": [Function],
                                                                        "clearAllListeners": [Function],
                                                                        "clearState": [Function],
                                                                        "current": <div
                                                                          style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                                        >
                                                                          <svg
                                                                            class="css-da6t8b"
                                                                            style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                            variants="[object Object]"
                                                                            viewBox="0 0 12 10"
                                                                          >
                                                                            <polyline
                                                                              points="1.5 6 4.5 9 10.5 1"
                                                                            />
                                                                          </svg>
                                                                        </div>,
                                                                        "depth": 0,
                                                                        "enableLayoutProjection": [Function],
                                                                        "forEachValue": [Function],
                                                                        "getBaseTarget": [Function],
                                                                        "getClosestVariantNode": [Function],
                                                                        "getDefaultTransition": [Function],
                                                                        "getInstance": [Function],
                                                                        "getLatestValues": [Function],
                                                                        "getLayoutId": [Function],
                                                                        "getLayoutState": [Function],
                                                                        "getProjectionAnimationProgress": [Function],
                                                                        "getProps": [Function],
                                                                        "getStaticValue": [Function],
                                                                        "getValue": [Function],
                                                                        "getVariant": [Function],
                                                                        "getVariantContext": [Function],
                                                                        "hasValue": [Function],
                                                                        "isHoverEventsEnabled": true,
                                                                        "isMounted": [Function],
                                                                        "isPresenceRoot": true,
                                                                        "isPresent": true,
                                                                        "isStatic": false,
                                                                        "isVisible": undefined,
                                                                        "lockProjectionTarget": [Function],
                                                                        "makeTargetAnimatable": [Function],
                                                                        "manuallyAnimateOnMount": false,
                                                                        "measureViewportBox": [Function],
                                                                        "notifyAnimationComplete": [Function],
                                                                        "notifyAnimationStart": [Function],
                                                                        "notifyBeforeLayoutMeasure": [Function],
                                                                        "notifyLayoutAnimationComplete": [Function],
                                                                        "notifyLayoutMeasure": [Function],
                                                                        "notifyLayoutReady": [Function],
                                                                        "notifyLayoutUpdate": [Function],
                                                                        "notifyRender": [Function],
                                                                        "notifySetAxisTarget": [Function],
                                                                        "notifyUpdate": [Function],
                                                                        "notifyViewportBoxUpdate": [Function],
                                                                        "onAnimationComplete": [Function],
                                                                        "onAnimationStart": [Function],
                                                                        "onBeforeLayoutMeasure": [Function],
                                                                        "onLayoutAnimationComplete": [Function],
                                                                        "onLayoutMeasure": [Function],
                                                                        "onLayoutUpdate": [Function],
                                                                        "onRender": [Function],
                                                                        "onSetAxisTarget": [Function],
                                                                        "onUpdate": [Function],
                                                                        "onViewportBoxUpdate": [Function],
                                                                        "path": Array [],
                                                                        "pointTo": [Function],
                                                                        "presence": 0,
                                                                        "presenceId": 4,
                                                                        "projection": Object {
                                                                          "isEnabled": false,
                                                                          "isTargetLocked": false,
                                                                          "target": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                          "targetFinal": Object {
                                                                            "x": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                            "y": Object {
                                                                              "max": 1,
                                                                              "min": 0,
                                                                            },
                                                                          },
                                                                        },
                                                                        "readValue": [Function],
                                                                        "rebaseProjectionTarget": [Function],
                                                                        "ref": [Function],
                                                                        "removeValue": [Function],
                                                                        "resetTransform": [Function],
                                                                        "scheduleRender": [Function],
                                                                        "scheduleUpdateLayoutProjection": [Function],
                                                                        "setBaseTarget": [Function],
                                                                        "setCrossfader": [Function],
                                                                        "setProjectionTargetAxis": [Function],
                                                                        "setProps": [Function],
                                                                        "setStaticValue": [Function],
                                                                        "setVisibility": [Function],
                                                                        "snapshotViewportBox": [Function],
                                                                        "sortNodePosition": [Function],
                                                                        "startLayoutAnimation": [Function],
                                                                        "stopLayoutAnimation": [Function],
                                                                        "suspendHoverEvents": [Function],
                                                                        "syncRender": [Function],
                                                                        "treeType": "dom",
                                                                        "unlockProjectionTarget": [Function],
                                                                        "updateLayoutMeasurement": [Function],
                                                                        "updateLayoutProjection": [Function],
                                                                        "updatePropListeners": [Function],
                                                                        "variantChildren": Set {
                                                                          Object {
                                                                            "addChild": [Function],
                                                                            "addValue": [Function],
                                                                            "addVariantChild": [Function],
                                                                            "animationState": Object {
                                                                              "animateChanges": [Function],
                                                                              "getState": [Function],
                                                                              "isAnimated": [Function],
                                                                              "setActive": [Function],
                                                                              "setAnimateFunction": [Function],
                                                                            },
                                                                            "blockInitialAnimation": true,
                                                                            "build": [Function],
                                                                            "clearAllListeners": [Function],
                                                                            "clearState": [Function],
                                                                            "current": <svg
                                                                              class="css-da6t8b"
                                                                              style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                                              variants="[object Object]"
                                                                              viewBox="0 0 12 10"
                                                                            >
                                                                              <polyline
                                                                                points="1.5 6 4.5 9 10.5 1"
                                                                              />
                                                                            </svg>,
                                                                            "depth": 1,
                                                                            "enableLayoutProjection": [Function],
                                                                            "forEachValue": [Function],
                                                                            "getBaseTarget": [Function],
                                                                            "getClosestVariantNode": [Function],
                                                                            "getDefaultTransition": [Function],
                                                                            "getInstance": [Function],
                                                                            "getLatestValues": [Function],
                                                                            "getLayoutId": [Function],
                                                                            "getLayoutState": [Function],
                                                                            "getProjectionAnimationProgress": [Function],
                                                                            "getProps": [Function],
                                                                            "getStaticValue": [Function],
                                                                            "getValue": [Function],
                                                                            "getVariant": [Function],
                                                                            "getVariantContext": [Function],
                                                                            "hasValue": [Function],
                                                                            "isHoverEventsEnabled": true,
                                                                            "isMounted": [Function],
                                                                            "isPresenceRoot": false,
                                                                            "isPresent": true,
                                                                            "isStatic": false,
                                                                            "isVisible": undefined,
                                                                            "lockProjectionTarget": [Function],
                                                                            "makeTargetAnimatable": [Function],
                                                                            "manuallyAnimateOnMount": false,
                                                                            "measureViewportBox": [Function],
                                                                            "notifyAnimationComplete": [Function],
                                                                            "notifyAnimationStart": [Function],
                                                                            "notifyBeforeLayoutMeasure": [Function],
                                                                            "notifyLayoutAnimationComplete": [Function],
                                                                            "notifyLayoutMeasure": [Function],
                                                                            "notifyLayoutReady": [Function],
                                                                            "notifyLayoutUpdate": [Function],
                                                                            "notifyRender": [Function],
                                                                            "notifySetAxisTarget": [Function],
                                                                            "notifyUpdate": [Function],
                                                                            "notifyViewportBoxUpdate": [Function],
                                                                            "onAnimationComplete": [Function],
                                                                            "onAnimationStart": [Function],
                                                                            "onBeforeLayoutMeasure": [Function],
                                                                            "onLayoutAnimationComplete": [Function],
                                                                            "onLayoutMeasure": [Function],
                                                                            "onLayoutUpdate": [Function],
                                                                            "onRender": [Function],
                                                                            "onSetAxisTarget": [Function],
                                                                            "onUpdate": [Function],
                                                                            "onViewportBoxUpdate": [Function],
                                                                            "path": Array [
                                                                              [Circular],
                                                                            ],
                                                                            "pointTo": [Function],
                                                                            "presence": 0,
                                                                            "presenceId": 4,
                                                                            "projection": Object {
                                                                              "isEnabled": false,
                                                                              "isTargetLocked": false,
                                                                              "target": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                              "targetFinal": Object {
                                                                                "x": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                                "y": Object {
                                                                                  "max": 1,
                                                                                  "min": 0,
                                                                                },
                                                                              },
                                                                            },
                                                                            "readValue": [Function],
                                                                            "rebaseProjectionTarget": [Function],
                                                                            "ref": [Function],
                                                                            "removeValue": [Function],
                                                                            "resetTransform": [Function],
                                                                            "scheduleRender": [Function],
                                                                            "scheduleUpdateLayoutProjection": [Function],
                                                                            "setBaseTarget": [Function],
                                                                            "setCrossfader": [Function],
                                                                            "setProjectionTargetAxis": [Function],
                                                                            "setProps": [Function],
                                                                            "setStaticValue": [Function],
                                                                            "setVisibility": [Function],
                                                                            "snapshotViewportBox": [Function],
                                                                            "sortNodePosition": [Function],
                                                                            "startLayoutAnimation": [Function],
                                                                            "stopLayoutAnimation": [Function],
                                                                            "suspendHoverEvents": [Function],
                                                                            "syncRender": [Function],
                                                                            "treeType": "dom",
                                                                            "unlockProjectionTarget": [Function],
                                                                            "updateLayoutMeasurement": [Function],
                                                                            "updateLayoutProjection": [Function],
                                                                            "updatePropListeners": [Function],
                                                                            "variantChildren": Set {},
                                                                            "withoutTransform": [Function],
                                                                          },
                                                                        },
                                                                        "withoutTransform": [Function],
                                                                      }
                                                                    }
                                                                  />
                                                                </ForwardRef(MotionComponent)>
                                                              </PresenceChild>
                                                            </AnimatePresence>
                                                          </CheckboxTransition>
                                                        </CheckboxIcon>
                                                      </span>
                                                    </Styled(span)>
                                                    <Styled(span)
                                                      __css={
                                                        Object {
                                                          "_disabled": Object {
                                                            "opacity": 0.4,
                                                          },
                                                          "fontSize": "md",
                                                          "marginStart": "0.5rem",
                                                          "userSelect": "none",
                                                        }
                                                      }
                                                      className="chakra-checkbox__label"
                                                      data-checked=""
                                                      onMouseDown={[Function]}
                                                      onTouchStart={[Function]}
                                                    >
                                                      <span
                                                        className="chakra-checkbox__label css-sklcna"
                                                        data-checked=""
                                                        onMouseDown={[Function]}
                                                        onTouchStart={[Function]}
                                                      >
                                                        Fri
                                                      </span>
                                                    </Styled(span)>
                                                  </label>
                                                </Styled(label)>
                                              </Checkbox>
                                            </Day>
                                            <Day
                                              day="Saturday"
                                              isChecked={false}
                                              key="Saturday"
                                              update={[MockFunction]}
                                            >
                                              <Checkbox
                                                fontWeight="normal"
                                                isChecked={false}
                                                onChange={[Function]}
                                              >
                                                <Styled(label)
                                                  __css={Object {}}
                                                  className="chakra-checkbox"
                                                  fontWeight="normal"
                                                >
                                                  <label
                                                    className="chakra-checkbox css-wun7cp"
                                                  >
                                                    <input
                                                      checked={false}
                                                      className="chakra-checkbox__input"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      style={
                                                        Object {
                                                          "border": "0px",
                                                          "clip": "rect(0px, 0px, 0px, 0px)",
                                                          "height": "1px",
                                                          "margin": "-1px",
                                                          "overflow": "hidden",
                                                          "padding": "0px",
                                                          "position": "absolute",
                                                          "whiteSpace": "nowrap",
                                                          "width": "1px",
                                                        }
                                                      }
                                                      type="checkbox"
                                                    />
                                                    <Styled(span)
                                                      __css={
                                                        Object {
                                                          "_checked": Object {
                                                            "_disabled": Object {
                                                              "bg": "gray.200",
                                                              "borderColor": "gray.200",
                                                              "color": "gray.500",
                                                            },
                                                            "_hover": Object {
                                                              "bg": "blue.600",
                                                              "borderColor": "blue.600",
                                                            },
                                                            "bg": "blue.500",
                                                            "borderColor": "blue.500",
                                                            "color": "white",
                                                          },
                                                          "_disabled": Object {
                                                            "bg": "gray.100",
                                                            "borderColor": "gray.100",
                                                          },
                                                          "_focus": Object {
                                                            "boxShadow": "outline",
                                                          },
                                                          "_indeterminate": Object {
                                                            "bg": "blue.500",
                                                            "borderColor": "blue.500",
                                                            "color": "white",
                                                          },
                                                          "_invalid": Object {
                                                            "borderColor": "red.500",
                                                          },
                                                          "border": "2px solid",
                                                          "borderColor": "inherit",
                                                          "borderRadius": "sm",
                                                          "color": "white",
                                                          "h": 4,
                                                          "transition": "box-shadow 250ms",
                                                          "w": 4,
                                                        }
                                                      }
                                                      aria-hidden={true}
                                                      className="chakra-checkbox__control"
                                                      onMouseDown={[Function]}
                                                      onMouseEnter={[Function]}
                                                      onMouseLeave={[Function]}
                                                      onMouseUp={[Function]}
                                                    >
                                                      <span
                                                        aria-hidden={true}
                                                        className="chakra-checkbox__control css-co2d90"
                                                        onMouseDown={[Function]}
                                                        onMouseEnter={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                      >
                                                        <CheckboxIcon
                                                          __css={
                                                            Object {
                                                              "color": undefined,
                                                              "fontSize": "0.625rem",
                                                              "opacity": 0,
                                                              "transform": "scale(0.95)",
                                                              "transition": "transform 200ms",
                                                            }
                                                          }
                                                          isChecked={false}
                                                        >
                                                          <CheckboxTransition>
                                                            <AnimatePresence
                                                              initial={false}
                                                            />
                                                          </CheckboxTransition>
                                                        </CheckboxIcon>
                                                      </span>
                                                    </Styled(span)>
                                                    <Styled(span)
                                                      __css={
                                                        Object {
                                                          "_disabled": Object {
                                                            "opacity": 0.4,
                                                          },
                                                          "fontSize": "md",
                                                          "marginStart": "0.5rem",
                                                          "userSelect": "none",
                                                        }
                                                      }
                                                      className="chakra-checkbox__label"
                                                      onMouseDown={[Function]}
                                                      onTouchStart={[Function]}
                                                    >
                                                      <span
                                                        className="chakra-checkbox__label css-sklcna"
                                                        onMouseDown={[Function]}
                                                        onTouchStart={[Function]}
                                                      >
                                                        Sat
                                                      </span>
                                                    </Styled(span)>
                                                  </label>
                                                </Styled(label)>
                                              </Checkbox>
                                            </Day>
                                            <Day
                                              day="Sunday"
                                              isChecked={false}
                                              key="Sunday"
                                              update={[MockFunction]}
                                            >
                                              <Checkbox
                                                fontWeight="normal"
                                                isChecked={false}
                                                onChange={[Function]}
                                              >
                                                <Styled(label)
                                                  __css={Object {}}
                                                  className="chakra-checkbox"
                                                  fontWeight="normal"
                                                >
                                                  <label
                                                    className="chakra-checkbox css-wun7cp"
                                                  >
                                                    <input
                                                      checked={false}
                                                      className="chakra-checkbox__input"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      style={
                                                        Object {
                                                          "border": "0px",
                                                          "clip": "rect(0px, 0px, 0px, 0px)",
                                                          "height": "1px",
                                                          "margin": "-1px",
                                                          "overflow": "hidden",
                                                          "padding": "0px",
                                                          "position": "absolute",
                                                          "whiteSpace": "nowrap",
                                                          "width": "1px",
                                                        }
                                                      }
                                                      type="checkbox"
                                                    />
                                                    <Styled(span)
                                                      __css={
                                                        Object {
                                                          "_checked": Object {
                                                            "_disabled": Object {
                                                              "bg": "gray.200",
                                                              "borderColor": "gray.200",
                                                              "color": "gray.500",
                                                            },
                                                            "_hover": Object {
                                                              "bg": "blue.600",
                                                              "borderColor": "blue.600",
                                                            },
                                                            "bg": "blue.500",
                                                            "borderColor": "blue.500",
                                                            "color": "white",
                                                          },
                                                          "_disabled": Object {
                                                            "bg": "gray.100",
                                                            "borderColor": "gray.100",
                                                          },
                                                          "_focus": Object {
                                                            "boxShadow": "outline",
                                                          },
                                                          "_indeterminate": Object {
                                                            "bg": "blue.500",
                                                            "borderColor": "blue.500",
                                                            "color": "white",
                                                          },
                                                          "_invalid": Object {
                                                            "borderColor": "red.500",
                                                          },
                                                          "border": "2px solid",
                                                          "borderColor": "inherit",
                                                          "borderRadius": "sm",
                                                          "color": "white",
                                                          "h": 4,
                                                          "transition": "box-shadow 250ms",
                                                          "w": 4,
                                                        }
                                                      }
                                                      aria-hidden={true}
                                                      className="chakra-checkbox__control"
                                                      onMouseDown={[Function]}
                                                      onMouseEnter={[Function]}
                                                      onMouseLeave={[Function]}
                                                      onMouseUp={[Function]}
                                                    >
                                                      <span
                                                        aria-hidden={true}
                                                        className="chakra-checkbox__control css-co2d90"
                                                        onMouseDown={[Function]}
                                                        onMouseEnter={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                      >
                                                        <CheckboxIcon
                                                          __css={
                                                            Object {
                                                              "color": undefined,
                                                              "fontSize": "0.625rem",
                                                              "opacity": 0,
                                                              "transform": "scale(0.95)",
                                                              "transition": "transform 200ms",
                                                            }
                                                          }
                                                          isChecked={false}
                                                        >
                                                          <CheckboxTransition>
                                                            <AnimatePresence
                                                              initial={false}
                                                            />
                                                          </CheckboxTransition>
                                                        </CheckboxIcon>
                                                      </span>
                                                    </Styled(span)>
                                                    <Styled(span)
                                                      __css={
                                                        Object {
                                                          "_disabled": Object {
                                                            "opacity": 0.4,
                                                          },
                                                          "fontSize": "md",
                                                          "marginStart": "0.5rem",
                                                          "userSelect": "none",
                                                        }
                                                      }
                                                      className="chakra-checkbox__label"
                                                      onMouseDown={[Function]}
                                                      onTouchStart={[Function]}
                                                    >
                                                      <span
                                                        className="chakra-checkbox__label css-sklcna"
                                                        onMouseDown={[Function]}
                                                        onTouchStart={[Function]}
                                                      >
                                                        Sun
                                                      </span>
                                                    </Styled(span)>
                                                  </label>
                                                </Styled(label)>
                                              </Checkbox>
                                            </Day>
                                          </div>
                                        </Styled(div)>
                                      </Grid>
                                    </SimpleGrid>
                                  </div>
                                </Styled(div)>
                              </FormControl>
                              <Memo(MinutesSeconds)
                                key=".1"
                                label="Frequency"
                                onChange={[Function]}
                                seconds={900}
                              >
                                <FormControl
                                  isDisabled={false}
                                  isInvalid={false}
                                >
                                  <Styled(div)
                                    __css={
                                      Object {
                                        "position": "relative",
                                        "width": "100%",
                                      }
                                    }
                                    className="chakra-form-control"
                                    role="group"
                                  >
                                    <div
                                      className="chakra-form-control css-1kxonj9"
                                      role="group"
                                    >
                                      <FormLabel
                                        htmlFor="00000000-0000-0000-0000-000000000000"
                                      >
                                        <Styled(label)
                                          __css={
                                            Object {
                                              "_disabled": Object {
                                                "opacity": 0.4,
                                              },
                                              "display": "block",
                                              "fontSize": "md",
                                              "fontWeight": "medium",
                                              "marginEnd": 3,
                                              "mb": 2,
                                              "opacity": 1,
                                              "textAlign": "start",
                                              "transition": "all 0.2s",
                                            }
                                          }
                                          className="chakra-form__label"
                                          htmlFor="00000000-0000-0000-0000-000000000000"
                                          id="field-3-label"
                                        >
                                          <label
                                            className="chakra-form__label css-1qqx8g3"
                                            htmlFor="00000000-0000-0000-0000-000000000000"
                                            id="field-3-label"
                                          >
                                            Frequency
                                          </label>
                                        </Styled(label)>
                                      </FormLabel>
                                      <ForwardRef
                                        id="00000000-0000-0000-0000-000000000000"
                                        isInvalid={false}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        placeholder=""
                                        type="text"
                                        units="HH:mm:ss"
                                        value="00:15:00"
                                      >
                                        <InputGroup>
                                          <Styled(div)
                                            __css={
                                              Object {
                                                "display": "flex",
                                                "position": "relative",
                                                "width": "100%",
                                              }
                                            }
                                            className="chakra-input__group"
                                          >
                                            <div
                                              className="chakra-input__group css-4302v8"
                                            >
                                              <Input
                                                id="00000000-0000-0000-0000-000000000000"
                                                isInvalid={false}
                                                key=".0"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                paddingRight={10}
                                                placeholder=""
                                                type="text"
                                                value="00:15:00"
                                              >
                                                <Styled(input)
                                                  __css={
                                                    Object {
                                                      "_disabled": Object {
                                                        "cursor": "not-allowed",
                                                        "opacity": 0.4,
                                                      },
                                                      "_focus": Object {
                                                        "borderColor": "#3182ce",
                                                        "boxShadow": "0 0 0 1px #3182ce",
                                                        "zIndex": 1,
                                                      },
                                                      "_hover": Object {
                                                        "borderColor": "gray.300",
                                                      },
                                                      "_invalid": Object {
                                                        "borderColor": "#E53E3E",
                                                        "boxShadow": "0 0 0 1px #E53E3E",
                                                      },
                                                      "_readOnly": Object {
                                                        "boxShadow": "none !important",
                                                        "userSelect": "all",
                                                      },
                                                      "appearance": "none",
                                                      "bg": "inherit",
                                                      "border": "1px solid",
                                                      "borderColor": "inherit",
                                                      "borderRadius": "md",
                                                      "fontSize": "md",
                                                      "h": 10,
                                                      "minWidth": 0,
                                                      "outline": 0,
                                                      "position": "relative",
                                                      "px": 4,
                                                      "transition": "all 0.2s",
                                                      "width": "100%",
                                                    }
                                                  }
                                                  className="chakra-input"
                                                  disabled={false}
                                                  id="00000000-0000-0000-0000-000000000000"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  paddingRight={10}
                                                  placeholder=""
                                                  readOnly={false}
                                                  required={false}
                                                  type="text"
                                                  value="00:15:00"
                                                >
                                                  <input
                                                    className="chakra-input css-1hmrg96"
                                                    disabled={false}
                                                    id="00000000-0000-0000-0000-000000000000"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onFocus={[Function]}
                                                    placeholder=""
                                                    readOnly={false}
                                                    required={false}
                                                    type="text"
                                                    value="00:15:00"
                                                  />
                                                </Styled(input)>
                                              </Input>
                                              <InputRightElement
                                                color="gray.400"
                                                key=".1"
                                                mr={2}
                                                userSelect="none"
                                                width="unset"
                                              >
                                                <InputElement
                                                  className="chakra-input__right-element"
                                                  color="gray.400"
                                                  mr={2}
                                                  placement="right"
                                                  userSelect="none"
                                                  width="unset"
                                                >
                                                  <Styled(div)
                                                    __css={
                                                      Object {
                                                        "fontSize": "md",
                                                        "height": 10,
                                                        "paddingX": undefined,
                                                        "right": "0",
                                                        "width": 10,
                                                      }
                                                    }
                                                    className="chakra-input__right-element"
                                                    color="gray.400"
                                                    mr={2}
                                                    userSelect="none"
                                                    width="unset"
                                                  >
                                                    <div
                                                      className="chakra-input__right-element css-15qe6bf"
                                                    >
                                                      HH:mm:ss
                                                    </div>
                                                  </Styled(div)>
                                                </InputElement>
                                              </InputRightElement>
                                            </div>
                                          </Styled(div)>
                                        </InputGroup>
                                      </ForwardRef>
                                    </div>
                                  </Styled(div)>
                                </FormControl>
                              </Memo(MinutesSeconds)>
                              <Memo(TimePicker)
                                key=".2"
                                label="Start time"
                                onChange={[Function]}
                                value={28800}
                              >
                                <FormControl
                                  isDisabled={false}
                                  isInvalid={false}
                                >
                                  <Styled(div)
                                    __css={
                                      Object {
                                        "position": "relative",
                                        "width": "100%",
                                      }
                                    }
                                    className="chakra-form-control"
                                    role="group"
                                  >
                                    <div
                                      className="chakra-form-control css-1kxonj9"
                                      role="group"
                                    >
                                      <FormLabel
                                        htmlFor="00000000-0000-0000-0000-000000000000"
                                      >
                                        <Styled(label)
                                          __css={
                                            Object {
                                              "_disabled": Object {
                                                "opacity": 0.4,
                                              },
                                              "display": "block",
                                              "fontSize": "md",
                                              "fontWeight": "medium",
                                              "marginEnd": 3,
                                              "mb": 2,
                                              "opacity": 1,
                                              "textAlign": "start",
                                              "transition": "all 0.2s",
                                            }
                                          }
                                          className="chakra-form__label"
                                          htmlFor="00000000-0000-0000-0000-000000000000"
                                          id="field-4-label"
                                        >
                                          <label
                                            className="chakra-form__label css-1qqx8g3"
                                            htmlFor="00000000-0000-0000-0000-000000000000"
                                            id="field-4-label"
                                          >
                                            Start time
                                          </label>
                                        </Styled(label)>
                                      </FormLabel>
                                      <ForwardRef
                                        id="00000000-0000-0000-0000-000000000000"
                                        isInvalid={false}
                                        onChange={[Function]}
                                        units="HH:mm"
                                        value="08:00"
                                      >
                                        <InputGroup>
                                          <Styled(div)
                                            __css={
                                              Object {
                                                "display": "flex",
                                                "position": "relative",
                                                "width": "100%",
                                              }
                                            }
                                            className="chakra-input__group"
                                          >
                                            <div
                                              className="chakra-input__group css-4302v8"
                                            >
                                              <Input
                                                id="00000000-0000-0000-0000-000000000000"
                                                isInvalid={false}
                                                key=".0"
                                                onChange={[Function]}
                                                paddingRight={10}
                                                value="08:00"
                                              >
                                                <Styled(input)
                                                  __css={
                                                    Object {
                                                      "_disabled": Object {
                                                        "cursor": "not-allowed",
                                                        "opacity": 0.4,
                                                      },
                                                      "_focus": Object {
                                                        "borderColor": "#3182ce",
                                                        "boxShadow": "0 0 0 1px #3182ce",
                                                        "zIndex": 1,
                                                      },
                                                      "_hover": Object {
                                                        "borderColor": "gray.300",
                                                      },
                                                      "_invalid": Object {
                                                        "borderColor": "#E53E3E",
                                                        "boxShadow": "0 0 0 1px #E53E3E",
                                                      },
                                                      "_readOnly": Object {
                                                        "boxShadow": "none !important",
                                                        "userSelect": "all",
                                                      },
                                                      "appearance": "none",
                                                      "bg": "inherit",
                                                      "border": "1px solid",
                                                      "borderColor": "inherit",
                                                      "borderRadius": "md",
                                                      "fontSize": "md",
                                                      "h": 10,
                                                      "minWidth": 0,
                                                      "outline": 0,
                                                      "position": "relative",
                                                      "px": 4,
                                                      "transition": "all 0.2s",
                                                      "width": "100%",
                                                    }
                                                  }
                                                  className="chakra-input"
                                                  disabled={false}
                                                  id="00000000-0000-0000-0000-000000000000"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  paddingRight={10}
                                                  readOnly={false}
                                                  required={false}
                                                  value="08:00"
                                                >
                                                  <input
                                                    className="chakra-input css-1hmrg96"
                                                    disabled={false}
                                                    id="00000000-0000-0000-0000-000000000000"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onFocus={[Function]}
                                                    readOnly={false}
                                                    required={false}
                                                    value="08:00"
                                                  />
                                                </Styled(input)>
                                              </Input>
                                              <InputRightElement
                                                color="gray.400"
                                                key=".1"
                                                mr={2}
                                                userSelect="none"
                                                width="unset"
                                              >
                                                <InputElement
                                                  className="chakra-input__right-element"
                                                  color="gray.400"
                                                  mr={2}
                                                  placement="right"
                                                  userSelect="none"
                                                  width="unset"
                                                >
                                                  <Styled(div)
                                                    __css={
                                                      Object {
                                                        "fontSize": "md",
                                                        "height": 10,
                                                        "paddingX": undefined,
                                                        "right": "0",
                                                        "width": 10,
                                                      }
                                                    }
                                                    className="chakra-input__right-element"
                                                    color="gray.400"
                                                    mr={2}
                                                    userSelect="none"
                                                    width="unset"
                                                  >
                                                    <div
                                                      className="chakra-input__right-element css-15qe6bf"
                                                    >
                                                      HH:mm
                                                    </div>
                                                  </Styled(div)>
                                                </InputElement>
                                              </InputRightElement>
                                            </div>
                                          </Styled(div)>
                                        </InputGroup>
                                      </ForwardRef>
                                    </div>
                                  </Styled(div)>
                                </FormControl>
                              </Memo(TimePicker)>
                              <Memo(TimePicker)
                                key=".3"
                                label="End time"
                                onChange={[Function]}
                                value={57600}
                              >
                                <FormControl
                                  isDisabled={false}
                                  isInvalid={false}
                                >
                                  <Styled(div)
                                    __css={
                                      Object {
                                        "position": "relative",
                                        "width": "100%",
                                      }
                                    }
                                    className="chakra-form-control"
                                    role="group"
                                  >
                                    <div
                                      className="chakra-form-control css-1kxonj9"
                                      role="group"
                                    >
                                      <FormLabel
                                        htmlFor="00000000-0000-0000-0000-000000000000"
                                      >
                                        <Styled(label)
                                          __css={
                                            Object {
                                              "_disabled": Object {
                                                "opacity": 0.4,
                                              },
                                              "display": "block",
                                              "fontSize": "md",
                                              "fontWeight": "medium",
                                              "marginEnd": 3,
                                              "mb": 2,
                                              "opacity": 1,
                                              "textAlign": "start",
                                              "transition": "all 0.2s",
                                            }
                                          }
                                          className="chakra-form__label"
                                          htmlFor="00000000-0000-0000-0000-000000000000"
                                          id="field-5-label"
                                        >
                                          <label
                                            className="chakra-form__label css-1qqx8g3"
                                            htmlFor="00000000-0000-0000-0000-000000000000"
                                            id="field-5-label"
                                          >
                                            End time
                                          </label>
                                        </Styled(label)>
                                      </FormLabel>
                                      <ForwardRef
                                        id="00000000-0000-0000-0000-000000000000"
                                        isInvalid={false}
                                        onChange={[Function]}
                                        units="HH:mm"
                                        value="16:00"
                                      >
                                        <InputGroup>
                                          <Styled(div)
                                            __css={
                                              Object {
                                                "display": "flex",
                                                "position": "relative",
                                                "width": "100%",
                                              }
                                            }
                                            className="chakra-input__group"
                                          >
                                            <div
                                              className="chakra-input__group css-4302v8"
                                            >
                                              <Input
                                                id="00000000-0000-0000-0000-000000000000"
                                                isInvalid={false}
                                                key=".0"
                                                onChange={[Function]}
                                                paddingRight={10}
                                                value="16:00"
                                              >
                                                <Styled(input)
                                                  __css={
                                                    Object {
                                                      "_disabled": Object {
                                                        "cursor": "not-allowed",
                                                        "opacity": 0.4,
                                                      },
                                                      "_focus": Object {
                                                        "borderColor": "#3182ce",
                                                        "boxShadow": "0 0 0 1px #3182ce",
                                                        "zIndex": 1,
                                                      },
                                                      "_hover": Object {
                                                        "borderColor": "gray.300",
                                                      },
                                                      "_invalid": Object {
                                                        "borderColor": "#E53E3E",
                                                        "boxShadow": "0 0 0 1px #E53E3E",
                                                      },
                                                      "_readOnly": Object {
                                                        "boxShadow": "none !important",
                                                        "userSelect": "all",
                                                      },
                                                      "appearance": "none",
                                                      "bg": "inherit",
                                                      "border": "1px solid",
                                                      "borderColor": "inherit",
                                                      "borderRadius": "md",
                                                      "fontSize": "md",
                                                      "h": 10,
                                                      "minWidth": 0,
                                                      "outline": 0,
                                                      "position": "relative",
                                                      "px": 4,
                                                      "transition": "all 0.2s",
                                                      "width": "100%",
                                                    }
                                                  }
                                                  className="chakra-input"
                                                  disabled={false}
                                                  id="00000000-0000-0000-0000-000000000000"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  paddingRight={10}
                                                  readOnly={false}
                                                  required={false}
                                                  value="16:00"
                                                >
                                                  <input
                                                    className="chakra-input css-1hmrg96"
                                                    disabled={false}
                                                    id="00000000-0000-0000-0000-000000000000"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onFocus={[Function]}
                                                    readOnly={false}
                                                    required={false}
                                                    value="16:00"
                                                  />
                                                </Styled(input)>
                                              </Input>
                                              <InputRightElement
                                                color="gray.400"
                                                key=".1"
                                                mr={2}
                                                userSelect="none"
                                                width="unset"
                                              >
                                                <InputElement
                                                  className="chakra-input__right-element"
                                                  color="gray.400"
                                                  mr={2}
                                                  placement="right"
                                                  userSelect="none"
                                                  width="unset"
                                                >
                                                  <Styled(div)
                                                    __css={
                                                      Object {
                                                        "fontSize": "md",
                                                        "height": 10,
                                                        "paddingX": undefined,
                                                        "right": "0",
                                                        "width": 10,
                                                      }
                                                    }
                                                    className="chakra-input__right-element"
                                                    color="gray.400"
                                                    mr={2}
                                                    userSelect="none"
                                                    width="unset"
                                                  >
                                                    <div
                                                      className="chakra-input__right-element css-15qe6bf"
                                                    >
                                                      HH:mm
                                                    </div>
                                                  </Styled(div)>
                                                </InputElement>
                                              </InputRightElement>
                                            </div>
                                          </Styled(div)>
                                        </InputGroup>
                                      </ForwardRef>
                                    </div>
                                  </Styled(div)>
                                </FormControl>
                              </Memo(TimePicker)>
                              <Checkbox
                                fontWeight="normal"
                                isChecked={false}
                                isDisabled={false}
                                key=".4"
                                onChange={[Function]}
                              >
                                <Styled(label)
                                  __css={Object {}}
                                  className="chakra-checkbox"
                                  fontWeight="normal"
                                >
                                  <label
                                    className="chakra-checkbox css-wun7cp"
                                  >
                                    <input
                                      aria-disabled={false}
                                      checked={false}
                                      className="chakra-checkbox__input"
                                      disabled={false}
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      style={
                                        Object {
                                          "border": "0px",
                                          "clip": "rect(0px, 0px, 0px, 0px)",
                                          "height": "1px",
                                          "margin": "-1px",
                                          "overflow": "hidden",
                                          "padding": "0px",
                                          "position": "absolute",
                                          "whiteSpace": "nowrap",
                                          "width": "1px",
                                        }
                                      }
                                      type="checkbox"
                                    />
                                    <Styled(span)
                                      __css={
                                        Object {
                                          "_checked": Object {
                                            "_disabled": Object {
                                              "bg": "gray.200",
                                              "borderColor": "gray.200",
                                              "color": "gray.500",
                                            },
                                            "_hover": Object {
                                              "bg": "blue.600",
                                              "borderColor": "blue.600",
                                            },
                                            "bg": "blue.500",
                                            "borderColor": "blue.500",
                                            "color": "white",
                                          },
                                          "_disabled": Object {
                                            "bg": "gray.100",
                                            "borderColor": "gray.100",
                                          },
                                          "_focus": Object {
                                            "boxShadow": "outline",
                                          },
                                          "_indeterminate": Object {
                                            "bg": "blue.500",
                                            "borderColor": "blue.500",
                                            "color": "white",
                                          },
                                          "_invalid": Object {
                                            "borderColor": "red.500",
                                          },
                                          "border": "2px solid",
                                          "borderColor": "inherit",
                                          "borderRadius": "sm",
                                          "color": "white",
                                          "h": 4,
                                          "transition": "box-shadow 250ms",
                                          "w": 4,
                                        }
                                      }
                                      aria-hidden={true}
                                      className="chakra-checkbox__control"
                                      onMouseDown={[Function]}
                                      onMouseEnter={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                    >
                                      <span
                                        aria-hidden={true}
                                        className="chakra-checkbox__control css-co2d90"
                                        onMouseDown={[Function]}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                      >
                                        <CheckboxIcon
                                          __css={
                                            Object {
                                              "color": undefined,
                                              "fontSize": "0.625rem",
                                              "opacity": 0,
                                              "transform": "scale(0.95)",
                                              "transition": "transform 200ms",
                                            }
                                          }
                                          isChecked={false}
                                        >
                                          <CheckboxTransition>
                                            <AnimatePresence
                                              initial={false}
                                            />
                                          </CheckboxTransition>
                                        </CheckboxIcon>
                                      </span>
                                    </Styled(span)>
                                    <Styled(span)
                                      __css={
                                        Object {
                                          "_disabled": Object {
                                            "opacity": 0.4,
                                          },
                                          "fontSize": "md",
                                          "marginStart": "0.5rem",
                                          "userSelect": "none",
                                        }
                                      }
                                      className="chakra-checkbox__label"
                                      onMouseDown={[Function]}
                                      onTouchStart={[Function]}
                                    >
                                      <span
                                        className="chakra-checkbox__label css-sklcna"
                                        onMouseDown={[Function]}
                                        onTouchStart={[Function]}
                                      >
                                        Times are exact
                                      </span>
                                    </Styled(span)>
                                  </label>
                                </Styled(label)>
                              </Checkbox>
                              <Divider
                                key=".5"
                              >
                                <Styled(hr)
                                  __css={
                                    Object {
                                      "border": "0",
                                      "borderBottomWidth": "1px",
                                      "borderColor": "inherit",
                                      "borderStyle": "solid",
                                      "opacity": 0.6,
                                      "width": "100%",
                                    }
                                  }
                                  aria-orientation="horizontal"
                                  className="chakra-divider"
                                  role="separator"
                                >
                                  <hr
                                    aria-orientation="horizontal"
                                    className="chakra-divider css-svjswr"
                                    role="separator"
                                  />
                                </Styled(hr)>
                              </Divider>
                              <Phase
                                disabled={false}
                                key=".6"
                                modificationStops={Array []}
                                timetable={
                                  Object {
                                    "_id": "timetable-id",
                                    "dwellTime": 10,
                                    "dwellTimes": Array [
                                      12,
                                    ],
                                    "endTime": 57600,
                                    "exactTimes": false,
                                    "friday": true,
                                    "headwaySecs": 900,
                                    "modificationId": "1234",
                                    "modificationName": "Test Modification",
                                    "monday": true,
                                    "name": "Test timetable",
                                    "patternTrips": Array [
                                      "abcd",
                                    ],
                                    "phaseAtStop": "",
                                    "phaseFromStop": "",
                                    "phaseFromTimetable": "",
                                    "phaseSeconds": 300,
                                    "saturday": false,
                                    "segmentSpeeds": Array [],
                                    "sourceTrip": "abcd",
                                    "startTime": 28800,
                                    "sunday": false,
                                    "thursday": true,
                                    "tuesday": true,
                                    "wednesday": true,
                                  }
                                }
                                update={[MockFunction]}
                              >
                                <Stack
                                  mb={4}
                                  spacing={4}
                                >
                                  <Styled(div)
                                    __css={
                                      Object {
                                        "& > *:not(style) ~ *:not(style)": Object {
                                          "marginStart": 0,
                                          "marginTop": 4,
                                        },
                                      }
                                    }
                                    className="chakra-stack"
                                    display="flex"
                                    flexDirection="column"
                                    mb={4}
                                  >
                                    <div
                                      className="chakra-stack css-1pjbls6"
                                    >
                                      <Heading
                                        key=".0"
                                        size="sm"
                                      >
                                        <Styled(h2)
                                          __css={
                                            Object {
                                              "fontFamily": "heading",
                                              "fontSize": "md",
                                              "fontWeight": "bold",
                                              "lineHeight": 1.2,
                                            }
                                          }
                                          className="chakra-heading"
                                        >
                                          <h2
                                            className="chakra-heading css-14g9y4z"
                                          >
                                            <span>
                                              Phasing 
                                            </span>
                                            <DocsLink
                                              to="edit-scenario/phasing"
                                            >
                                              <ForwardRef
                                                label="View docs to learn more"
                                              >
                                                <Tooltip
                                                  aria-label="Tooltip: View docs to learn more"
                                                  fontSize="md"
                                                  label="View docs to learn more"
                                                  zIndex={1500}
                                                >
                                                  <Link
                                                    _hover={
                                                      Object {
                                                        "color": "blue.700",
                                                      }
                                                    }
                                                    color="blue.500"
                                                    display="inline-block"
                                                    href="https://docs.conveyal.com/edit-scenario/phasing"
                                                    isExternal={true}
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    onMouseDown={[Function]}
                                                    onMouseEnter={[Function]}
                                                  >
                                                    <Styled(a)
                                                      __css={
                                                        Object {
                                                          "_focus": Object {
                                                            "boxShadow": "outline",
                                                          },
                                                          "_hover": Object {
                                                            "textDecoration": "underline",
                                                          },
                                                          "color": "inherit",
                                                          "cursor": "pointer",
                                                          "outline": "none",
                                                          "textDecoration": "none",
                                                          "transition": "all 0.15s ease-out",
                                                        }
                                                      }
                                                      _hover={
                                                        Object {
                                                          "color": "blue.700",
                                                        }
                                                      }
                                                      className="chakra-link"
                                                      color="blue.500"
                                                      display="inline-block"
                                                      href="https://docs.conveyal.com/edit-scenario/phasing"
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onFocus={[Function]}
                                                      onMouseDown={[Function]}
                                                      onMouseEnter={[Function]}
                                                      rel="noopener noreferrer"
                                                      target="_blank"
                                                    >
                                                      <a
                                                        className="chakra-link css-1hx0uqu"
                                                        href="https://docs.conveyal.com/edit-scenario/phasing"
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onFocus={[Function]}
                                                        onMouseDown={[Function]}
                                                        onMouseEnter={[Function]}
                                                        rel="noopener noreferrer"
                                                        target="_blank"
                                                      >
                                                        <FaInfoCircle>
                                                          <IconBase
                                                            attr={
                                                              Object {
                                                                "viewBox": "0 0 512 512",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              fill="currentColor"
                                                              height="1em"
                                                              stroke="currentColor"
                                                              strokeWidth="0"
                                                              style={
                                                                Object {
                                                                  "color": undefined,
                                                                }
                                                              }
                                                              viewBox="0 0 512 512"
                                                              width="1em"
                                                              xmlns="http://www.w3.org/2000/svg"
                                                            >
                                                              <path
                                                                d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"
                                                                key="0"
                                                              />
                                                            </svg>
                                                          </IconBase>
                                                        </FaInfoCircle>
                                                      </a>
                                                    </Styled(a)>
                                                  </Link>
                                                  <AnimatePresence />
                                                </Tooltip>
                                              </ForwardRef>
                                            </DocsLink>
                                          </h2>
                                        </Styled(h2)>
                                      </Heading>
                                      <FormControl
                                        isDisabled={false}
                                        key=".1"
                                      >
                                        <Styled(div)
                                          __css={
                                            Object {
                                              "position": "relative",
                                              "width": "100%",
                                            }
                                          }
                                          className="chakra-form-control"
                                          role="group"
                                        >
                                          <div
                                            className="chakra-form-control css-1kxonj9"
                                            role="group"
                                          >
                                            <FormLabel
                                              htmlFor="phaseAtStop"
                                            >
                                              <Styled(label)
                                                __css={
                                                  Object {
                                                    "_disabled": Object {
                                                      "opacity": 0.4,
                                                    },
                                                    "display": "block",
                                                    "fontSize": "md",
                                                    "fontWeight": "medium",
                                                    "marginEnd": 3,
                                                    "mb": 2,
                                                    "opacity": 1,
                                                    "textAlign": "start",
                                                    "transition": "all 0.2s",
                                                  }
                                                }
                                                className="chakra-form__label"
                                                htmlFor="phaseAtStop"
                                                id="field-8-label"
                                              >
                                                <label
                                                  className="chakra-form__label css-1qqx8g3"
                                                  htmlFor="phaseAtStop"
                                                  id="field-8-label"
                                                >
                                                  Phase at stop
                                                </label>
                                              </Styled(label)>
                                            </FormLabel>
                                            <ForwardRef
                                              getOptionLabel={[Function]}
                                              getOptionValue={[Function]}
                                              inputId="phaseAtStop"
                                              isClearable={true}
                                              isDisabled={false}
                                              name="Phase at stop"
                                              onChange={[Function]}
                                              options={Array []}
                                              placeholder="Phase at stop"
                                            >
                                              <ReactSelect
                                                getOptionLabel={[Function]}
                                                getOptionValue={[Function]}
                                                innerRef={null}
                                                inputId="phaseAtStop"
                                                isClearable={true}
                                                isDisabled={false}
                                                name="Phase at stop"
                                                onChange={[Function]}
                                                options={Array []}
                                                placeholder="Phase at stop"
                                                styles={
                                                  Object {
                                                    "control": [Function],
                                                    "menu": [Function],
                                                    "option": [Function],
                                                  }
                                                }
                                              >
                                                <div
                                                  className="ReactSelectMock"
                                                />
                                              </ReactSelect>
                                            </ForwardRef>
                                          </div>
                                        </Styled(div)>
                                      </FormControl>
                                    </div>
                                  </Styled(div)>
                                </Stack>
                              </Phase>
                            </div>
                          </Styled(div)>
                        </Stack>
                      </TimetableEntry>
                      <Divider
                        key=".2"
                      >
                        <Styled(hr)
                          __css={
                            Object {
                              "border": "0",
                              "borderBottomWidth": "1px",
                              "borderColor": "inherit",
                              "borderStyle": "solid",
                              "opacity": 0.6,
                              "width": "100%",
                            }
                          }
                          aria-orientation="horizontal"
                          className="chakra-divider"
                          role="separator"
                        >
                          <hr
                            aria-orientation="horizontal"
                            className="chakra-divider css-svjswr"
                            role="separator"
                          />
                        </Styled(hr)>
                      </Divider>
                      <ConfirmButton
                        colorScheme="red"
                        description="Are you sure you would like to remove this timetable?"
                        isFullWidth={true}
                        key=".4"
                        leftIcon={<FaTrash />}
                        onConfirm={[MockFunction]}
                      >
                        <ConfirmDialog
                          description="Are you sure you would like to remove this timetable?"
                          onConfirm={[MockFunction]}
                        >
                          <PortalManager
                            zIndex={10000}
                          >
                            <Popover
                              isLazy={true}
                            >
                              <PopoverTrigger>
                                <Button
                                  aria-controls="popover-content-10"
                                  aria-expanded={false}
                                  aria-haspopup="dialog"
                                  colorScheme="red"
                                  id="popover-trigger-10"
                                  isFullWidth={true}
                                  leftIcon={<FaTrash />}
                                  onClick={[Function]}
                                >
                                  <Styled(button)
                                    __css={
                                      Object {
                                        "_active": Object {
                                          "bg": "red.700",
                                        },
                                        "_disabled": Object {
                                          "boxShadow": "none",
                                          "cursor": "not-allowed",
                                          "opacity": 0.4,
                                        },
                                        "_focus": Object {
                                          "boxShadow": "outline",
                                        },
                                        "_hover": Object {
                                          "_disabled": Object {
                                            "bg": "red.500",
                                          },
                                          "bg": "red.600",
                                        },
                                        "alignItems": "center",
                                        "appearance": "none",
                                        "bg": "red.500",
                                        "borderRadius": "md",
                                        "color": "white",
                                        "display": "inline-flex",
                                        "fontSize": "md",
                                        "fontWeight": "semibold",
                                        "h": 10,
                                        "justifyContent": "center",
                                        "lineHeight": "1.2",
                                        "minW": 10,
                                        "outline": "none",
                                        "position": "relative",
                                        "px": 4,
                                        "transition": "all 250ms",
                                        "userSelect": "none",
                                        "verticalAlign": "middle",
                                        "whiteSpace": "nowrap",
                                        "width": "100%",
                                      }
                                    }
                                    aria-controls="popover-content-10"
                                    aria-expanded={false}
                                    aria-haspopup="dialog"
                                    className="chakra-button"
                                    id="popover-trigger-10"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <button
                                      aria-controls="popover-content-10"
                                      aria-expanded={false}
                                      aria-haspopup="dialog"
                                      className="chakra-button css-1dbbhuj"
                                      id="popover-trigger-10"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <ButtonIcon
                                        marginEnd="0.5rem"
                                      >
                                        <Styled(span)
                                          className="chakra-button__icon"
                                          marginEnd="0.5rem"
                                        >
                                          <span
                                            className="chakra-button__icon css-ktvjz1"
                                          >
                                            <FaTrash
                                              aria-hidden={true}
                                              focusable={false}
                                            >
                                              <IconBase
                                                aria-hidden={true}
                                                attr={
                                                  Object {
                                                    "viewBox": "0 0 448 512",
                                                  }
                                                }
                                                focusable={false}
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  fill="currentColor"
                                                  focusable={false}
                                                  height="1em"
                                                  stroke="currentColor"
                                                  strokeWidth="0"
                                                  style={
                                                    Object {
                                                      "color": undefined,
                                                    }
                                                  }
                                                  viewBox="0 0 448 512"
                                                  width="1em"
                                                  xmlns="http://www.w3.org/2000/svg"
                                                >
                                                  <path
                                                    d="M432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zM53.2 467a48 48 0 0 0 47.9 45h245.8a48 48 0 0 0 47.9-45L416 128H32z"
                                                    key="0"
                                                  />
                                                </svg>
                                              </IconBase>
                                            </FaTrash>
                                          </span>
                                        </Styled(span)>
                                      </ButtonIcon>
                                      Delete Timetable
                                    </button>
                                  </Styled(button)>
                                </Button>
                              </PopoverTrigger>
                              <Portal
                                appendToParentPortal={true}
                              >
                                <DefaultPortal
                                  appendToParentPortal={true}
                                >
                                  <Portal
                                    containerInfo={
                                      <div
                                        class="chakra-portal"
                                      >
                                        <div
                                          class="chakra-portal-zIndex"
                                          style="position: absolute; z-index: 10000; top: 0px; left: 0px; right: 0px;"
                                        >
                                          <div
                                            class="css-n0uled"
                                            style="visibility: hidden; position: absolute; left: 0px; top: 0px;"
                                          >
                                            <section
                                              class="chakra-popover__content css-xjibc0"
                                              id="popover-content-10"
                                              role="dialog"
                                              style="transform-origin: top center; opacity: 0; visibility: hidden; transform: scale(0.95) translateZ(0);"
                                              tabindex="-1"
                                            />
                                          </div>
                                        </div>
                                      </div>
                                    }
                                  >
                                    <Container
                                      zIndex={10000}
                                    >
                                      <div
                                        className="chakra-portal-zIndex"
                                        style={
                                          Object {
                                            "left": 0,
                                            "position": "absolute",
                                            "right": 0,
                                            "top": 0,
                                            "zIndex": 10000,
                                          }
                                        }
                                      >
                                        <PopoverContent>
                                          <Styled(div)
                                            __css={
                                              Object {
                                                "maxW": "xs",
                                                "w": "100%",
                                                "zIndex": 10,
                                              }
                                            }
                                            style={
                                              Object {
                                                "left": "0",
                                                "position": "absolute",
                                                "top": "0",
                                                "visibility": "hidden",
                                              }
                                            }
                                          >
                                            <div
                                              className="css-n0uled"
                                              style={
                                                Object {
                                                  "left": "0",
                                                  "position": "absolute",
                                                  "top": "0",
                                                  "visibility": "hidden",
                                                }
                                              }
                                            >
                                              <Styled(Component)
                                                __css={
                                                  Object {
                                                    "_focus": Object {
                                                      "boxShadow": "outline",
                                                      "outline": 0,
                                                    },
                                                    "bg": "white",
                                                    "border": "1px solid",
                                                    "borderColor": "inherit",
                                                    "borderRadius": "md",
                                                    "boxShadow": "sm",
                                                    "display": "flex",
                                                    "flexDirection": "column",
                                                    "position": "relative",
                                                    "zIndex": "inherit",
                                                  }
                                                }
                                                animate="exit"
                                                className="chakra-popover__content"
                                                id="popover-content-10"
                                                initial={false}
                                                onBlur={[Function]}
                                                onKeyDown={[Function]}
                                                onUpdate={[Function]}
                                                role="dialog"
                                                style={
                                                  Object {
                                                    "transformOrigin": "top center",
                                                  }
                                                }
                                                tabIndex={-1}
                                                variants={
                                                  Object {
                                                    "enter": Object {
                                                      "opacity": 1,
                                                      "scale": 1,
                                                      "transition": Object {
                                                        "duration": 0.15,
                                                        "ease": Array [
                                                          0,
                                                          0,
                                                          0.2,
                                                          1,
                                                        ],
                                                      },
                                                      "visibility": "visible",
                                                    },
                                                    "exit": Object {
                                                      "opacity": 0,
                                                      "scale": 0.95,
                                                      "transition": Object {
                                                        "duration": 0.1,
                                                        "ease": Array [
                                                          0.4,
                                                          0,
                                                          1,
                                                          1,
                                                        ],
                                                      },
                                                      "transitionEnd": Object {
                                                        "visibility": "hidden",
                                                      },
                                                    },
                                                  }
                                                }
                                              >
                                                <ForwardRef(MotionComponent)
                                                  animate="exit"
                                                  className="chakra-popover__content css-xjibc0"
                                                  id="popover-content-10"
                                                  initial={false}
                                                  onBlur={[Function]}
                                                  onKeyDown={[Function]}
                                                  onUpdate={[Function]}
                                                  role="dialog"
                                                  style={
                                                    Object {
                                                      "transformOrigin": "top center",
                                                    }
                                                  }
                                                  tabIndex={-1}
                                                  variants={
                                                    Object {
                                                      "enter": Object {
                                                        "opacity": 1,
                                                        "scale": 1,
                                                        "transition": Object {
                                                          "duration": 0.15,
                                                          "ease": Array [
                                                            0,
                                                            0,
                                                            0.2,
                                                            1,
                                                          ],
                                                        },
                                                        "visibility": "visible",
                                                      },
                                                      "exit": Object {
                                                        "opacity": 0,
                                                        "scale": 0.95,
                                                        "transition": Object {
                                                          "duration": 0.1,
                                                          "ease": Array [
                                                            0.4,
                                                            0,
                                                            1,
                                                            1,
                                                          ],
                                                        },
                                                        "transitionEnd": Object {
                                                          "visibility": "hidden",
                                                        },
                                                      },
                                                    }
                                                  }
                                                >
                                                  <section
                                                    className="chakra-popover__content css-xjibc0"
                                                    id="popover-content-10"
                                                    onBlur={[Function]}
                                                    onKeyDown={[Function]}
                                                    role="dialog"
                                                    style={
                                                      Object {
                                                        "opacity": 0,
                                                        "transform": "scale(0.95) translateZ(0)",
                                                        "transformOrigin": "top center",
                                                        "visibility": "hidden",
                                                      }
                                                    }
                                                    tabIndex={-1}
                                                  />
                                                  <Component
                                                    animate="exit"
                                                    className="chakra-popover__content css-xjibc0"
                                                    id="popover-content-10"
                                                    initial={false}
                                                    key="animation"
                                                    onBlur={[Function]}
                                                    onKeyDown={[Function]}
                                                    onUpdate={[Function]}
                                                    role="dialog"
                                                    style={
                                                      Object {
                                                        "transformOrigin": "top center",
                                                      }
                                                    }
                                                    tabIndex={-1}
                                                    variants={
                                                      Object {
                                                        "enter": Object {
                                                          "opacity": 1,
                                                          "scale": 1,
                                                          "transition": Object {
                                                            "duration": 0.15,
                                                            "ease": Array [
                                                              0,
                                                              0,
                                                              0.2,
                                                              1,
                                                            ],
                                                          },
                                                          "visibility": "visible",
                                                        },
                                                        "exit": Object {
                                                          "opacity": 0,
                                                          "scale": 0.95,
                                                          "transition": Object {
                                                            "duration": 0.1,
                                                            "ease": Array [
                                                              0.4,
                                                              0,
                                                              1,
                                                              1,
                                                            ],
                                                          },
                                                          "transitionEnd": Object {
                                                            "visibility": "hidden",
                                                          },
                                                        },
                                                      }
                                                    }
                                                    visualElement={
                                                      Object {
                                                        "addChild": [Function],
                                                        "addValue": [Function],
                                                        "addVariantChild": [Function],
                                                        "animationState": Object {
                                                          "animateChanges": [Function],
                                                          "getState": [Function],
                                                          "isAnimated": [Function],
                                                          "setActive": [Function],
                                                          "setAnimateFunction": [Function],
                                                        },
                                                        "blockInitialAnimation": false,
                                                        "build": [Function],
                                                        "clearAllListeners": [Function],
                                                        "clearState": [Function],
                                                        "current": <section
                                                          class="chakra-popover__content css-xjibc0"
                                                          id="popover-content-10"
                                                          role="dialog"
                                                          style="transform-origin: top center; opacity: 0; visibility: hidden; transform: scale(0.95) translateZ(0);"
                                                          tabindex="-1"
                                                        />,
                                                        "depth": 0,
                                                        "enableLayoutProjection": [Function],
                                                        "forEachValue": [Function],
                                                        "getBaseTarget": [Function],
                                                        "getClosestVariantNode": [Function],
                                                        "getDefaultTransition": [Function],
                                                        "getInstance": [Function],
                                                        "getLatestValues": [Function],
                                                        "getLayoutId": [Function],
                                                        "getLayoutState": [Function],
                                                        "getProjectionAnimationProgress": [Function],
                                                        "getProps": [Function],
                                                        "getStaticValue": [Function],
                                                        "getValue": [Function],
                                                        "getVariant": [Function],
                                                        "getVariantContext": [Function],
                                                        "hasValue": [Function],
                                                        "isHoverEventsEnabled": true,
                                                        "isMounted": [Function],
                                                        "isPresenceRoot": true,
                                                        "isPresent": true,
                                                        "isStatic": false,
                                                        "isVisible": undefined,
                                                        "lockProjectionTarget": [Function],
                                                        "makeTargetAnimatable": [Function],
                                                        "manuallyAnimateOnMount": false,
                                                        "measureViewportBox": [Function],
                                                        "notifyAnimationComplete": [Function],
                                                        "notifyAnimationStart": [Function],
                                                        "notifyBeforeLayoutMeasure": [Function],
                                                        "notifyLayoutAnimationComplete": [Function],
                                                        "notifyLayoutMeasure": [Function],
                                                        "notifyLayoutReady": [Function],
                                                        "notifyLayoutUpdate": [Function],
                                                        "notifyRender": [Function],
                                                        "notifySetAxisTarget": [Function],
                                                        "notifyUpdate": [Function],
                                                        "notifyViewportBoxUpdate": [Function],
                                                        "onAnimationComplete": [Function],
                                                        "onAnimationStart": [Function],
                                                        "onBeforeLayoutMeasure": [Function],
                                                        "onLayoutAnimationComplete": [Function],
                                                        "onLayoutMeasure": [Function],
                                                        "onLayoutUpdate": [Function],
                                                        "onRender": [Function],
                                                        "onSetAxisTarget": [Function],
                                                        "onUpdate": [Function],
                                                        "onViewportBoxUpdate": [Function],
                                                        "path": Array [],
                                                        "pointTo": [Function],
                                                        "presence": 0,
                                                        "presenceId": undefined,
                                                        "projection": Object {
                                                          "isEnabled": false,
                                                          "isTargetLocked": false,
                                                          "target": Object {
                                                            "x": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                            "y": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                          },
                                                          "targetFinal": Object {
                                                            "x": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                            "y": Object {
                                                              "max": 1,
                                                              "min": 0,
                                                            },
                                                          },
                                                        },
                                                        "readValue": [Function],
                                                        "rebaseProjectionTarget": [Function],
                                                        "ref": [Function],
                                                        "removeValue": [Function],
                                                        "resetTransform": [Function],
                                                        "scheduleRender": [Function],
                                                        "scheduleUpdateLayoutProjection": [Function],
                                                        "setBaseTarget": [Function],
                                                        "setCrossfader": [Function],
                                                        "setProjectionTargetAxis": [Function],
                                                        "setProps": [Function],
                                                        "setStaticValue": [Function],
                                                        "setVisibility": [Function],
                                                        "snapshotViewportBox": [Function],
                                                        "sortNodePosition": [Function],
                                                        "startLayoutAnimation": [Function],
                                                        "stopLayoutAnimation": [Function],
                                                        "suspendHoverEvents": [Function],
                                                        "syncRender": [Function],
                                                        "treeType": "dom",
                                                        "unlockProjectionTarget": [Function],
                                                        "updateLayoutMeasurement": [Function],
                                                        "updateLayoutProjection": [Function],
                                                        "updatePropListeners": [Function],
                                                        "variantChildren": Set {},
                                                        "withoutTransform": [Function],
                                                      }
                                                    }
                                                  />
                                                </ForwardRef(MotionComponent)>
                                              </Styled(Component)>
                                            </div>
                                          </Styled(div)>
                                        </PopoverContent>
                                      </div>
                                    </Container>
                                  </Portal>
                                </DefaultPortal>
                              </Portal>
                            </Popover>
                          </PortalManager>
                        </ConfirmDialog>
                      </ConfirmButton>
                    </div>
                  </Styled(div)>
                </Stack>
              </div>
            </Box>
          </Body>
        </div>
      </Box>
    </Panel>
  </Collapsible>
</TimetableComponent>
`;
