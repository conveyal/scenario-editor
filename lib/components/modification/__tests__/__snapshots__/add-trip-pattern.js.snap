// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component AddTripPattern snapshot(mount) 1`] = `
<AddTripPattern
  allPhaseFromTimetableStops={Array []}
  allStops={Array []}
  gtfsStops={Array []}
  mapState={null}
  modification={
    Object {
      "_id": "1234",
      "accessGroup": "accessGroupName",
      "bidirectional": false,
      "createdAt": "2017-11-08T12:30:50.133Z",
      "createdBy": "person@gmail.com",
      "description": "Mock description",
      "entries": Array [],
      "feed": "1",
      "name": "Test Modification",
      "nonce": "12345",
      "projectId": "1",
      "routes": Array [
        "route1",
      ],
      "segments": Array [
        Object {
          "fromStopId": "1",
          "geometry": Object {
            "coordinates": Array [
              Array [
                -122.0246,
                36.9707,
              ],
              Array [
                -122.0279,
                37.049,
              ],
              Array [
                -121.9799,
                37.2299,
              ],
              Array [
                -121.9445,
                37.324,
              ],
              Array [
                -121.936,
                37.353,
              ],
              Array [
                -121.924,
                37.365,
              ],
            ],
            "type": "LineString",
          },
          "spacing": 3000,
          "stopAtEnd": false,
          "stopAtStart": false,
          "toStopId": null,
        },
      ],
      "timetables": Array [
        Object {
          "_id": "timetable-id",
          "dwellTime": 10,
          "dwellTimes": Array [
            12,
          ],
          "endTime": 57600,
          "exactTimes": false,
          "friday": true,
          "headwaySecs": 900,
          "modificationId": "1234",
          "modificationName": "Test Modification",
          "monday": true,
          "name": "Test timetable",
          "patternTrips": Array [
            "abcd",
          ],
          "phaseAtStop": "",
          "phaseFromStop": "",
          "phaseFromTimetable": "",
          "phaseSeconds": 300,
          "saturday": false,
          "segmentSpeeds": Array [],
          "sourceTrip": "abcd",
          "startTime": 28800,
          "sunday": false,
          "thursday": true,
          "tuesday": true,
          "wednesday": true,
        },
      ],
      "trips": Array [
        "abcd",
      ],
      "type": "add-trip-pattern",
      "updatedAt": "2017-11-08T12:31:19.602Z",
      "updatedBy": "person@gmail.com",
      "variants": Array [
        true,
      ],
    }
  }
  modificationStops={Array []}
  numbeOfStops={0}
  projectTimetables={Array []}
  qualifiedStops={Array []}
  segmentDistances={Array []}
  timetables={Array []}
  update={[MockFunction]}
>
  <Stack
    spacing={4}
  >
    <Styled(div)
      __css={
        Object {
          "& > *:not(style) ~ *:not(style)": Object {
            "marginBottom": 0,
            "marginEnd": 0,
            "marginStart": 0,
            "marginTop": 4,
          },
        }
      }
      className="chakra-stack"
      display="flex"
      flexDirection="column"
    >
      <div
        className="chakra-stack css-egoftb"
      >
        <DynamicMockedComponent
          bidirectional={false}
          key=".0"
          segments={
            Array [
              Object {
                "fromStopId": "1",
                "geometry": Object {
                  "coordinates": Array [
                    Array [
                      -122.0246,
                      36.9707,
                    ],
                    Array [
                      -122.0279,
                      37.049,
                    ],
                    Array [
                      -121.9799,
                      37.2299,
                    ],
                    Array [
                      -121.9445,
                      37.324,
                    ],
                    Array [
                      -121.936,
                      37.353,
                    ],
                    Array [
                      -121.924,
                      37.365,
                    ],
                  ],
                  "type": "LineString",
                },
                "spacing": 3000,
                "stopAtEnd": false,
                "stopAtStart": false,
                "toStopId": null,
              },
            ]
          }
        />
        <TransitModeSelector
          key=".1"
          onChange={[Function]}
        >
          <FormControl>
            <Styled(div)
              __css={
                Object {
                  "position": "relative",
                  "width": "100%",
                }
              }
              className="chakra-form-control"
              role="group"
            >
              <div
                className="chakra-form-control css-1kxonj9"
                role="group"
              >
                <FormLabel
                  htmlFor="transitMode"
                >
                  <Styled(label)
                    __css={
                      Object {
                        "_disabled": Object {
                          "opacity": 0.4,
                        },
                        "display": "block",
                        "fontSize": "md",
                        "fontWeight": "medium",
                        "marginEnd": 3,
                        "mb": 2,
                        "opacity": 1,
                        "textAlign": "start",
                        "transition": "all 0.2s",
                      }
                    }
                    className="chakra-form__label"
                    htmlFor="transitMode"
                    id="field-1-label"
                  >
                    <label
                      className="chakra-form__label css-10m1y3x"
                      htmlFor="transitMode"
                      id="field-1-label"
                    >
                      Transit Mode
                    </label>
                  </Styled(label)>
                </FormLabel>
                <Select
                  id="transitMode"
                  onChange={[Function]}
                >
                  <Styled(div)
                    __css={
                      Object {
                        "color": undefined,
                        "height": "fit-content",
                        "position": "relative",
                        "width": "100%",
                      }
                    }
                    className="chakra-select__wrapper"
                  >
                    <div
                      className="chakra-select__wrapper css-42b2qy"
                    >
                      <SelectField
                        __css={
                          Object {
                            "> option, > optgroup": Object {
                              "bg": "white",
                            },
                            "_disabled": Object {
                              "cursor": "not-allowed",
                              "opacity": 0.4,
                            },
                            "_focus": Object {
                              "borderColor": "#3182ce",
                              "boxShadow": "0 0 0 1px #3182ce",
                              "zIndex": "unset",
                            },
                            "_hover": Object {
                              "borderColor": "gray.300",
                            },
                            "_invalid": Object {
                              "borderColor": "#E53E3E",
                              "boxShadow": "0 0 0 1px #E53E3E",
                            },
                            "_readOnly": Object {
                              "boxShadow": "none !important",
                              "userSelect": "all",
                            },
                            "appearance": "none",
                            "bg": "inherit",
                            "border": "1px solid",
                            "borderColor": "inherit",
                            "borderRadius": "md",
                            "fontSize": "md",
                            "h": 10,
                            "lineHeight": "normal",
                            "minWidth": 0,
                            "outline": 0,
                            "paddingBottom": "1px",
                            "paddingEnd": "2rem",
                            "position": "relative",
                            "px": 4,
                            "transition": "all 0.2s",
                            "width": "100%",
                          }
                        }
                        id="transitMode"
                        onChange={[Function]}
                      >
                        <Styled(select)
                          __css={
                            Object {
                              "> option, > optgroup": Object {
                                "bg": "white",
                              },
                              "_disabled": Object {
                                "cursor": "not-allowed",
                                "opacity": 0.4,
                              },
                              "_focus": Object {
                                "borderColor": "#3182ce",
                                "boxShadow": "0 0 0 1px #3182ce",
                                "zIndex": "unset",
                              },
                              "_hover": Object {
                                "borderColor": "gray.300",
                              },
                              "_invalid": Object {
                                "borderColor": "#E53E3E",
                                "boxShadow": "0 0 0 1px #E53E3E",
                              },
                              "_readOnly": Object {
                                "boxShadow": "none !important",
                                "userSelect": "all",
                              },
                              "appearance": "none",
                              "bg": "inherit",
                              "border": "1px solid",
                              "borderColor": "inherit",
                              "borderRadius": "md",
                              "fontSize": "md",
                              "h": 10,
                              "lineHeight": "normal",
                              "minWidth": 0,
                              "outline": 0,
                              "paddingBottom": "1px",
                              "paddingEnd": "2rem",
                              "position": "relative",
                              "px": 4,
                              "transition": "all 0.2s",
                              "width": "100%",
                            }
                          }
                          aria-describedby="field-1-helptext"
                          className="chakra-select"
                          disabled={false}
                          id="transitMode"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          readOnly={false}
                          required={false}
                        >
                          <select
                            aria-describedby="field-1-helptext"
                            className="chakra-select css-hsj94m"
                            disabled={false}
                            id="transitMode"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            readOnly={false}
                            required={false}
                          >
                            <option
                              key="TRAM"
                              value={0}
                            >
                              Tram
                            </option>
                            <option
                              key="SUBWAY"
                              value={1}
                            >
                              Subway
                            </option>
                            <option
                              key="RAIL"
                              value={2}
                            >
                              Rail
                            </option>
                            <option
                              key="BUS"
                              value={3}
                            >
                              Bus
                            </option>
                            <option
                              key="FERRY"
                              value={4}
                            >
                              Ferry
                            </option>
                            <option
                              key="CABLE_CAR"
                              value={5}
                            >
                              Cable Car
                            </option>
                            <option
                              key="GONDOLA"
                              value={6}
                            >
                              Gondola
                            </option>
                            <option
                              key="FUNICULAR"
                              value={7}
                            >
                              Funicular
                            </option>
                          </select>
                        </Styled(select)>
                      </SelectField>
                      <SelectIcon
                        __css={
                          Object {
                            "_disabled": Object {
                              "opacity": 0.5,
                            },
                            "color": "currentColor",
                            "fontSize": "1.25rem",
                            "height": "100%",
                            "insetEnd": "0.5rem",
                            "position": "relative",
                            "width": "1.5rem",
                          }
                        }
                      >
                        <Styled(div)
                          __css={
                            Object {
                              "_disabled": Object {
                                "opacity": 0.5,
                              },
                              "color": "currentColor",
                              "fontSize": "1.25rem",
                              "height": "100%",
                              "insetEnd": "0.5rem",
                              "position": "relative",
                              "width": "1.5rem",
                            }
                          }
                          className="chakra-select__icon-wrapper"
                        >
                          <div
                            className="chakra-select__icon-wrapper css-zj2dqk"
                          >
                            <DefaultIcon
                              aria-hidden={true}
                              className="chakra-select__icon"
                              focusable={false}
                              role="presentation"
                              style={
                                Object {
                                  "color": "currentColor",
                                  "height": "1em",
                                  "width": "1em",
                                }
                              }
                            >
                              <svg
                                aria-hidden={true}
                                className="chakra-select__icon"
                                focusable={false}
                                role="presentation"
                                style={
                                  Object {
                                    "color": "currentColor",
                                    "height": "1em",
                                    "width": "1em",
                                  }
                                }
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
                                  fill="currentColor"
                                />
                              </svg>
                            </DefaultIcon>
                          </div>
                        </Styled(div)>
                      </SelectIcon>
                    </div>
                  </Styled(div)>
                </Select>
                <FormHelperText>
                  <Styled(div)
                    __css={
                      Object {
                        "color": "gray.500",
                        "fontSize": "sm",
                        "lineHeight": "normal",
                        "mt": 2,
                      }
                    }
                    className="chakra-form__helper-text"
                    id="field-1-helptext"
                  >
                    <div
                      className="chakra-form__helper-text css-1y1zyf5"
                      id="field-1-helptext"
                    >
                      Note: routing engine versions prior to v4.6.0 will use tram regardless.
                    </div>
                  </Styled(div)>
                </FormHelperText>
              </div>
            </Styled(div)>
          </FormControl>
        </TransitModeSelector>
        <FormControl
          className="DEV"
          key=".2"
        >
          <Styled(div)
            __css={
              Object {
                "position": "relative",
                "width": "100%",
              }
            }
            className="chakra-form-control DEV"
            role="group"
          >
            <div
              className="chakra-form-control DEV css-1kxonj9"
              role="group"
            >
              <FormLabel
                htmlFor="routeColor"
              >
                <Styled(label)
                  __css={
                    Object {
                      "_disabled": Object {
                        "opacity": 0.4,
                      },
                      "display": "block",
                      "fontSize": "md",
                      "fontWeight": "medium",
                      "marginEnd": 3,
                      "mb": 2,
                      "opacity": 1,
                      "textAlign": "start",
                      "transition": "all 0.2s",
                    }
                  }
                  className="chakra-form__label"
                  htmlFor="routeColor"
                  id="field-2-label"
                >
                  <label
                    className="chakra-form__label css-10m1y3x"
                    htmlFor="routeColor"
                    id="field-2-label"
                  >
                    Route Color
                  </label>
                </Styled(label)>
              </FormLabel>
              <Input
                id="routeColor"
                onChange={[Function]}
                value=""
              >
                <Styled(input)
                  __css={
                    Object {
                      "_disabled": Object {
                        "cursor": "not-allowed",
                        "opacity": 0.4,
                      },
                      "_focus": Object {
                        "borderColor": "#3182ce",
                        "boxShadow": "0 0 0 1px #3182ce",
                        "zIndex": 1,
                      },
                      "_hover": Object {
                        "borderColor": "gray.300",
                      },
                      "_invalid": Object {
                        "borderColor": "#E53E3E",
                        "boxShadow": "0 0 0 1px #E53E3E",
                      },
                      "_readOnly": Object {
                        "boxShadow": "none !important",
                        "userSelect": "all",
                      },
                      "appearance": "none",
                      "bg": "inherit",
                      "border": "1px solid",
                      "borderColor": "inherit",
                      "borderRadius": "md",
                      "fontSize": "md",
                      "h": 10,
                      "minWidth": 0,
                      "outline": 0,
                      "position": "relative",
                      "px": 4,
                      "transition": "all 0.2s",
                      "width": "100%",
                    }
                  }
                  aria-describedby="field-2-helptext"
                  className="chakra-input"
                  disabled={false}
                  id="routeColor"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  readOnly={false}
                  required={false}
                  value=""
                >
                  <input
                    aria-describedby="field-2-helptext"
                    className="chakra-input css-ujci2j"
                    disabled={false}
                    id="routeColor"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    readOnly={false}
                    required={false}
                    value=""
                  />
                </Styled(input)>
              </Input>
              <FormHelperText
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "For display purposes (ex: with <a href=\\"https://blog.conveyal.com/upgraded-outreach-serverless-transit-accessibility-with-taui-f90d6d51e177\\" target=\\"_blank\\">Taui</a>). Must be a 6-digit hexadecimal number.",
                  }
                }
              >
                <Styled(div)
                  __css={
                    Object {
                      "color": "gray.500",
                      "fontSize": "sm",
                      "lineHeight": "normal",
                      "mt": 2,
                    }
                  }
                  className="chakra-form__helper-text"
                  dangerouslySetInnerHTML={
                    Object {
                      "__html": "For display purposes (ex: with <a href=\\"https://blog.conveyal.com/upgraded-outreach-serverless-transit-accessibility-with-taui-f90d6d51e177\\" target=\\"_blank\\">Taui</a>). Must be a 6-digit hexadecimal number.",
                    }
                  }
                  id="field-2-helptext"
                >
                  <div
                    className="chakra-form__helper-text css-1y1zyf5"
                    dangerouslySetInnerHTML={
                      Object {
                        "__html": "For display purposes (ex: with <a href=\\"https://blog.conveyal.com/upgraded-outreach-serverless-transit-accessibility-with-taui-f90d6d51e177\\" target=\\"_blank\\">Taui</a>). Must be a 6-digit hexadecimal number.",
                      }
                    }
                    id="field-2-helptext"
                  />
                </Styled(div)>
              </FormHelperText>
            </div>
          </Styled(div)>
        </FormControl>
        <EditAlignment
          isEditing={false}
          key=".3"
          modification={
            Object {
              "_id": "1234",
              "accessGroup": "accessGroupName",
              "bidirectional": false,
              "createdAt": "2017-11-08T12:30:50.133Z",
              "createdBy": "person@gmail.com",
              "description": "Mock description",
              "entries": Array [],
              "feed": "1",
              "name": "Test Modification",
              "nonce": "12345",
              "projectId": "1",
              "routes": Array [
                "route1",
              ],
              "segments": Array [
                Object {
                  "fromStopId": "1",
                  "geometry": Object {
                    "coordinates": Array [
                      Array [
                        -122.0246,
                        36.9707,
                      ],
                      Array [
                        -122.0279,
                        37.049,
                      ],
                      Array [
                        -121.9799,
                        37.2299,
                      ],
                      Array [
                        -121.9445,
                        37.324,
                      ],
                      Array [
                        -121.936,
                        37.353,
                      ],
                      Array [
                        -121.924,
                        37.365,
                      ],
                    ],
                    "type": "LineString",
                  },
                  "spacing": 3000,
                  "stopAtEnd": false,
                  "stopAtStart": false,
                  "toStopId": null,
                },
              ],
              "timetables": Array [
                Object {
                  "_id": "timetable-id",
                  "dwellTime": 10,
                  "dwellTimes": Array [
                    12,
                  ],
                  "endTime": 57600,
                  "exactTimes": false,
                  "friday": true,
                  "headwaySecs": 900,
                  "modificationId": "1234",
                  "modificationName": "Test Modification",
                  "monday": true,
                  "name": "Test timetable",
                  "patternTrips": Array [
                    "abcd",
                  ],
                  "phaseAtStop": "",
                  "phaseFromStop": "",
                  "phaseFromTimetable": "",
                  "phaseSeconds": 300,
                  "saturday": false,
                  "segmentSpeeds": Array [],
                  "sourceTrip": "abcd",
                  "startTime": 28800,
                  "sunday": false,
                  "thursday": true,
                  "tuesday": true,
                  "wednesday": true,
                },
              ],
              "trips": Array [
                "abcd",
              ],
              "type": "add-trip-pattern",
              "updatedAt": "2017-11-08T12:31:19.602Z",
              "updatedBy": "person@gmail.com",
              "variants": Array [
                true,
              ],
            }
          }
          numberOfStops={16}
          setIsEditing={[Function]}
          update={[MockFunction]}
        >
          <Stack
            spacing={4}
          >
            <Styled(div)
              __css={
                Object {
                  "& > *:not(style) ~ *:not(style)": Object {
                    "marginBottom": 0,
                    "marginEnd": 0,
                    "marginStart": 0,
                    "marginTop": 4,
                  },
                }
              }
              className="chakra-stack"
              display="flex"
              flexDirection="column"
            >
              <div
                className="chakra-stack css-egoftb"
              >
                <Heading
                  key=".1"
                  size="sm"
                >
                  <Styled(h2)
                    __css={
                      Object {
                        "fontFamily": "heading",
                        "fontSize": "md",
                        "fontWeight": "bold",
                        "lineHeight": 1.2,
                      }
                    }
                    className="chakra-heading"
                  >
                    <h2
                      className="chakra-heading css-9f6g39"
                    >
                      Route Geometry
                    </h2>
                  </Styled(h2)>
                </Heading>
                <Text
                  key=".3"
                >
                  <Styled(p)
                    __css={Object {}}
                    className="chakra-text"
                  >
                    <p
                      className="chakra-text css-0"
                    >
                      16 stops over 45.21 km
                    </p>
                  </Styled(p)>
                </Text>
                <Button
                  colorScheme="yellow"
                  isFullWidth={true}
                  key=".4"
                  leftIcon={<FaPencilAlt />}
                  onClick={[Function]}
                >
                  <Styled(button)
                    __css={
                      Object {
                        "_active": Object {
                          "bg": "yellow.600",
                        },
                        "_disabled": Object {
                          "boxShadow": "none",
                          "cursor": "not-allowed",
                          "opacity": 0.4,
                        },
                        "_focus": Object {
                          "boxShadow": "outline",
                        },
                        "_hover": Object {
                          "_disabled": Object {
                            "bg": "yellow.400",
                          },
                          "bg": "yellow.500",
                        },
                        "alignItems": "center",
                        "appearance": "none",
                        "bg": "yellow.400",
                        "borderRadius": "md",
                        "color": "black",
                        "display": "inline-flex",
                        "fontSize": "md",
                        "fontWeight": "semibold",
                        "h": 10,
                        "justifyContent": "center",
                        "lineHeight": "1.2",
                        "minW": 10,
                        "outline": "none",
                        "position": "relative",
                        "px": 4,
                        "transition": "all 250ms",
                        "userSelect": "none",
                        "verticalAlign": "middle",
                        "whiteSpace": "nowrap",
                        "width": "100%",
                      }
                    }
                    className="chakra-button"
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="chakra-button css-chimen"
                      onClick={[Function]}
                      type="button"
                    >
                      <ButtonIcon
                        marginEnd="0.5rem"
                      >
                        <Styled(span)
                          alignSelf="center"
                          className="chakra-button__icon"
                          display="inline-flex"
                          flexShrink={0}
                          marginEnd="0.5rem"
                        >
                          <span
                            className="chakra-button__icon css-1wh2kri"
                          >
                            <FaPencilAlt
                              aria-hidden={true}
                              focusable={false}
                            >
                              <IconBase
                                aria-hidden={true}
                                attr={
                                  Object {
                                    "viewBox": "0 0 512 512",
                                  }
                                }
                                focusable={false}
                              >
                                <svg
                                  aria-hidden={true}
                                  fill="currentColor"
                                  focusable={false}
                                  height="1em"
                                  stroke="currentColor"
                                  strokeWidth="0"
                                  style={
                                    Object {
                                      "color": undefined,
                                    }
                                  }
                                  viewBox="0 0 512 512"
                                  width="1em"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M497.9 142.1l-46.1 46.1c-4.7 4.7-12.3 4.7-17 0l-111-111c-4.7-4.7-4.7-12.3 0-17l46.1-46.1c18.7-18.7 49.1-18.7 67.9 0l60.1 60.1c18.8 18.7 18.8 49.1 0 67.9zM284.2 99.8L21.6 362.4.4 483.9c-2.9 16.4 11.4 30.6 27.8 27.8l121.5-21.3 262.6-262.6c4.7-4.7 4.7-12.3 0-17l-111-111c-4.8-4.7-12.4-4.7-17.1 0zM124.1 339.9c-5.5-5.5-5.5-14.3 0-19.8l154-154c5.5-5.5 14.3-5.5 19.8 0s5.5 14.3 0 19.8l-154 154c-5.5 5.5-14.3 5.5-19.8 0zM88 424h48v36.3l-64.5 11.3-31.1-31.1L51.7 376H88v48z"
                                    key="0"
                                  />
                                </svg>
                              </IconBase>
                            </FaPencilAlt>
                          </span>
                        </Styled(span)>
                      </ButtonIcon>
                      Edit route geometry
                    </button>
                  </Styled(button)>
                </Button>
                <Checkbox
                  fontWeight="normal"
                  isChecked={true}
                  key=".6"
                  onChange={[Function]}
                >
                  <Styled(label)
                    __css={Object {}}
                    className="chakra-checkbox"
                    fontWeight="normal"
                    onClick={[Function]}
                  >
                    <label
                      className="chakra-checkbox css-fnpc6t"
                      onClick={[Function]}
                    >
                      <input
                        checked={true}
                        className="chakra-checkbox__input"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        style={
                          Object {
                            "border": "0px",
                            "clip": "rect(0px, 0px, 0px, 0px)",
                            "height": "1px",
                            "margin": "-1px",
                            "overflow": "hidden",
                            "padding": "0px",
                            "position": "absolute",
                            "whiteSpace": "nowrap",
                            "width": "1px",
                          }
                        }
                        type="checkbox"
                      />
                      <Styled(span)
                        __css={
                          Object {
                            "_checked": Object {
                              "_disabled": Object {
                                "bg": "gray.200",
                                "borderColor": "gray.200",
                                "color": "gray.500",
                              },
                              "_hover": Object {
                                "bg": "blue.600",
                                "borderColor": "blue.600",
                              },
                              "bg": "blue.500",
                              "borderColor": "blue.500",
                              "color": "white",
                            },
                            "_disabled": Object {
                              "bg": "gray.100",
                              "borderColor": "gray.100",
                            },
                            "_focus": Object {
                              "boxShadow": "outline",
                            },
                            "_indeterminate": Object {
                              "bg": "blue.500",
                              "borderColor": "blue.500",
                              "color": "white",
                            },
                            "_invalid": Object {
                              "borderColor": "red.500",
                            },
                            "border": "2px solid",
                            "borderColor": "inherit",
                            "borderRadius": "sm",
                            "color": "white",
                            "h": 4,
                            "transition": "box-shadow 250ms",
                            "w": 4,
                          }
                        }
                        aria-hidden={true}
                        className="chakra-checkbox__control"
                        data-checked=""
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <span
                          aria-hidden={true}
                          className="chakra-checkbox__control css-joz5u0"
                          data-checked=""
                          onMouseDown={[Function]}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <CheckboxIcon
                            __css={
                              Object {
                                "color": undefined,
                                "fontSize": "0.625rem",
                                "opacity": 1,
                                "transform": "scale(1)",
                                "transition": "transform 200ms",
                              }
                            }
                            isChecked={true}
                          >
                            <CheckboxTransition
                              open={true}
                            >
                              <AnimatePresence
                                initial={false}
                              >
                                <PresenceChild
                                  initial={false}
                                  isPresent={true}
                                  key=""
                                  presenceAffectsLayout={true}
                                >
                                  <ForwardRef(MotionComponent)
                                    animate="checked"
                                    exit="unchecked"
                                    initial="unchecked"
                                    style={
                                      Object {
                                        "alignItems": "center",
                                        "display": "flex",
                                        "height": "100%",
                                        "justifyContent": "center",
                                      }
                                    }
                                    variants={
                                      Object {
                                        "checked": Object {
                                          "scale": 1,
                                        },
                                        "unchecked": Object {
                                          "scale": 0.5,
                                        },
                                      }
                                    }
                                  >
                                    <div
                                      style={
                                        Object {
                                          "alignItems": "center",
                                          "display": "flex",
                                          "height": "100%",
                                          "justifyContent": "center",
                                          "transform": "none",
                                        }
                                      }
                                    >
                                      <CheckIcon
                                        __css={
                                          Object {
                                            "color": undefined,
                                            "fontSize": "0.625rem",
                                            "opacity": 1,
                                            "transform": "scale(1)",
                                            "transition": "transform 200ms",
                                          }
                                        }
                                      >
                                        <ForwardRef(MotionComponent)
                                          __css={
                                            Object {
                                              "color": undefined,
                                              "fontSize": "0.625rem",
                                              "opacity": 1,
                                              "transform": "scale(1)",
                                              "transition": "transform 200ms",
                                            }
                                          }
                                          style={
                                            Object {
                                              "fill": "none",
                                              "stroke": "currentColor",
                                              "strokeDasharray": 16,
                                              "strokeWidth": 2,
                                            }
                                          }
                                          variants={
                                            Object {
                                              "checked": Object {
                                                "opacity": 1,
                                                "strokeDashoffset": 0,
                                                "transition": Object {
                                                  "duration": 0.2,
                                                },
                                              },
                                              "unchecked": Object {
                                                "opacity": 0,
                                                "strokeDashoffset": 16,
                                              },
                                            }
                                          }
                                          viewBox="0 0 12 10"
                                          width="1.2em"
                                        >
                                          <Styled(svg)
                                            __css={
                                              Object {
                                                "color": undefined,
                                                "fontSize": "0.625rem",
                                                "opacity": 1,
                                                "transform": "scale(1)",
                                                "transition": "transform 200ms",
                                              }
                                            }
                                            style={
                                              Object {
                                                "fill": "none",
                                                "opacity": 1,
                                                "stroke": "currentColor",
                                                "strokeDasharray": 16,
                                                "strokeDashoffset": 0,
                                                "strokeWidth": 2,
                                              }
                                            }
                                            viewBox="0 0 12 10"
                                            width="1.2em"
                                          >
                                            <svg
                                              className="css-da6t8b"
                                              style={
                                                Object {
                                                  "fill": "none",
                                                  "opacity": 1,
                                                  "stroke": "currentColor",
                                                  "strokeDasharray": 16,
                                                  "strokeDashoffset": 0,
                                                  "strokeWidth": 2,
                                                }
                                              }
                                              viewBox="0 0 12 10"
                                            >
                                              <polyline
                                                points="1.5 6 4.5 9 10.5 1"
                                              />
                                            </svg>
                                          </Styled(svg)>
                                          <Component
                                            __css={
                                              Object {
                                                "color": undefined,
                                                "fontSize": "0.625rem",
                                                "opacity": 1,
                                                "transform": "scale(1)",
                                                "transition": "transform 200ms",
                                              }
                                            }
                                            key="animation"
                                            style={
                                              Object {
                                                "fill": "none",
                                                "stroke": "currentColor",
                                                "strokeDasharray": 16,
                                                "strokeWidth": 2,
                                              }
                                            }
                                            variants={
                                              Object {
                                                "checked": Object {
                                                  "opacity": 1,
                                                  "strokeDashoffset": 0,
                                                  "transition": Object {
                                                    "duration": 0.2,
                                                  },
                                                },
                                                "unchecked": Object {
                                                  "opacity": 0,
                                                  "strokeDashoffset": 16,
                                                },
                                              }
                                            }
                                            viewBox="0 0 12 10"
                                            visualElement={
                                              Object {
                                                "addChild": [Function],
                                                "addValue": [Function],
                                                "addVariantChild": [Function],
                                                "animationState": Object {
                                                  "animateChanges": [Function],
                                                  "getState": [Function],
                                                  "isAnimated": [Function],
                                                  "setActive": [Function],
                                                  "setAnimateFunction": [Function],
                                                },
                                                "blockInitialAnimation": true,
                                                "build": [Function],
                                                "clearAllListeners": [Function],
                                                "clearState": [Function],
                                                "current": <svg
                                                  class="css-da6t8b"
                                                  style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                  viewBox="0 0 12 10"
                                                >
                                                  <polyline
                                                    points="1.5 6 4.5 9 10.5 1"
                                                  />
                                                </svg>,
                                                "depth": 1,
                                                "enableLayoutProjection": [Function],
                                                "forEachValue": [Function],
                                                "getBaseTarget": [Function],
                                                "getClosestVariantNode": [Function],
                                                "getDefaultTransition": [Function],
                                                "getInstance": [Function],
                                                "getLatestValues": [Function],
                                                "getLayoutId": [Function],
                                                "getLayoutState": [Function],
                                                "getProjectionAnimationProgress": [Function],
                                                "getProps": [Function],
                                                "getStaticValue": [Function],
                                                "getValue": [Function],
                                                "getVariant": [Function],
                                                "getVariantContext": [Function],
                                                "hasValue": [Function],
                                                "isHoverEventsEnabled": true,
                                                "isMounted": [Function],
                                                "isPresenceRoot": false,
                                                "isPresent": true,
                                                "isStatic": false,
                                                "isVisible": undefined,
                                                "lockProjectionTarget": [Function],
                                                "makeTargetAnimatable": [Function],
                                                "manuallyAnimateOnMount": false,
                                                "measureViewportBox": [Function],
                                                "notifyAnimationComplete": [Function],
                                                "notifyAnimationStart": [Function],
                                                "notifyBeforeLayoutMeasure": [Function],
                                                "notifyLayoutAnimationComplete": [Function],
                                                "notifyLayoutMeasure": [Function],
                                                "notifyLayoutReady": [Function],
                                                "notifyLayoutUpdate": [Function],
                                                "notifyRender": [Function],
                                                "notifySetAxisTarget": [Function],
                                                "notifyUpdate": [Function],
                                                "notifyViewportBoxUpdate": [Function],
                                                "onAnimationComplete": [Function],
                                                "onAnimationStart": [Function],
                                                "onBeforeLayoutMeasure": [Function],
                                                "onLayoutAnimationComplete": [Function],
                                                "onLayoutMeasure": [Function],
                                                "onLayoutUpdate": [Function],
                                                "onRender": [Function],
                                                "onSetAxisTarget": [Function],
                                                "onUpdate": [Function],
                                                "onViewportBoxUpdate": [Function],
                                                "path": Array [
                                                  Object {
                                                    "addChild": [Function],
                                                    "addValue": [Function],
                                                    "addVariantChild": [Function],
                                                    "animationState": Object {
                                                      "animateChanges": [Function],
                                                      "getState": [Function],
                                                      "isAnimated": [Function],
                                                      "setActive": [Function],
                                                      "setAnimateFunction": [Function],
                                                    },
                                                    "blockInitialAnimation": true,
                                                    "build": [Function],
                                                    "clearAllListeners": [Function],
                                                    "clearState": [Function],
                                                    "current": <div
                                                      style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                                    >
                                                      <svg
                                                        class="css-da6t8b"
                                                        style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                        viewBox="0 0 12 10"
                                                      >
                                                        <polyline
                                                          points="1.5 6 4.5 9 10.5 1"
                                                        />
                                                      </svg>
                                                    </div>,
                                                    "depth": 0,
                                                    "enableLayoutProjection": [Function],
                                                    "forEachValue": [Function],
                                                    "getBaseTarget": [Function],
                                                    "getClosestVariantNode": [Function],
                                                    "getDefaultTransition": [Function],
                                                    "getInstance": [Function],
                                                    "getLatestValues": [Function],
                                                    "getLayoutId": [Function],
                                                    "getLayoutState": [Function],
                                                    "getProjectionAnimationProgress": [Function],
                                                    "getProps": [Function],
                                                    "getStaticValue": [Function],
                                                    "getValue": [Function],
                                                    "getVariant": [Function],
                                                    "getVariantContext": [Function],
                                                    "hasValue": [Function],
                                                    "isHoverEventsEnabled": true,
                                                    "isMounted": [Function],
                                                    "isPresenceRoot": true,
                                                    "isPresent": true,
                                                    "isStatic": false,
                                                    "isVisible": undefined,
                                                    "lockProjectionTarget": [Function],
                                                    "makeTargetAnimatable": [Function],
                                                    "manuallyAnimateOnMount": false,
                                                    "measureViewportBox": [Function],
                                                    "notifyAnimationComplete": [Function],
                                                    "notifyAnimationStart": [Function],
                                                    "notifyBeforeLayoutMeasure": [Function],
                                                    "notifyLayoutAnimationComplete": [Function],
                                                    "notifyLayoutMeasure": [Function],
                                                    "notifyLayoutReady": [Function],
                                                    "notifyLayoutUpdate": [Function],
                                                    "notifyRender": [Function],
                                                    "notifySetAxisTarget": [Function],
                                                    "notifyUpdate": [Function],
                                                    "notifyViewportBoxUpdate": [Function],
                                                    "onAnimationComplete": [Function],
                                                    "onAnimationStart": [Function],
                                                    "onBeforeLayoutMeasure": [Function],
                                                    "onLayoutAnimationComplete": [Function],
                                                    "onLayoutMeasure": [Function],
                                                    "onLayoutUpdate": [Function],
                                                    "onRender": [Function],
                                                    "onSetAxisTarget": [Function],
                                                    "onUpdate": [Function],
                                                    "onViewportBoxUpdate": [Function],
                                                    "path": Array [],
                                                    "pointTo": [Function],
                                                    "presence": 0,
                                                    "presenceId": 0,
                                                    "projection": Object {
                                                      "isEnabled": false,
                                                      "isTargetLocked": false,
                                                      "target": Object {
                                                        "x": Object {
                                                          "max": 1,
                                                          "min": 0,
                                                        },
                                                        "y": Object {
                                                          "max": 1,
                                                          "min": 0,
                                                        },
                                                      },
                                                      "targetFinal": Object {
                                                        "x": Object {
                                                          "max": 1,
                                                          "min": 0,
                                                        },
                                                        "y": Object {
                                                          "max": 1,
                                                          "min": 0,
                                                        },
                                                      },
                                                    },
                                                    "readValue": [Function],
                                                    "rebaseProjectionTarget": [Function],
                                                    "ref": [Function],
                                                    "removeValue": [Function],
                                                    "resetTransform": [Function],
                                                    "scheduleRender": [Function],
                                                    "scheduleUpdateLayoutProjection": [Function],
                                                    "setBaseTarget": [Function],
                                                    "setCrossfader": [Function],
                                                    "setProjectionTargetAxis": [Function],
                                                    "setProps": [Function],
                                                    "setStaticValue": [Function],
                                                    "setVisibility": [Function],
                                                    "snapshotViewportBox": [Function],
                                                    "sortNodePosition": [Function],
                                                    "startLayoutAnimation": [Function],
                                                    "stopLayoutAnimation": [Function],
                                                    "suspendHoverEvents": [Function],
                                                    "syncRender": [Function],
                                                    "treeType": "dom",
                                                    "unlockProjectionTarget": [Function],
                                                    "updateLayoutMeasurement": [Function],
                                                    "updateLayoutProjection": [Function],
                                                    "updatePropListeners": [Function],
                                                    "variantChildren": Set {
                                                      [Circular],
                                                    },
                                                    "withoutTransform": [Function],
                                                  },
                                                ],
                                                "pointTo": [Function],
                                                "presence": 0,
                                                "presenceId": 0,
                                                "projection": Object {
                                                  "isEnabled": false,
                                                  "isTargetLocked": false,
                                                  "target": Object {
                                                    "x": Object {
                                                      "max": 1,
                                                      "min": 0,
                                                    },
                                                    "y": Object {
                                                      "max": 1,
                                                      "min": 0,
                                                    },
                                                  },
                                                  "targetFinal": Object {
                                                    "x": Object {
                                                      "max": 1,
                                                      "min": 0,
                                                    },
                                                    "y": Object {
                                                      "max": 1,
                                                      "min": 0,
                                                    },
                                                  },
                                                },
                                                "readValue": [Function],
                                                "rebaseProjectionTarget": [Function],
                                                "ref": [Function],
                                                "removeValue": [Function],
                                                "resetTransform": [Function],
                                                "scheduleRender": [Function],
                                                "scheduleUpdateLayoutProjection": [Function],
                                                "setBaseTarget": [Function],
                                                "setCrossfader": [Function],
                                                "setProjectionTargetAxis": [Function],
                                                "setProps": [Function],
                                                "setStaticValue": [Function],
                                                "setVisibility": [Function],
                                                "snapshotViewportBox": [Function],
                                                "sortNodePosition": [Function],
                                                "startLayoutAnimation": [Function],
                                                "stopLayoutAnimation": [Function],
                                                "suspendHoverEvents": [Function],
                                                "syncRender": [Function],
                                                "treeType": "dom",
                                                "unlockProjectionTarget": [Function],
                                                "updateLayoutMeasurement": [Function],
                                                "updateLayoutProjection": [Function],
                                                "updatePropListeners": [Function],
                                                "variantChildren": Set {},
                                                "withoutTransform": [Function],
                                              }
                                            }
                                            width="1.2em"
                                          />
                                        </ForwardRef(MotionComponent)>
                                      </CheckIcon>
                                    </div>
                                    <Component
                                      animate="checked"
                                      exit="unchecked"
                                      initial="unchecked"
                                      key="animation"
                                      style={
                                        Object {
                                          "alignItems": "center",
                                          "display": "flex",
                                          "height": "100%",
                                          "justifyContent": "center",
                                        }
                                      }
                                      variants={
                                        Object {
                                          "checked": Object {
                                            "scale": 1,
                                          },
                                          "unchecked": Object {
                                            "scale": 0.5,
                                          },
                                        }
                                      }
                                      visualElement={
                                        Object {
                                          "addChild": [Function],
                                          "addValue": [Function],
                                          "addVariantChild": [Function],
                                          "animationState": Object {
                                            "animateChanges": [Function],
                                            "getState": [Function],
                                            "isAnimated": [Function],
                                            "setActive": [Function],
                                            "setAnimateFunction": [Function],
                                          },
                                          "blockInitialAnimation": true,
                                          "build": [Function],
                                          "clearAllListeners": [Function],
                                          "clearState": [Function],
                                          "current": <div
                                            style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                          >
                                            <svg
                                              class="css-da6t8b"
                                              style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                              viewBox="0 0 12 10"
                                            >
                                              <polyline
                                                points="1.5 6 4.5 9 10.5 1"
                                              />
                                            </svg>
                                          </div>,
                                          "depth": 0,
                                          "enableLayoutProjection": [Function],
                                          "forEachValue": [Function],
                                          "getBaseTarget": [Function],
                                          "getClosestVariantNode": [Function],
                                          "getDefaultTransition": [Function],
                                          "getInstance": [Function],
                                          "getLatestValues": [Function],
                                          "getLayoutId": [Function],
                                          "getLayoutState": [Function],
                                          "getProjectionAnimationProgress": [Function],
                                          "getProps": [Function],
                                          "getStaticValue": [Function],
                                          "getValue": [Function],
                                          "getVariant": [Function],
                                          "getVariantContext": [Function],
                                          "hasValue": [Function],
                                          "isHoverEventsEnabled": true,
                                          "isMounted": [Function],
                                          "isPresenceRoot": true,
                                          "isPresent": true,
                                          "isStatic": false,
                                          "isVisible": undefined,
                                          "lockProjectionTarget": [Function],
                                          "makeTargetAnimatable": [Function],
                                          "manuallyAnimateOnMount": false,
                                          "measureViewportBox": [Function],
                                          "notifyAnimationComplete": [Function],
                                          "notifyAnimationStart": [Function],
                                          "notifyBeforeLayoutMeasure": [Function],
                                          "notifyLayoutAnimationComplete": [Function],
                                          "notifyLayoutMeasure": [Function],
                                          "notifyLayoutReady": [Function],
                                          "notifyLayoutUpdate": [Function],
                                          "notifyRender": [Function],
                                          "notifySetAxisTarget": [Function],
                                          "notifyUpdate": [Function],
                                          "notifyViewportBoxUpdate": [Function],
                                          "onAnimationComplete": [Function],
                                          "onAnimationStart": [Function],
                                          "onBeforeLayoutMeasure": [Function],
                                          "onLayoutAnimationComplete": [Function],
                                          "onLayoutMeasure": [Function],
                                          "onLayoutUpdate": [Function],
                                          "onRender": [Function],
                                          "onSetAxisTarget": [Function],
                                          "onUpdate": [Function],
                                          "onViewportBoxUpdate": [Function],
                                          "path": Array [],
                                          "pointTo": [Function],
                                          "presence": 0,
                                          "presenceId": 0,
                                          "projection": Object {
                                            "isEnabled": false,
                                            "isTargetLocked": false,
                                            "target": Object {
                                              "x": Object {
                                                "max": 1,
                                                "min": 0,
                                              },
                                              "y": Object {
                                                "max": 1,
                                                "min": 0,
                                              },
                                            },
                                            "targetFinal": Object {
                                              "x": Object {
                                                "max": 1,
                                                "min": 0,
                                              },
                                              "y": Object {
                                                "max": 1,
                                                "min": 0,
                                              },
                                            },
                                          },
                                          "readValue": [Function],
                                          "rebaseProjectionTarget": [Function],
                                          "ref": [Function],
                                          "removeValue": [Function],
                                          "resetTransform": [Function],
                                          "scheduleRender": [Function],
                                          "scheduleUpdateLayoutProjection": [Function],
                                          "setBaseTarget": [Function],
                                          "setCrossfader": [Function],
                                          "setProjectionTargetAxis": [Function],
                                          "setProps": [Function],
                                          "setStaticValue": [Function],
                                          "setVisibility": [Function],
                                          "snapshotViewportBox": [Function],
                                          "sortNodePosition": [Function],
                                          "startLayoutAnimation": [Function],
                                          "stopLayoutAnimation": [Function],
                                          "suspendHoverEvents": [Function],
                                          "syncRender": [Function],
                                          "treeType": "dom",
                                          "unlockProjectionTarget": [Function],
                                          "updateLayoutMeasurement": [Function],
                                          "updateLayoutProjection": [Function],
                                          "updatePropListeners": [Function],
                                          "variantChildren": Set {
                                            Object {
                                              "addChild": [Function],
                                              "addValue": [Function],
                                              "addVariantChild": [Function],
                                              "animationState": Object {
                                                "animateChanges": [Function],
                                                "getState": [Function],
                                                "isAnimated": [Function],
                                                "setActive": [Function],
                                                "setAnimateFunction": [Function],
                                              },
                                              "blockInitialAnimation": true,
                                              "build": [Function],
                                              "clearAllListeners": [Function],
                                              "clearState": [Function],
                                              "current": <svg
                                                class="css-da6t8b"
                                                style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                viewBox="0 0 12 10"
                                              >
                                                <polyline
                                                  points="1.5 6 4.5 9 10.5 1"
                                                />
                                              </svg>,
                                              "depth": 1,
                                              "enableLayoutProjection": [Function],
                                              "forEachValue": [Function],
                                              "getBaseTarget": [Function],
                                              "getClosestVariantNode": [Function],
                                              "getDefaultTransition": [Function],
                                              "getInstance": [Function],
                                              "getLatestValues": [Function],
                                              "getLayoutId": [Function],
                                              "getLayoutState": [Function],
                                              "getProjectionAnimationProgress": [Function],
                                              "getProps": [Function],
                                              "getStaticValue": [Function],
                                              "getValue": [Function],
                                              "getVariant": [Function],
                                              "getVariantContext": [Function],
                                              "hasValue": [Function],
                                              "isHoverEventsEnabled": true,
                                              "isMounted": [Function],
                                              "isPresenceRoot": false,
                                              "isPresent": true,
                                              "isStatic": false,
                                              "isVisible": undefined,
                                              "lockProjectionTarget": [Function],
                                              "makeTargetAnimatable": [Function],
                                              "manuallyAnimateOnMount": false,
                                              "measureViewportBox": [Function],
                                              "notifyAnimationComplete": [Function],
                                              "notifyAnimationStart": [Function],
                                              "notifyBeforeLayoutMeasure": [Function],
                                              "notifyLayoutAnimationComplete": [Function],
                                              "notifyLayoutMeasure": [Function],
                                              "notifyLayoutReady": [Function],
                                              "notifyLayoutUpdate": [Function],
                                              "notifyRender": [Function],
                                              "notifySetAxisTarget": [Function],
                                              "notifyUpdate": [Function],
                                              "notifyViewportBoxUpdate": [Function],
                                              "onAnimationComplete": [Function],
                                              "onAnimationStart": [Function],
                                              "onBeforeLayoutMeasure": [Function],
                                              "onLayoutAnimationComplete": [Function],
                                              "onLayoutMeasure": [Function],
                                              "onLayoutUpdate": [Function],
                                              "onRender": [Function],
                                              "onSetAxisTarget": [Function],
                                              "onUpdate": [Function],
                                              "onViewportBoxUpdate": [Function],
                                              "path": Array [
                                                [Circular],
                                              ],
                                              "pointTo": [Function],
                                              "presence": 0,
                                              "presenceId": 0,
                                              "projection": Object {
                                                "isEnabled": false,
                                                "isTargetLocked": false,
                                                "target": Object {
                                                  "x": Object {
                                                    "max": 1,
                                                    "min": 0,
                                                  },
                                                  "y": Object {
                                                    "max": 1,
                                                    "min": 0,
                                                  },
                                                },
                                                "targetFinal": Object {
                                                  "x": Object {
                                                    "max": 1,
                                                    "min": 0,
                                                  },
                                                  "y": Object {
                                                    "max": 1,
                                                    "min": 0,
                                                  },
                                                },
                                              },
                                              "readValue": [Function],
                                              "rebaseProjectionTarget": [Function],
                                              "ref": [Function],
                                              "removeValue": [Function],
                                              "resetTransform": [Function],
                                              "scheduleRender": [Function],
                                              "scheduleUpdateLayoutProjection": [Function],
                                              "setBaseTarget": [Function],
                                              "setCrossfader": [Function],
                                              "setProjectionTargetAxis": [Function],
                                              "setProps": [Function],
                                              "setStaticValue": [Function],
                                              "setVisibility": [Function],
                                              "snapshotViewportBox": [Function],
                                              "sortNodePosition": [Function],
                                              "startLayoutAnimation": [Function],
                                              "stopLayoutAnimation": [Function],
                                              "suspendHoverEvents": [Function],
                                              "syncRender": [Function],
                                              "treeType": "dom",
                                              "unlockProjectionTarget": [Function],
                                              "updateLayoutMeasurement": [Function],
                                              "updateLayoutProjection": [Function],
                                              "updatePropListeners": [Function],
                                              "variantChildren": Set {},
                                              "withoutTransform": [Function],
                                            },
                                          },
                                          "withoutTransform": [Function],
                                        }
                                      }
                                    />
                                    <Component
                                      animate="checked"
                                      exit="unchecked"
                                      initial="unchecked"
                                      key="exit"
                                      style={
                                        Object {
                                          "alignItems": "center",
                                          "display": "flex",
                                          "height": "100%",
                                          "justifyContent": "center",
                                        }
                                      }
                                      variants={
                                        Object {
                                          "checked": Object {
                                            "scale": 1,
                                          },
                                          "unchecked": Object {
                                            "scale": 0.5,
                                          },
                                        }
                                      }
                                      visualElement={
                                        Object {
                                          "addChild": [Function],
                                          "addValue": [Function],
                                          "addVariantChild": [Function],
                                          "animationState": Object {
                                            "animateChanges": [Function],
                                            "getState": [Function],
                                            "isAnimated": [Function],
                                            "setActive": [Function],
                                            "setAnimateFunction": [Function],
                                          },
                                          "blockInitialAnimation": true,
                                          "build": [Function],
                                          "clearAllListeners": [Function],
                                          "clearState": [Function],
                                          "current": <div
                                            style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                          >
                                            <svg
                                              class="css-da6t8b"
                                              style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                              viewBox="0 0 12 10"
                                            >
                                              <polyline
                                                points="1.5 6 4.5 9 10.5 1"
                                              />
                                            </svg>
                                          </div>,
                                          "depth": 0,
                                          "enableLayoutProjection": [Function],
                                          "forEachValue": [Function],
                                          "getBaseTarget": [Function],
                                          "getClosestVariantNode": [Function],
                                          "getDefaultTransition": [Function],
                                          "getInstance": [Function],
                                          "getLatestValues": [Function],
                                          "getLayoutId": [Function],
                                          "getLayoutState": [Function],
                                          "getProjectionAnimationProgress": [Function],
                                          "getProps": [Function],
                                          "getStaticValue": [Function],
                                          "getValue": [Function],
                                          "getVariant": [Function],
                                          "getVariantContext": [Function],
                                          "hasValue": [Function],
                                          "isHoverEventsEnabled": true,
                                          "isMounted": [Function],
                                          "isPresenceRoot": true,
                                          "isPresent": true,
                                          "isStatic": false,
                                          "isVisible": undefined,
                                          "lockProjectionTarget": [Function],
                                          "makeTargetAnimatable": [Function],
                                          "manuallyAnimateOnMount": false,
                                          "measureViewportBox": [Function],
                                          "notifyAnimationComplete": [Function],
                                          "notifyAnimationStart": [Function],
                                          "notifyBeforeLayoutMeasure": [Function],
                                          "notifyLayoutAnimationComplete": [Function],
                                          "notifyLayoutMeasure": [Function],
                                          "notifyLayoutReady": [Function],
                                          "notifyLayoutUpdate": [Function],
                                          "notifyRender": [Function],
                                          "notifySetAxisTarget": [Function],
                                          "notifyUpdate": [Function],
                                          "notifyViewportBoxUpdate": [Function],
                                          "onAnimationComplete": [Function],
                                          "onAnimationStart": [Function],
                                          "onBeforeLayoutMeasure": [Function],
                                          "onLayoutAnimationComplete": [Function],
                                          "onLayoutMeasure": [Function],
                                          "onLayoutUpdate": [Function],
                                          "onRender": [Function],
                                          "onSetAxisTarget": [Function],
                                          "onUpdate": [Function],
                                          "onViewportBoxUpdate": [Function],
                                          "path": Array [],
                                          "pointTo": [Function],
                                          "presence": 0,
                                          "presenceId": 0,
                                          "projection": Object {
                                            "isEnabled": false,
                                            "isTargetLocked": false,
                                            "target": Object {
                                              "x": Object {
                                                "max": 1,
                                                "min": 0,
                                              },
                                              "y": Object {
                                                "max": 1,
                                                "min": 0,
                                              },
                                            },
                                            "targetFinal": Object {
                                              "x": Object {
                                                "max": 1,
                                                "min": 0,
                                              },
                                              "y": Object {
                                                "max": 1,
                                                "min": 0,
                                              },
                                            },
                                          },
                                          "readValue": [Function],
                                          "rebaseProjectionTarget": [Function],
                                          "ref": [Function],
                                          "removeValue": [Function],
                                          "resetTransform": [Function],
                                          "scheduleRender": [Function],
                                          "scheduleUpdateLayoutProjection": [Function],
                                          "setBaseTarget": [Function],
                                          "setCrossfader": [Function],
                                          "setProjectionTargetAxis": [Function],
                                          "setProps": [Function],
                                          "setStaticValue": [Function],
                                          "setVisibility": [Function],
                                          "snapshotViewportBox": [Function],
                                          "sortNodePosition": [Function],
                                          "startLayoutAnimation": [Function],
                                          "stopLayoutAnimation": [Function],
                                          "suspendHoverEvents": [Function],
                                          "syncRender": [Function],
                                          "treeType": "dom",
                                          "unlockProjectionTarget": [Function],
                                          "updateLayoutMeasurement": [Function],
                                          "updateLayoutProjection": [Function],
                                          "updatePropListeners": [Function],
                                          "variantChildren": Set {
                                            Object {
                                              "addChild": [Function],
                                              "addValue": [Function],
                                              "addVariantChild": [Function],
                                              "animationState": Object {
                                                "animateChanges": [Function],
                                                "getState": [Function],
                                                "isAnimated": [Function],
                                                "setActive": [Function],
                                                "setAnimateFunction": [Function],
                                              },
                                              "blockInitialAnimation": true,
                                              "build": [Function],
                                              "clearAllListeners": [Function],
                                              "clearState": [Function],
                                              "current": <svg
                                                class="css-da6t8b"
                                                style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                viewBox="0 0 12 10"
                                              >
                                                <polyline
                                                  points="1.5 6 4.5 9 10.5 1"
                                                />
                                              </svg>,
                                              "depth": 1,
                                              "enableLayoutProjection": [Function],
                                              "forEachValue": [Function],
                                              "getBaseTarget": [Function],
                                              "getClosestVariantNode": [Function],
                                              "getDefaultTransition": [Function],
                                              "getInstance": [Function],
                                              "getLatestValues": [Function],
                                              "getLayoutId": [Function],
                                              "getLayoutState": [Function],
                                              "getProjectionAnimationProgress": [Function],
                                              "getProps": [Function],
                                              "getStaticValue": [Function],
                                              "getValue": [Function],
                                              "getVariant": [Function],
                                              "getVariantContext": [Function],
                                              "hasValue": [Function],
                                              "isHoverEventsEnabled": true,
                                              "isMounted": [Function],
                                              "isPresenceRoot": false,
                                              "isPresent": true,
                                              "isStatic": false,
                                              "isVisible": undefined,
                                              "lockProjectionTarget": [Function],
                                              "makeTargetAnimatable": [Function],
                                              "manuallyAnimateOnMount": false,
                                              "measureViewportBox": [Function],
                                              "notifyAnimationComplete": [Function],
                                              "notifyAnimationStart": [Function],
                                              "notifyBeforeLayoutMeasure": [Function],
                                              "notifyLayoutAnimationComplete": [Function],
                                              "notifyLayoutMeasure": [Function],
                                              "notifyLayoutReady": [Function],
                                              "notifyLayoutUpdate": [Function],
                                              "notifyRender": [Function],
                                              "notifySetAxisTarget": [Function],
                                              "notifyUpdate": [Function],
                                              "notifyViewportBoxUpdate": [Function],
                                              "onAnimationComplete": [Function],
                                              "onAnimationStart": [Function],
                                              "onBeforeLayoutMeasure": [Function],
                                              "onLayoutAnimationComplete": [Function],
                                              "onLayoutMeasure": [Function],
                                              "onLayoutUpdate": [Function],
                                              "onRender": [Function],
                                              "onSetAxisTarget": [Function],
                                              "onUpdate": [Function],
                                              "onViewportBoxUpdate": [Function],
                                              "path": Array [
                                                [Circular],
                                              ],
                                              "pointTo": [Function],
                                              "presence": 0,
                                              "presenceId": 0,
                                              "projection": Object {
                                                "isEnabled": false,
                                                "isTargetLocked": false,
                                                "target": Object {
                                                  "x": Object {
                                                    "max": 1,
                                                    "min": 0,
                                                  },
                                                  "y": Object {
                                                    "max": 1,
                                                    "min": 0,
                                                  },
                                                },
                                                "targetFinal": Object {
                                                  "x": Object {
                                                    "max": 1,
                                                    "min": 0,
                                                  },
                                                  "y": Object {
                                                    "max": 1,
                                                    "min": 0,
                                                  },
                                                },
                                              },
                                              "readValue": [Function],
                                              "rebaseProjectionTarget": [Function],
                                              "ref": [Function],
                                              "removeValue": [Function],
                                              "resetTransform": [Function],
                                              "scheduleRender": [Function],
                                              "scheduleUpdateLayoutProjection": [Function],
                                              "setBaseTarget": [Function],
                                              "setCrossfader": [Function],
                                              "setProjectionTargetAxis": [Function],
                                              "setProps": [Function],
                                              "setStaticValue": [Function],
                                              "setVisibility": [Function],
                                              "snapshotViewportBox": [Function],
                                              "sortNodePosition": [Function],
                                              "startLayoutAnimation": [Function],
                                              "stopLayoutAnimation": [Function],
                                              "suspendHoverEvents": [Function],
                                              "syncRender": [Function],
                                              "treeType": "dom",
                                              "unlockProjectionTarget": [Function],
                                              "updateLayoutMeasurement": [Function],
                                              "updateLayoutProjection": [Function],
                                              "updatePropListeners": [Function],
                                              "variantChildren": Set {},
                                              "withoutTransform": [Function],
                                            },
                                          },
                                          "withoutTransform": [Function],
                                        }
                                      }
                                    />
                                  </ForwardRef(MotionComponent)>
                                </PresenceChild>
                              </AnimatePresence>
                            </CheckboxTransition>
                          </CheckboxIcon>
                        </span>
                      </Styled(span)>
                      <Styled(span)
                        __css={
                          Object {
                            "_disabled": Object {
                              "opacity": 0.4,
                            },
                            "fontSize": "md",
                            "marginStart": "0.5rem",
                            "userSelect": "none",
                          }
                        }
                        className="chakra-checkbox__label"
                        data-checked=""
                        onMouseDown={[Function]}
                        onTouchStart={[Function]}
                      >
                        <span
                          className="chakra-checkbox__label css-1sgc0qu"
                          data-checked=""
                          onMouseDown={[Function]}
                          onTouchStart={[Function]}
                        >
                          Auto-create stops at set spacing
                        </span>
                      </Styled(span)>
                    </label>
                  </Styled(label)>
                </Checkbox>
                <NumberInput
                  key=".7"
                  label="Stop spacing"
                  onChange={[Function]}
                  test={[Function]}
                  units="meters"
                  value={3000}
                >
                  <FormControl
                    isInvalid={false}
                  >
                    <Styled(div)
                      __css={
                        Object {
                          "position": "relative",
                          "width": "100%",
                        }
                      }
                      className="chakra-form-control"
                      role="group"
                    >
                      <div
                        className="chakra-form-control css-1kxonj9"
                        role="group"
                      >
                        <FormLabel
                          htmlFor="00000000-0000-0000-0000-000000000000"
                        >
                          <Styled(label)
                            __css={
                              Object {
                                "_disabled": Object {
                                  "opacity": 0.4,
                                },
                                "display": "block",
                                "fontSize": "md",
                                "fontWeight": "medium",
                                "marginEnd": 3,
                                "mb": 2,
                                "opacity": 1,
                                "textAlign": "start",
                                "transition": "all 0.2s",
                              }
                            }
                            className="chakra-form__label"
                            htmlFor="00000000-0000-0000-0000-000000000000"
                            id="field-3-label"
                          >
                            <label
                              className="chakra-form__label css-10m1y3x"
                              htmlFor="00000000-0000-0000-0000-000000000000"
                              id="field-3-label"
                            >
                              Stop spacing
                            </label>
                          </Styled(label)>
                        </FormLabel>
                        <ForwardRef
                          id="00000000-0000-0000-0000-000000000000"
                          isInvalid={false}
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          placeholder=""
                          type="text"
                          units="meters"
                          value={3000}
                        >
                          <InputGroup>
                            <Styled(div)
                              __css={
                                Object {
                                  "display": "flex",
                                  "position": "relative",
                                  "width": "100%",
                                }
                              }
                              className="chakra-input__group"
                            >
                              <div
                                className="chakra-input__group css-4302v8"
                              >
                                <Input
                                  id="00000000-0000-0000-0000-000000000000"
                                  isInvalid={false}
                                  key=".0"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  paddingEnd={10}
                                  placeholder=""
                                  type="text"
                                  value={3000}
                                >
                                  <Styled(input)
                                    __css={
                                      Object {
                                        "_disabled": Object {
                                          "cursor": "not-allowed",
                                          "opacity": 0.4,
                                        },
                                        "_focus": Object {
                                          "borderColor": "#3182ce",
                                          "boxShadow": "0 0 0 1px #3182ce",
                                          "zIndex": 1,
                                        },
                                        "_hover": Object {
                                          "borderColor": "gray.300",
                                        },
                                        "_invalid": Object {
                                          "borderColor": "#E53E3E",
                                          "boxShadow": "0 0 0 1px #E53E3E",
                                        },
                                        "_readOnly": Object {
                                          "boxShadow": "none !important",
                                          "userSelect": "all",
                                        },
                                        "appearance": "none",
                                        "bg": "inherit",
                                        "border": "1px solid",
                                        "borderColor": "inherit",
                                        "borderRadius": "md",
                                        "fontSize": "md",
                                        "h": 10,
                                        "minWidth": 0,
                                        "outline": 0,
                                        "position": "relative",
                                        "px": 4,
                                        "transition": "all 0.2s",
                                        "width": "100%",
                                      }
                                    }
                                    className="chakra-input"
                                    disabled={false}
                                    id="00000000-0000-0000-0000-000000000000"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    paddingEnd={10}
                                    placeholder=""
                                    readOnly={false}
                                    required={false}
                                    type="text"
                                    value={3000}
                                  >
                                    <input
                                      className="chakra-input css-1qkmlc7"
                                      disabled={false}
                                      id="00000000-0000-0000-0000-000000000000"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      placeholder=""
                                      readOnly={false}
                                      required={false}
                                      type="text"
                                      value={3000}
                                    />
                                  </Styled(input)>
                                </Input>
                                <InputRightElement
                                  color="gray.400"
                                  key=".1"
                                  mr={2}
                                  userSelect="none"
                                  width="unset"
                                >
                                  <InputElement
                                    className="chakra-input__right-element"
                                    color="gray.400"
                                    mr={2}
                                    placement="right"
                                    userSelect="none"
                                    width="unset"
                                  >
                                    <Styled(div)
                                      __css={
                                        Object {
                                          "fontSize": "md",
                                          "height": 10,
                                          "insetEnd": "0",
                                          "width": 10,
                                        }
                                      }
                                      className="chakra-input__right-element"
                                      color="gray.400"
                                      mr={2}
                                      userSelect="none"
                                      width="unset"
                                    >
                                      <div
                                        className="chakra-input__right-element css-13i7m2h"
                                      >
                                        meters
                                      </div>
                                    </Styled(div)>
                                  </InputElement>
                                </InputRightElement>
                              </div>
                            </Styled(div)>
                          </InputGroup>
                        </ForwardRef>
                      </div>
                    </Styled(div)>
                  </FormControl>
                </NumberInput>
                <Checkbox
                  fontWeight="normal"
                  isChecked={false}
                  isDisabled={true}
                  key=".8"
                  onChange={[Function]}
                >
                  <Styled(label)
                    __css={Object {}}
                    className="chakra-checkbox"
                    data-disabled=""
                    fontWeight="normal"
                    onClick={[Function]}
                  >
                    <label
                      className="chakra-checkbox css-fnpc6t"
                      data-disabled=""
                      onClick={[Function]}
                    >
                      <input
                        aria-disabled={true}
                        checked={false}
                        className="chakra-checkbox__input"
                        disabled={true}
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        style={
                          Object {
                            "border": "0px",
                            "clip": "rect(0px, 0px, 0px, 0px)",
                            "height": "1px",
                            "margin": "-1px",
                            "overflow": "hidden",
                            "padding": "0px",
                            "position": "absolute",
                            "whiteSpace": "nowrap",
                            "width": "1px",
                          }
                        }
                        type="checkbox"
                      />
                      <Styled(span)
                        __css={
                          Object {
                            "_checked": Object {
                              "_disabled": Object {
                                "bg": "gray.200",
                                "borderColor": "gray.200",
                                "color": "gray.500",
                              },
                              "_hover": Object {
                                "bg": "blue.600",
                                "borderColor": "blue.600",
                              },
                              "bg": "blue.500",
                              "borderColor": "blue.500",
                              "color": "white",
                            },
                            "_disabled": Object {
                              "bg": "gray.100",
                              "borderColor": "gray.100",
                            },
                            "_focus": Object {
                              "boxShadow": "outline",
                            },
                            "_indeterminate": Object {
                              "bg": "blue.500",
                              "borderColor": "blue.500",
                              "color": "white",
                            },
                            "_invalid": Object {
                              "borderColor": "red.500",
                            },
                            "border": "2px solid",
                            "borderColor": "inherit",
                            "borderRadius": "sm",
                            "color": "white",
                            "h": 4,
                            "transition": "box-shadow 250ms",
                            "w": 4,
                          }
                        }
                        aria-hidden={true}
                        className="chakra-checkbox__control"
                        data-disabled=""
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                      >
                        <span
                          aria-hidden={true}
                          className="chakra-checkbox__control css-joz5u0"
                          data-disabled=""
                          onMouseDown={[Function]}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                        >
                          <CheckboxIcon
                            __css={
                              Object {
                                "color": undefined,
                                "fontSize": "0.625rem",
                                "opacity": 0,
                                "transform": "scale(0.95)",
                                "transition": "transform 200ms",
                              }
                            }
                            isChecked={false}
                          >
                            <CheckboxTransition>
                              <AnimatePresence
                                initial={false}
                              />
                            </CheckboxTransition>
                          </CheckboxIcon>
                        </span>
                      </Styled(span)>
                      <Styled(span)
                        __css={
                          Object {
                            "_disabled": Object {
                              "opacity": 0.4,
                            },
                            "fontSize": "md",
                            "marginStart": "0.5rem",
                            "userSelect": "none",
                          }
                        }
                        className="chakra-checkbox__label"
                        data-disabled=""
                        onMouseDown={[Function]}
                        onTouchStart={[Function]}
                      >
                        <span
                          className="chakra-checkbox__label css-1sgc0qu"
                          data-disabled=""
                          onMouseDown={[Function]}
                          onTouchStart={[Function]}
                        >
                          Bidirectional
                        </span>
                      </Styled(span)>
                    </label>
                  </Styled(label)>
                </Checkbox>
                <ForwardRef
                  key=".9"
                  status="info"
                >
                  <Styled(div)
                    __css={
                      Object {
                        "alignItems": "center",
                        "bg": "#bee3f8",
                        "display": "flex",
                        "overflow": "hidden",
                        "position": "relative",
                        "px": 4,
                        "py": 3,
                        "width": "100%",
                      }
                    }
                    className="chakra-alert"
                    role="alert"
                  >
                    <div
                      className="chakra-alert css-1adt752"
                      role="alert"
                    >
                      Modification cannot be bidirectional because timetables in this modification have phasing information.
                    </div>
                  </Styled(div)>
                </ForwardRef>
              </div>
            </Styled(div)>
          </Stack>
        </EditAlignment>
        <Timetables
          key=".4"
          modification={
            Object {
              "_id": "1234",
              "accessGroup": "accessGroupName",
              "bidirectional": false,
              "createdAt": "2017-11-08T12:30:50.133Z",
              "createdBy": "person@gmail.com",
              "description": "Mock description",
              "entries": Array [],
              "feed": "1",
              "name": "Test Modification",
              "nonce": "12345",
              "projectId": "1",
              "routes": Array [
                "route1",
              ],
              "segments": Array [
                Object {
                  "fromStopId": "1",
                  "geometry": Object {
                    "coordinates": Array [
                      Array [
                        -122.0246,
                        36.9707,
                      ],
                      Array [
                        -122.0279,
                        37.049,
                      ],
                      Array [
                        -121.9799,
                        37.2299,
                      ],
                      Array [
                        -121.9445,
                        37.324,
                      ],
                      Array [
                        -121.936,
                        37.353,
                      ],
                      Array [
                        -121.924,
                        37.365,
                      ],
                    ],
                    "type": "LineString",
                  },
                  "spacing": 3000,
                  "stopAtEnd": false,
                  "stopAtStart": false,
                  "toStopId": null,
                },
              ],
              "timetables": Array [
                Object {
                  "_id": "timetable-id",
                  "dwellTime": 10,
                  "dwellTimes": Array [
                    12,
                  ],
                  "endTime": 57600,
                  "exactTimes": false,
                  "friday": true,
                  "headwaySecs": 900,
                  "modificationId": "1234",
                  "modificationName": "Test Modification",
                  "monday": true,
                  "name": "Test timetable",
                  "patternTrips": Array [
                    "abcd",
                  ],
                  "phaseAtStop": "",
                  "phaseFromStop": "",
                  "phaseFromTimetable": "",
                  "phaseSeconds": 300,
                  "saturday": false,
                  "segmentSpeeds": Array [],
                  "sourceTrip": "abcd",
                  "startTime": 28800,
                  "sunday": false,
                  "thursday": true,
                  "tuesday": true,
                  "wednesday": true,
                },
              ],
              "trips": Array [
                "abcd",
              ],
              "type": "add-trip-pattern",
              "updatedAt": "2017-11-08T12:31:19.602Z",
              "updatedBy": "person@gmail.com",
              "variants": Array [
                true,
              ],
            }
          }
          modificationStops={
            Array [
              Object {
                "stop_id": "1:undefined",
              },
            ]
          }
          numberOfStops={16}
          timetables={
            Array [
              Object {
                "_id": "timetable-id",
                "dwellTime": 10,
                "dwellTimes": Array [
                  12,
                ],
                "endTime": 57600,
                "exactTimes": false,
                "friday": true,
                "headwaySecs": 900,
                "modificationId": "1234",
                "modificationName": "Test Modification",
                "monday": true,
                "name": "Test timetable",
                "patternTrips": Array [
                  "abcd",
                ],
                "phaseAtStop": "",
                "phaseFromStop": "",
                "phaseFromTimetable": "",
                "phaseSeconds": 300,
                "saturday": false,
                "segmentSpeeds": Array [],
                "sourceTrip": "abcd",
                "startTime": 28800,
                "sunday": false,
                "thursday": true,
                "tuesday": true,
                "wednesday": true,
              },
            ]
          }
          update={[MockFunction]}
        >
          <Stack
            spacing={4}
          >
            <Styled(div)
              __css={
                Object {
                  "& > *:not(style) ~ *:not(style)": Object {
                    "marginBottom": 0,
                    "marginEnd": 0,
                    "marginStart": 0,
                    "marginTop": 4,
                  },
                }
              }
              className="chakra-stack"
              display="flex"
              flexDirection="column"
            >
              <div
                className="chakra-stack css-egoftb"
              >
                <Heading
                  key=".0"
                  size="md"
                >
                  <Styled(h2)
                    __css={
                      Object {
                        "fontFamily": "heading",
                        "fontSize": "xl",
                        "fontWeight": "bold",
                        "lineHeight": 1.2,
                      }
                    }
                    className="chakra-heading"
                  >
                    <h2
                      className="chakra-heading css-18j379d"
                    >
                      Timetables (
                      1
                      )
                    </h2>
                  </Styled(h2)>
                </Heading>
                <Button
                  colorScheme="green"
                  isFullWidth={true}
                  key=".2"
                  leftIcon={<FaPlus />}
                  onClick={[Function]}
                >
                  <Styled(button)
                    __css={
                      Object {
                        "_active": Object {
                          "bg": "green.700",
                        },
                        "_disabled": Object {
                          "boxShadow": "none",
                          "cursor": "not-allowed",
                          "opacity": 0.4,
                        },
                        "_focus": Object {
                          "boxShadow": "outline",
                        },
                        "_hover": Object {
                          "_disabled": Object {
                            "bg": "green.500",
                          },
                          "bg": "green.600",
                        },
                        "alignItems": "center",
                        "appearance": "none",
                        "bg": "green.500",
                        "borderRadius": "md",
                        "color": "white",
                        "display": "inline-flex",
                        "fontSize": "md",
                        "fontWeight": "semibold",
                        "h": 10,
                        "justifyContent": "center",
                        "lineHeight": "1.2",
                        "minW": 10,
                        "outline": "none",
                        "position": "relative",
                        "px": 4,
                        "transition": "all 250ms",
                        "userSelect": "none",
                        "verticalAlign": "middle",
                        "whiteSpace": "nowrap",
                        "width": "100%",
                      }
                    }
                    className="chakra-button"
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="chakra-button css-3v23rq"
                      onClick={[Function]}
                      type="button"
                    >
                      <ButtonIcon
                        marginEnd="0.5rem"
                      >
                        <Styled(span)
                          alignSelf="center"
                          className="chakra-button__icon"
                          display="inline-flex"
                          flexShrink={0}
                          marginEnd="0.5rem"
                        >
                          <span
                            className="chakra-button__icon css-1wh2kri"
                          >
                            <FaPlus
                              aria-hidden={true}
                              focusable={false}
                            >
                              <IconBase
                                aria-hidden={true}
                                attr={
                                  Object {
                                    "viewBox": "0 0 448 512",
                                  }
                                }
                                focusable={false}
                              >
                                <svg
                                  aria-hidden={true}
                                  fill="currentColor"
                                  focusable={false}
                                  height="1em"
                                  stroke="currentColor"
                                  strokeWidth="0"
                                  style={
                                    Object {
                                      "color": undefined,
                                    }
                                  }
                                  viewBox="0 0 448 512"
                                  width="1em"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"
                                    key="0"
                                  />
                                </svg>
                              </IconBase>
                            </FaPlus>
                          </span>
                        </Styled(span)>
                      </ButtonIcon>
                      Add new timetable
                    </button>
                  </Styled(button)>
                </Button>
                <Box
                  key=".3"
                >
                  <div
                    className="css-0"
                  >
                    <CopyTimetableButton
                      create={[Function]}
                      intoModification={
                        Object {
                          "_id": "1234",
                          "accessGroup": "accessGroupName",
                          "bidirectional": false,
                          "createdAt": "2017-11-08T12:30:50.133Z",
                          "createdBy": "person@gmail.com",
                          "description": "Mock description",
                          "entries": Array [],
                          "feed": "1",
                          "name": "Test Modification",
                          "nonce": "12345",
                          "projectId": "1",
                          "routes": Array [
                            "route1",
                          ],
                          "segments": Array [
                            Object {
                              "fromStopId": "1",
                              "geometry": Object {
                                "coordinates": Array [
                                  Array [
                                    -122.0246,
                                    36.9707,
                                  ],
                                  Array [
                                    -122.0279,
                                    37.049,
                                  ],
                                  Array [
                                    -121.9799,
                                    37.2299,
                                  ],
                                  Array [
                                    -121.9445,
                                    37.324,
                                  ],
                                  Array [
                                    -121.936,
                                    37.353,
                                  ],
                                  Array [
                                    -121.924,
                                    37.365,
                                  ],
                                ],
                                "type": "LineString",
                              },
                              "spacing": 3000,
                              "stopAtEnd": false,
                              "stopAtStart": false,
                              "toStopId": null,
                            },
                          ],
                          "timetables": Array [
                            Object {
                              "_id": "timetable-id",
                              "dwellTime": 10,
                              "dwellTimes": Array [
                                12,
                              ],
                              "endTime": 57600,
                              "exactTimes": false,
                              "friday": true,
                              "headwaySecs": 900,
                              "modificationId": "1234",
                              "modificationName": "Test Modification",
                              "monday": true,
                              "name": "Test timetable",
                              "patternTrips": Array [
                                "abcd",
                              ],
                              "phaseAtStop": "",
                              "phaseFromStop": "",
                              "phaseFromTimetable": "",
                              "phaseSeconds": 300,
                              "saturday": false,
                              "segmentSpeeds": Array [],
                              "sourceTrip": "abcd",
                              "startTime": 28800,
                              "sunday": false,
                              "thursday": true,
                              "tuesday": true,
                              "wednesday": true,
                            },
                          ],
                          "trips": Array [
                            "abcd",
                          ],
                          "type": "add-trip-pattern",
                          "updatedAt": "2017-11-08T12:31:19.602Z",
                          "updatedBy": "person@gmail.com",
                          "variants": Array [
                            true,
                          ],
                        }
                      }
                    >
                      <Button
                        colorScheme="green"
                        isFullWidth={true}
                        leftIcon={<FaCopy />}
                        onClick={[Function]}
                      >
                        <Styled(button)
                          __css={
                            Object {
                              "_active": Object {
                                "bg": "green.700",
                              },
                              "_disabled": Object {
                                "boxShadow": "none",
                                "cursor": "not-allowed",
                                "opacity": 0.4,
                              },
                              "_focus": Object {
                                "boxShadow": "outline",
                              },
                              "_hover": Object {
                                "_disabled": Object {
                                  "bg": "green.500",
                                },
                                "bg": "green.600",
                              },
                              "alignItems": "center",
                              "appearance": "none",
                              "bg": "green.500",
                              "borderRadius": "md",
                              "color": "white",
                              "display": "inline-flex",
                              "fontSize": "md",
                              "fontWeight": "semibold",
                              "h": 10,
                              "justifyContent": "center",
                              "lineHeight": "1.2",
                              "minW": 10,
                              "outline": "none",
                              "position": "relative",
                              "px": 4,
                              "transition": "all 250ms",
                              "userSelect": "none",
                              "verticalAlign": "middle",
                              "whiteSpace": "nowrap",
                              "width": "100%",
                            }
                          }
                          className="chakra-button"
                          onClick={[Function]}
                          type="button"
                        >
                          <button
                            className="chakra-button css-3v23rq"
                            onClick={[Function]}
                            type="button"
                          >
                            <ButtonIcon
                              marginEnd="0.5rem"
                            >
                              <Styled(span)
                                alignSelf="center"
                                className="chakra-button__icon"
                                display="inline-flex"
                                flexShrink={0}
                                marginEnd="0.5rem"
                              >
                                <span
                                  className="chakra-button__icon css-1wh2kri"
                                >
                                  <FaCopy
                                    aria-hidden={true}
                                    focusable={false}
                                  >
                                    <IconBase
                                      aria-hidden={true}
                                      attr={
                                        Object {
                                          "viewBox": "0 0 448 512",
                                        }
                                      }
                                      focusable={false}
                                    >
                                      <svg
                                        aria-hidden={true}
                                        fill="currentColor"
                                        focusable={false}
                                        height="1em"
                                        stroke="currentColor"
                                        strokeWidth="0"
                                        style={
                                          Object {
                                            "color": undefined,
                                          }
                                        }
                                        viewBox="0 0 448 512"
                                        width="1em"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          d="M320 448v40c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V120c0-13.255 10.745-24 24-24h72v296c0 30.879 25.121 56 56 56h168zm0-344V0H152c-13.255 0-24 10.745-24 24v368c0 13.255 10.745 24 24 24h272c13.255 0 24-10.745 24-24V128H344c-13.2 0-24-10.8-24-24zm120.971-31.029L375.029 7.029A24 24 0 0 0 358.059 0H352v96h96v-6.059a24 24 0 0 0-7.029-16.97z"
                                          key="0"
                                        />
                                      </svg>
                                    </IconBase>
                                  </FaCopy>
                                </span>
                              </Styled(span)>
                            </ButtonIcon>
                            Copy existing timetable
                          </button>
                        </Styled(button)>
                      </Button>
                    </CopyTimetableButton>
                  </div>
                </Box>
                <TimetableComponent
                  key=".4:$timetable-0"
                  modificationStops={
                    Array [
                      Object {
                        "stop_id": "1:undefined",
                      },
                    ]
                  }
                  numberOfStops={16}
                  remove={[Function]}
                  segmentDistances={
                    Array [
                      45.20952310850887,
                    ]
                  }
                  timetable={
                    Object {
                      "_id": "timetable-id",
                      "dwellTime": 10,
                      "dwellTimes": Array [
                        12,
                      ],
                      "endTime": 57600,
                      "exactTimes": false,
                      "friday": true,
                      "headwaySecs": 900,
                      "modificationId": "1234",
                      "modificationName": "Test Modification",
                      "monday": true,
                      "name": "Test timetable",
                      "patternTrips": Array [
                        "abcd",
                      ],
                      "phaseAtStop": "",
                      "phaseFromStop": "",
                      "phaseFromTimetable": "",
                      "phaseSeconds": 300,
                      "saturday": false,
                      "segmentSpeeds": Array [],
                      "sourceTrip": "abcd",
                      "startTime": 28800,
                      "sunday": false,
                      "thursday": true,
                      "tuesday": true,
                      "wednesday": true,
                    }
                  }
                  update={[Function]}
                >
                  <Collapsible
                    defaultExpanded={false}
                    heading={
                      <React.Fragment>
                        <FaCalendar
                          style={
                            Object {
                              "display": "inline-block",
                            }
                          }
                        />
                        <strong>
                           
                          Test timetable
                        </strong>
                      </React.Fragment>
                    }
                  >
                    <Panel>
                      <Box
                        borderWidth="1px"
                        shadow="xs"
                      >
                        <div
                          className="css-1u5vydh"
                        >
                          <Heading
                            onClick={[Function]}
                            style={
                              Object {
                                "cursor": "pointer",
                              }
                            }
                          >
                            <Flex
                              bg="gray.50"
                              justify="space-between"
                              onClick={[Function]}
                              p={4}
                              role="button"
                              style={
                                Object {
                                  "cursor": "pointer",
                                }
                              }
                            >
                              <Styled(div)
                                __css={
                                  Object {
                                    "alignItems": undefined,
                                    "display": "flex",
                                    "flexBasis": undefined,
                                    "flexDirection": undefined,
                                    "flexGrow": undefined,
                                    "flexShrink": undefined,
                                    "flexWrap": undefined,
                                    "justifyContent": "space-between",
                                  }
                                }
                                bg="gray.50"
                                onClick={[Function]}
                                p={4}
                                role="button"
                                style={
                                  Object {
                                    "cursor": "pointer",
                                  }
                                }
                              >
                                <div
                                  className="css-1yeuco"
                                  onClick={[Function]}
                                  role="button"
                                  style={
                                    Object {
                                      "cursor": "pointer",
                                    }
                                  }
                                >
                                  <Box>
                                    <div
                                      className="css-0"
                                    >
                                      <FaCalendar
                                        style={
                                          Object {
                                            "display": "inline-block",
                                          }
                                        }
                                      >
                                        <IconBase
                                          attr={
                                            Object {
                                              "viewBox": "0 0 448 512",
                                            }
                                          }
                                          style={
                                            Object {
                                              "display": "inline-block",
                                            }
                                          }
                                        >
                                          <svg
                                            fill="currentColor"
                                            height="1em"
                                            stroke="currentColor"
                                            strokeWidth="0"
                                            style={
                                              Object {
                                                "color": undefined,
                                                "display": "inline-block",
                                              }
                                            }
                                            viewBox="0 0 448 512"
                                            width="1em"
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <path
                                              d="M12 192h424c6.6 0 12 5.4 12 12v260c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V204c0-6.6 5.4-12 12-12zm436-44v-36c0-26.5-21.5-48-48-48h-48V12c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v52H160V12c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v52H48C21.5 64 0 85.5 0 112v36c0 6.6 5.4 12 12 12h424c6.6 0 12-5.4 12-12z"
                                              key="0"
                                            />
                                          </svg>
                                        </IconBase>
                                      </FaCalendar>
                                      <strong>
                                         
                                        Test timetable
                                      </strong>
                                    </div>
                                  </Box>
                                  <Box>
                                    <div
                                      className="css-0"
                                    >
                                      <FaCaretRight>
                                        <IconBase
                                          attr={
                                            Object {
                                              "viewBox": "0 0 192 512",
                                            }
                                          }
                                        >
                                          <svg
                                            fill="currentColor"
                                            height="1em"
                                            stroke="currentColor"
                                            strokeWidth="0"
                                            style={
                                              Object {
                                                "color": undefined,
                                              }
                                            }
                                            viewBox="0 0 192 512"
                                            width="1em"
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <path
                                              d="M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z"
                                              key="0"
                                            />
                                          </svg>
                                        </IconBase>
                                      </FaCaretRight>
                                    </div>
                                  </Box>
                                </div>
                              </Styled(div)>
                            </Flex>
                          </Heading>
                        </div>
                      </Box>
                    </Panel>
                  </Collapsible>
                </TimetableComponent>
              </div>
            </Styled(div)>
          </Stack>
        </Timetables>
      </div>
    </Styled(div)>
  </Stack>
</AddTripPattern>
`;
