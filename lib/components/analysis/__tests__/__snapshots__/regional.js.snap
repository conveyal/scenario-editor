// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Components > Analysis > Regional should handle rendering comparison 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <RegionalResults
    accessToName="Grid name"
    aggregationAreas={Array []}
    analysis={
      Object {
        "_id": "abcd",
        "accessGroup": "accessGroupName",
        "bounds": Object {},
        "bundleId": "5678",
        "complete": true,
        "createdAt": "2017-11-08T12:30:50.133Z",
        "createdBy": "person@gmail.com",
        "cutoffMinutes": 60,
        "deleted": false,
        "grid": "Jobs_total",
        "height": 300,
        "name": "ANALYSIS 1",
        "nonce": "12345",
        "north": 20024,
        "projectId": "1234",
        "request": Object {
          "accessModes": "WALK",
          "bikeSafe": 1,
          "bikeSlope": 1,
          "bikeSpeed": 4.166666666666667,
          "bikeTime": 1,
          "bounds": Object {
            "east": -76,
            "north": 39,
            "south": 38,
            "west": -77,
          },
          "bundleId": "1",
          "date": "2016-01-16",
          "defaultExpanded": true,
          "directModes": "WALK",
          "egressModes": "WALK",
          "fromLat": 12,
          "fromLon": 34,
          "fromTime": 25200,
          "maxBikeTime": 20,
          "maxRides": 4,
          "maxTripDurationMinutes": 60,
          "maxWalkTime": 20,
          "monteCarloDraws": 200,
          "name": "Profile Request Test",
          "projectId": "1",
          "reachabilityThreshold": 0,
          "regionId": "1",
          "toTime": 32400,
          "transitModes": "BUS,TRAM,RAIL,SUBWAY",
          "travelTimePercentile": 50,
          "variantIndex": 0,
          "walkSpeed": 1.3888888888888888,
          "workerVersion": "v4.0.0",
        },
        "status": "DONE",
        "travelTimePercentile": -1,
        "updatedAt": "2017-11-08T12:31:19.602Z",
        "updatedBy": "person@gmail.com",
        "variant": 0,
        "west": 20015,
        "width": 300,
        "workerVersion": "v3.2.0",
        "zoom": 9,
      }
    }
    analysisId="abcd"
    breaks={
      Array [
        100,
        500,
        1000,
        2000,
      ]
    }
    comparisonAnalysis={
      Object {
        "_id": "efgh",
        "accessGroup": "accessGroupName",
        "bounds": Object {},
        "bundleId": "5678",
        "complete": true,
        "createdAt": "2017-11-08T12:30:50.133Z",
        "createdBy": "person@gmail.com",
        "cutoffMinutes": 60,
        "deleted": false,
        "grid": "Jobs_total",
        "height": 300,
        "name": "ANALYSIS 2",
        "nonce": "12345",
        "north": 20024,
        "projectId": "4321",
        "request": Object {
          "accessModes": "WALK",
          "bikeSafe": 1,
          "bikeSlope": 1,
          "bikeSpeed": 4.166666666666667,
          "bikeTime": 1,
          "bounds": Object {
            "east": -76,
            "north": 39,
            "south": 38,
            "west": -77,
          },
          "bundleId": "1",
          "date": "2016-01-16",
          "defaultExpanded": true,
          "directModes": "WALK",
          "egressModes": "WALK",
          "fromLat": 12,
          "fromLon": 34,
          "fromTime": 25200,
          "maxBikeTime": 20,
          "maxRides": 4,
          "maxTripDurationMinutes": 60,
          "maxWalkTime": 20,
          "monteCarloDraws": 200,
          "name": "Profile Request Test",
          "projectId": "1",
          "reachabilityThreshold": 0,
          "regionId": "1",
          "toTime": 32400,
          "transitModes": "BUS,TRAM,RAIL,SUBWAY",
          "travelTimePercentile": 50,
          "variantIndex": 0,
          "walkSpeed": 1.3888888888888888,
          "workerVersion": "v4.0.0",
        },
        "status": "DONE",
        "travelTimePercentile": 42,
        "updatedAt": "2017-11-08T12:31:19.602Z",
        "updatedBy": "person@gmail.com",
        "variant": 1,
        "west": 20015,
        "width": 300,
        "workerVersion": "v3.2.0",
        "zoom": 9,
      }
    }
    deleteAnalysis={[MockFunction]}
    differenceGrid={
      Object {
        "contains": [Function],
        "data": Array [],
        "height": 300,
        "max": 2000,
        "min": 0,
        "north": 20024,
        "west": 20015,
        "width": 300,
        "zoom": 9,
      }
    }
    fetch={[MockFunction]}
    grid={
      Object {
        "contains": [Function],
        "data": Array [],
        "height": 300,
        "max": 2000,
        "min": 0,
        "north": 20024,
        "west": 20015,
        "width": 300,
        "zoom": 9,
      }
    }
    loadRegionalAnalyses={[MockFunction]}
    loadRegionalAnalysisGrids={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "_id": "abcd",
            },
          ],
        ],
      }
    }
    minimumImprovementProbability={0.83}
    opportunityDatasets={
      Array [
        Object {
          "_id": "Jobs_total",
          "name": "Total jobs",
        },
      ]
    }
    projectId="MOCK_PROJECT_ID"
    regionId="MOCK_REGION_ID"
    regionalAnalyses={
      Array [
        Object {
          "_id": "abcd",
          "accessGroup": "accessGroupName",
          "bounds": Object {},
          "bundleId": "5678",
          "complete": true,
          "createdAt": "2017-11-08T12:30:50.133Z",
          "createdBy": "person@gmail.com",
          "cutoffMinutes": 60,
          "deleted": false,
          "grid": "Jobs_total",
          "height": 300,
          "name": "ANALYSIS 1",
          "nonce": "12345",
          "north": 20024,
          "projectId": "1234",
          "request": Object {
            "accessModes": "WALK",
            "bikeSafe": 1,
            "bikeSlope": 1,
            "bikeSpeed": 4.166666666666667,
            "bikeTime": 1,
            "bounds": Object {
              "east": -76,
              "north": 39,
              "south": 38,
              "west": -77,
            },
            "bundleId": "1",
            "date": "2016-01-16",
            "defaultExpanded": true,
            "directModes": "WALK",
            "egressModes": "WALK",
            "fromLat": 12,
            "fromLon": 34,
            "fromTime": 25200,
            "maxBikeTime": 20,
            "maxRides": 4,
            "maxTripDurationMinutes": 60,
            "maxWalkTime": 20,
            "monteCarloDraws": 200,
            "name": "Profile Request Test",
            "projectId": "1",
            "reachabilityThreshold": 0,
            "regionId": "1",
            "toTime": 32400,
            "transitModes": "BUS,TRAM,RAIL,SUBWAY",
            "travelTimePercentile": 50,
            "variantIndex": 0,
            "walkSpeed": 1.3888888888888888,
            "workerVersion": "v4.0.0",
          },
          "status": "DONE",
          "travelTimePercentile": -1,
          "updatedAt": "2017-11-08T12:31:19.602Z",
          "updatedBy": "person@gmail.com",
          "variant": 0,
          "west": 20015,
          "width": 300,
          "workerVersion": "v3.2.0",
          "zoom": 9,
        },
        Object {
          "_id": "efgh",
          "accessGroup": "accessGroupName",
          "bounds": Object {},
          "bundleId": "5678",
          "complete": true,
          "createdAt": "2017-11-08T12:30:50.133Z",
          "createdBy": "person@gmail.com",
          "cutoffMinutes": 60,
          "deleted": false,
          "grid": "Jobs_total",
          "height": 300,
          "name": "ANALYSIS 2",
          "nonce": "12345",
          "north": 20024,
          "projectId": "4321",
          "request": Object {
            "accessModes": "WALK",
            "bikeSafe": 1,
            "bikeSlope": 1,
            "bikeSpeed": 4.166666666666667,
            "bikeTime": 1,
            "bounds": Object {
              "east": -76,
              "north": 39,
              "south": 38,
              "west": -77,
            },
            "bundleId": "1",
            "date": "2016-01-16",
            "defaultExpanded": true,
            "directModes": "WALK",
            "egressModes": "WALK",
            "fromLat": 12,
            "fromLon": 34,
            "fromTime": 25200,
            "maxBikeTime": 20,
            "maxRides": 4,
            "maxTripDurationMinutes": 60,
            "maxWalkTime": 20,
            "monteCarloDraws": 200,
            "name": "Profile Request Test",
            "projectId": "1",
            "reachabilityThreshold": 0,
            "regionId": "1",
            "toTime": 32400,
            "transitModes": "BUS,TRAM,RAIL,SUBWAY",
            "travelTimePercentile": 50,
            "variantIndex": 0,
            "walkSpeed": 1.3888888888888888,
            "workerVersion": "v4.0.0",
          },
          "status": "DONE",
          "travelTimePercentile": 42,
          "updatedAt": "2017-11-08T12:31:19.602Z",
          "updatedBy": "person@gmail.com",
          "variant": 1,
          "west": 20015,
          "width": 300,
          "workerVersion": "v3.2.0",
          "zoom": 9,
        },
      ]
    }
    scenarioId="MOCK"
    setActiveRegionalAnalysis={[MockFunction]}
    setAggregationArea={[MockFunction]}
    setAggregationWeights={[MockFunction]}
    setMinimumImprovementProbability={
      [MockFunction] {
        "calls": Array [
          Array [
            0.55,
          ],
        ],
      }
    }
    uploadAggregationArea={[MockFunction]}
  >
    <div>
      <Group
        label="Compare to"
      >
        <div
          className="form-group"
        >
          <label
            htmlFor="compare-to-input-3"
          >
            Compare to
          </label>
          <Select
            arrowRenderer={[Function]}
            autosize={true}
            backspaceRemoves={true}
            backspaceToRemoveMessage="Press backspace to remove {label}"
            clearAllText="Clear all"
            clearRenderer={[Function]}
            clearValueText="Clear value"
            clearable={true}
            closeOnSelect={true}
            deleteRemoves={true}
            delimiter=","
            disabled={false}
            escapeClearsValue={true}
            filterOptions={[Function]}
            ignoreAccents={true}
            ignoreCase={true}
            inputProps={Object {}}
            isLoading={false}
            joinValues={false}
            labelKey="label"
            matchPos="any"
            matchProp="any"
            menuBuffer={0}
            menuRenderer={[Function]}
            multi={false}
            noResultsText="No results found"
            onBlurResetsInput={true}
            onChange={[Function]}
            onCloseResetsInput={true}
            onSelectResetsInput={true}
            openOnClick={true}
            optionComponent={[Function]}
            options={
              Array [
                Object {
                  "label": "ANALYSIS 2",
                  "value": "efgh",
                },
              ]
            }
            pageSize={5}
            placeholder="Select..."
            removeSelected={true}
            required={false}
            rtl={false}
            scrollMenuIntoView={true}
            searchable={true}
            simpleValue={false}
            tabSelectsValue={true}
            trimFilter={true}
            value="efgh"
            valueComponent={[Function]}
            valueKey="value"
          >
            <div
              className="Select has-value is-clearable is-searchable Select--single"
            >
              <div
                className="Select-control"
                onKeyDown={[Function]}
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
              >
                <span
                  className="Select-multi-value-wrapper"
                  id="react-select-4--value"
                >
                  <Value
                    disabled={false}
                    id="react-select-4--value-item"
                    instancePrefix="react-select-4-"
                    onClick={null}
                    placeholder="Select..."
                    value={
                      Object {
                        "label": "ANALYSIS 2",
                        "value": "efgh",
                      }
                    }
                  >
                    <div
                      className="Select-value"
                    >
                      <span
                        aria-selected="true"
                        className="Select-value-label"
                        id="react-select-4--value-item"
                        role="option"
                      >
                        ANALYSIS 2
                      </span>
                    </div>
                  </Value>
                  <AutosizeInput
                    aria-activedescendant="react-select-4--value"
                    aria-expanded="false"
                    aria-haspopup="false"
                    aria-owns=""
                    className="Select-input"
                    injectStyles={true}
                    minWidth="5"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    required={false}
                    role="combobox"
                    value=""
                  />
                </span>
                <span
                  aria-label="Clear value"
                  className="Select-clear-zone"
                  onMouseDown={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  title="Clear value"
                >
                  <span
                    className="Select-clear"
                    dangerouslySetInnerHTML={
                      Object {
                        "__html": "&times;",
                      }
                    }
                  />
                </span>
                <span
                  className="Select-arrow-zone"
                  onMouseDown={[Function]}
                >
                  <span
                    className="Select-arrow"
                    onMouseDown={[Function]}
                  />
                </span>
              </div>
            </div>
          </Select>
        </div>
      </Group>
      <div>
        <ProfileRequestDisplay
          _id="efgh"
          accessGroup="accessGroupName"
          accessModes="WALK"
          bikeSafe={1}
          bikeSlope={1}
          bikeSpeed={4.166666666666667}
          bikeTime={1}
          bounds={
            Object {
              "east": -76,
              "north": 39,
              "south": 38,
              "west": -77,
            }
          }
          bundleId="1"
          complete={true}
          createdAt="2017-11-08T12:30:50.133Z"
          createdBy="person@gmail.com"
          cutoffMinutes={60}
          date="2016-01-16"
          defaultExpanded={true}
          deleted={false}
          directModes="WALK"
          egressModes="WALK"
          fromLat={12}
          fromLon={34}
          fromTime={25200}
          grid="Jobs_total"
          height={300}
          maxBikeTime={20}
          maxRides={4}
          maxTripDurationMinutes={60}
          maxWalkTime={20}
          monteCarloDraws={200}
          name="Profile Request Test"
          nonce="12345"
          north={20024}
          projectId="1"
          reachabilityThreshold={0}
          regionId="1"
          request={
            Object {
              "accessModes": "WALK",
              "bikeSafe": 1,
              "bikeSlope": 1,
              "bikeSpeed": 4.166666666666667,
              "bikeTime": 1,
              "bounds": Object {
                "east": -76,
                "north": 39,
                "south": 38,
                "west": -77,
              },
              "bundleId": "1",
              "date": "2016-01-16",
              "defaultExpanded": true,
              "directModes": "WALK",
              "egressModes": "WALK",
              "fromLat": 12,
              "fromLon": 34,
              "fromTime": 25200,
              "maxBikeTime": 20,
              "maxRides": 4,
              "maxTripDurationMinutes": 60,
              "maxWalkTime": 20,
              "monteCarloDraws": 200,
              "name": "Profile Request Test",
              "projectId": "1",
              "reachabilityThreshold": 0,
              "regionId": "1",
              "toTime": 32400,
              "transitModes": "BUS,TRAM,RAIL,SUBWAY",
              "travelTimePercentile": 50,
              "variantIndex": 0,
              "walkSpeed": 1.3888888888888888,
              "workerVersion": "v4.0.0",
            }
          }
          status="DONE"
          toTime={32400}
          transitModes="BUS,TRAM,RAIL,SUBWAY"
          travelTimePercentile={50}
          updatedAt="2017-11-08T12:31:19.602Z"
          updatedBy="person@gmail.com"
          variant={1}
          variantIndex={0}
          walkSpeed={1.3888888888888888}
          west={20015}
          width={300}
          workerVersion="v4.0.0"
          zoom={9}
        >
          <Collapsible
            defaultExpanded={true}
            title="Profile Request Test settings"
          >
            <div>
              <div
                aria-level={3}
                role="heading"
              >
                <a
                  aria-expanded={true}
                  className="CollapsibleButton"
                  onClick={[Function]}
                  role="button"
                  tabIndex={0}
                >
                  <Icon
                    type="caret-down"
                  >
                    <i
                      className="fa fa-caret-down fa-fw "
                    />
                  </Icon>
                  <strong>
                    Profile Request Test settings
                  </strong>
                </a>
              </div>
              <table
                className="table table-striped table-condensed"
              >
                <tbody>
                  <tr>
                    <th>
                      Resources
                    </th>
                    <td>
                      <a
                        href="/regions/1/bundles/1"
                        target="_blank"
                      >
                        GTFS Bundle
                      </a>
                       / 
                      <a
                        href="/regions/1/projects/1"
                        target="_blank"
                      >
                        Project
                      </a>
                    </td>
                  </tr>
                  <tr>
                    <th>
                      Routing engine
                    </th>
                    <td>
                      v4.0.0
                    </td>
                  </tr>
                  <tr>
                    <th>
                      Date
                    </th>
                    <td>
                      2016-01-16
                    </td>
                  </tr>
                  <tr>
                    <th>
                      From time
                    </th>
                    <td>
                      07:00
                    </td>
                  </tr>
                  <tr>
                    <th>
                      To time
                    </th>
                    <td>
                      09:00
                    </td>
                  </tr>
                  <tr>
                    <th>
                      Maximum transfers
                    </th>
                    <td>
                      3
                    </td>
                  </tr>
                  <tr>
                    <th>
                      Simulated schedules
                    </th>
                    <td>
                      200
                    </td>
                  </tr>
                  <tr>
                    <th>
                      Access modes
                    </th>
                    <td>
                      <Modes
                        modes="WALK"
                      >
                        <span>
                          <Icon
                            title="Walk"
                            type="male"
                          >
                            <i
                              className="fa fa-male fa-fw "
                              title="Walk"
                            />
                          </Icon>
                        </span>
                      </Modes>
                    </td>
                  </tr>
                  <tr>
                    <th>
                      Transit
                    </th>
                    <td>
                      yes
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </Collapsible>
        </ProfileRequestDisplay>
      </div>
      <MinimumImprovementProbabilitySelector
        minimumImprovementProbability={0.83}
        setMinimumImprovementProbability={
          [MockFunction] {
            "calls": Array [
              Array [
                0.55,
              ],
            ],
          }
        }
      >
        <Slider
          format=".2f"
          label="Minimum probability of change"
          max={1}
          min={0}
          onChange={[Function]}
          output={true}
          step={0.01}
          value={0.83}
        >
          <Group
            id="minimum-probability-of-change-input-7"
            label="Minimum probability of change"
            max={1}
            min={0}
            onChange={[Function]}
            step={0.01}
            value={0.83}
          >
            <div
              className="form-group"
            >
              <label
                htmlFor="minimum-probability-of-change-input-7"
              >
                Minimum probability of change
              </label>
              <output
                className="pull-right"
                htmlFor="minimum-probability-of-change-input-7"
              >
                0.55
              </output>
              <input
                className="form-control"
                id="minimum-probability-of-change-input-7"
                label="Minimum probability of change"
                max={1}
                min={0}
                onChange={[Function]}
                step={0.01}
                type="range"
                value={0.55}
              />
            </div>
          </Group>
        </Slider>
      </MinimumImprovementProbabilitySelector>
      <p>
        Total jobs within 60 minutes (average instantaneous accessibility)
      </p>
      <p>
        compared with Total jobs within 60 minutes (percentile 42)
      </p>
      <Legend
        breaks={
          Array [
            100,
            500,
            1000,
            2000,
          ]
        }
        colors={
          Array [
            "rgba(215, 25, 28, 0.42)",
            "rgba(252, 174, 97, 0.42)",
            "rgba(255, 255, 191, 0.42)",
            "rgba(171, 217, 233, 0.42)",
            "rgba(44, 123, 182, 0.42)",
          ]
        }
        min={0}
      >
        <ul
          className="Legend"
        >
          <Break
            bottom={0}
            color="rgba(215, 25, 28, 0.42)"
            top={100}
          >
            <li
              className="Legend-Item"
              style={
                Object {
                  "backgroundColor": "rgb(215, 25, 28)",
                  "color": "#fff",
                }
              }
            >
              0
              –
              100
            </li>
          </Break>
          <Break
            bottom={100}
            color="rgba(252, 174, 97, 0.42)"
            top={500}
          >
            <li
              className="Legend-Item"
              style={
                Object {
                  "backgroundColor": "rgb(252, 174, 97)",
                  "color": "#000",
                }
              }
            >
              100
              –
              500
            </li>
          </Break>
          <Break
            bottom={500}
            color="rgba(255, 255, 191, 0.42)"
            top={1000}
          >
            <li
              className="Legend-Item"
              style={
                Object {
                  "backgroundColor": "rgb(255, 255, 191)",
                  "color": "#000",
                }
              }
            >
              500
              –
              1,000
            </li>
          </Break>
          <Break
            bottom={1000}
            color="rgba(171, 217, 233, 0.42)"
            top={2000}
          >
            <li
              className="Legend-Item"
              style={
                Object {
                  "backgroundColor": "rgb(171, 217, 233)",
                  "color": "#000",
                }
              }
            >
              1,000
              –
              2,000
            </li>
          </Break>
        </ul>
      </Legend>
      <div>
        <Group
          label="Aggregate results to"
        >
          <div
            className="form-group"
          >
            <label
              htmlFor="aggregate-results-to-input-5"
            >
              Aggregate results to
            </label>
            <Select
              arrowRenderer={[Function]}
              autosize={true}
              backspaceRemoves={true}
              backspaceToRemoveMessage="Press backspace to remove {label}"
              clearAllText="Clear all"
              clearRenderer={[Function]}
              clearValueText="Clear value"
              clearable={true}
              closeOnSelect={true}
              deleteRemoves={true}
              delimiter=","
              disabled={false}
              escapeClearsValue={true}
              filterOptions={[Function]}
              ignoreAccents={true}
              ignoreCase={true}
              inputProps={Object {}}
              isLoading={false}
              joinValues={false}
              labelKey="label"
              matchPos="any"
              matchProp="any"
              menuBuffer={0}
              menuRenderer={[Function]}
              multi={false}
              name="aggregateTo"
              noResultsText="No results found"
              onBlurResetsInput={true}
              onChange={[Function]}
              onCloseResetsInput={true}
              onSelectResetsInput={true}
              openOnClick={true}
              optionComponent={[Function]}
              options={
                Array [
                  Object {
                    "label": "Upload new aggregation area",
                    "value": "new-aggregation-area",
                  },
                ]
              }
              pageSize={5}
              placeholder="Select..."
              removeSelected={true}
              required={false}
              rtl={false}
              scrollMenuIntoView={true}
              searchable={true}
              simpleValue={false}
              tabSelectsValue={true}
              trimFilter={true}
              valueComponent={[Function]}
              valueKey="value"
            >
              <div
                className="Select is-clearable is-searchable Select--single"
              >
                <div
                  className="Select-control"
                  onKeyDown={[Function]}
                  onMouseDown={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                >
                  <span
                    className="Select-multi-value-wrapper"
                    id="react-select-5--value"
                  >
                    <div
                      className="Select-placeholder"
                    >
                      Select...
                    </div>
                    <AutosizeInput
                      aria-activedescendant="react-select-5--value"
                      aria-expanded="false"
                      aria-haspopup="false"
                      aria-owns=""
                      className="Select-input"
                      injectStyles={true}
                      minWidth="5"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      required={false}
                      role="combobox"
                      value=""
                    />
                  </span>
                  <span
                    className="Select-arrow-zone"
                    onMouseDown={[Function]}
                  >
                    <span
                      className="Select-arrow"
                      onMouseDown={[Function]}
                    />
                  </span>
                </div>
              </div>
            </Select>
          </div>
        </Group>
      </div>
      <Group
        label="Export to GIS"
      >
        <div
          className="form-group"
        >
          <label
            htmlFor="export-to-gis-input-6"
          >
            Export to GIS
          </label>
          <Button
            block={true}
            onClick={[Function]}
            style="info"
          >
            <a
              className="btn btn-info btn-block"
              href="#"
              onClick={[Function]}
              tabIndex={0}
            >
              Download ANALYSIS 1
            </a>
          </Button>
          <Button
            block={true}
            onClick={[Function]}
            style="info"
          >
            <a
              className="btn btn-info btn-block"
              href="#"
              onClick={[Function]}
              tabIndex={0}
            >
              Download ANALYSIS 2
            </a>
          </Button>
          <Button
            block={true}
            onClick={[Function]}
            style="info"
          >
            <a
              className="btn btn-info btn-block"
              href="#"
              onClick={[Function]}
              tabIndex={0}
            >
              Download probability of improvement
            </a>
          </Button>
        </div>
      </Group>
    </div>
  </RegionalResults>
</Provider>
`;

exports[`Components > Analysis > Regional should render correctly 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <RegionalResults
    accessToName="Grid name"
    aggregationAreas={Array []}
    analysis={
      Object {
        "_id": "abcd",
        "accessGroup": "accessGroupName",
        "bounds": Object {},
        "bundleId": "5678",
        "complete": true,
        "createdAt": "2017-11-08T12:30:50.133Z",
        "createdBy": "person@gmail.com",
        "cutoffMinutes": 60,
        "deleted": false,
        "grid": "Jobs_total",
        "height": 300,
        "name": "ANALYSIS 1",
        "nonce": "12345",
        "north": 20024,
        "projectId": "1234",
        "request": Object {
          "accessModes": "WALK",
          "bikeSafe": 1,
          "bikeSlope": 1,
          "bikeSpeed": 4.166666666666667,
          "bikeTime": 1,
          "bounds": Object {
            "east": -76,
            "north": 39,
            "south": 38,
            "west": -77,
          },
          "bundleId": "1",
          "date": "2016-01-16",
          "defaultExpanded": true,
          "directModes": "WALK",
          "egressModes": "WALK",
          "fromLat": 12,
          "fromLon": 34,
          "fromTime": 25200,
          "maxBikeTime": 20,
          "maxRides": 4,
          "maxTripDurationMinutes": 60,
          "maxWalkTime": 20,
          "monteCarloDraws": 200,
          "name": "Profile Request Test",
          "projectId": "1",
          "reachabilityThreshold": 0,
          "regionId": "1",
          "toTime": 32400,
          "transitModes": "BUS,TRAM,RAIL,SUBWAY",
          "travelTimePercentile": 50,
          "variantIndex": 0,
          "walkSpeed": 1.3888888888888888,
          "workerVersion": "v4.0.0",
        },
        "status": "DONE",
        "travelTimePercentile": -1,
        "updatedAt": "2017-11-08T12:31:19.602Z",
        "updatedBy": "person@gmail.com",
        "variant": 0,
        "west": 20015,
        "width": 300,
        "workerVersion": "v3.2.0",
        "zoom": 9,
      }
    }
    analysisId="abcd"
    breaks={
      Array [
        100,
        500,
        1000,
        2000,
      ]
    }
    deleteAnalysis={[MockFunction]}
    fetch={[MockFunction]}
    grid={
      Object {
        "contains": [Function],
        "data": Array [],
        "height": 300,
        "max": 2000,
        "min": 0,
        "north": 20024,
        "west": 20015,
        "width": 300,
        "zoom": 9,
      }
    }
    loadRegionalAnalyses={[MockFunction]}
    loadRegionalAnalysisGrids={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "_id": "abcd",
            },
          ],
        ],
      }
    }
    minimumImprovementProbability={0.83}
    opportunityDatasets={
      Array [
        Object {
          "_id": "Jobs_total",
          "name": "Total jobs",
        },
      ]
    }
    projectId="MOCK_PROJECT_ID"
    regionId="MOCK_REGION_ID"
    regionalAnalyses={
      Array [
        Object {
          "_id": "abcd",
          "accessGroup": "accessGroupName",
          "bounds": Object {},
          "bundleId": "5678",
          "complete": true,
          "createdAt": "2017-11-08T12:30:50.133Z",
          "createdBy": "person@gmail.com",
          "cutoffMinutes": 60,
          "deleted": false,
          "grid": "Jobs_total",
          "height": 300,
          "name": "ANALYSIS 1",
          "nonce": "12345",
          "north": 20024,
          "projectId": "1234",
          "request": Object {
            "accessModes": "WALK",
            "bikeSafe": 1,
            "bikeSlope": 1,
            "bikeSpeed": 4.166666666666667,
            "bikeTime": 1,
            "bounds": Object {
              "east": -76,
              "north": 39,
              "south": 38,
              "west": -77,
            },
            "bundleId": "1",
            "date": "2016-01-16",
            "defaultExpanded": true,
            "directModes": "WALK",
            "egressModes": "WALK",
            "fromLat": 12,
            "fromLon": 34,
            "fromTime": 25200,
            "maxBikeTime": 20,
            "maxRides": 4,
            "maxTripDurationMinutes": 60,
            "maxWalkTime": 20,
            "monteCarloDraws": 200,
            "name": "Profile Request Test",
            "projectId": "1",
            "reachabilityThreshold": 0,
            "regionId": "1",
            "toTime": 32400,
            "transitModes": "BUS,TRAM,RAIL,SUBWAY",
            "travelTimePercentile": 50,
            "variantIndex": 0,
            "walkSpeed": 1.3888888888888888,
            "workerVersion": "v4.0.0",
          },
          "status": "DONE",
          "travelTimePercentile": -1,
          "updatedAt": "2017-11-08T12:31:19.602Z",
          "updatedBy": "person@gmail.com",
          "variant": 0,
          "west": 20015,
          "width": 300,
          "workerVersion": "v3.2.0",
          "zoom": 9,
        },
        Object {
          "_id": "efgh",
          "accessGroup": "accessGroupName",
          "bounds": Object {},
          "bundleId": "5678",
          "complete": true,
          "createdAt": "2017-11-08T12:30:50.133Z",
          "createdBy": "person@gmail.com",
          "cutoffMinutes": 60,
          "deleted": false,
          "grid": "Jobs_total",
          "height": 300,
          "name": "ANALYSIS 2",
          "nonce": "12345",
          "north": 20024,
          "projectId": "4321",
          "request": Object {
            "accessModes": "WALK",
            "bikeSafe": 1,
            "bikeSlope": 1,
            "bikeSpeed": 4.166666666666667,
            "bikeTime": 1,
            "bounds": Object {
              "east": -76,
              "north": 39,
              "south": 38,
              "west": -77,
            },
            "bundleId": "1",
            "date": "2016-01-16",
            "defaultExpanded": true,
            "directModes": "WALK",
            "egressModes": "WALK",
            "fromLat": 12,
            "fromLon": 34,
            "fromTime": 25200,
            "maxBikeTime": 20,
            "maxRides": 4,
            "maxTripDurationMinutes": 60,
            "maxWalkTime": 20,
            "monteCarloDraws": 200,
            "name": "Profile Request Test",
            "projectId": "1",
            "reachabilityThreshold": 0,
            "regionId": "1",
            "toTime": 32400,
            "transitModes": "BUS,TRAM,RAIL,SUBWAY",
            "travelTimePercentile": 50,
            "variantIndex": 0,
            "walkSpeed": 1.3888888888888888,
            "workerVersion": "v4.0.0",
          },
          "status": "DONE",
          "travelTimePercentile": 42,
          "updatedAt": "2017-11-08T12:31:19.602Z",
          "updatedBy": "person@gmail.com",
          "variant": 1,
          "west": 20015,
          "width": 300,
          "workerVersion": "v3.2.0",
          "zoom": 9,
        },
      ]
    }
    scenarioId="MOCK"
    setActiveRegionalAnalysis={[MockFunction]}
    setAggregationArea={[MockFunction]}
    setAggregationWeights={[MockFunction]}
    setMinimumImprovementProbability={[MockFunction]}
    uploadAggregationArea={[MockFunction]}
  >
    <div>
      <Group
        label="Compare to"
      >
        <div
          className="form-group"
        >
          <label
            htmlFor="compare-to-input-0"
          >
            Compare to
          </label>
          <Select
            arrowRenderer={[Function]}
            autosize={true}
            backspaceRemoves={true}
            backspaceToRemoveMessage="Press backspace to remove {label}"
            clearAllText="Clear all"
            clearRenderer={[Function]}
            clearValueText="Clear value"
            clearable={true}
            closeOnSelect={true}
            deleteRemoves={true}
            delimiter=","
            disabled={false}
            escapeClearsValue={true}
            filterOptions={[Function]}
            ignoreAccents={true}
            ignoreCase={true}
            inputProps={Object {}}
            isLoading={false}
            joinValues={false}
            labelKey="label"
            matchPos="any"
            matchProp="any"
            menuBuffer={0}
            menuRenderer={[Function]}
            multi={false}
            noResultsText="No results found"
            onBlurResetsInput={true}
            onChange={[Function]}
            onCloseResetsInput={true}
            onSelectResetsInput={true}
            openOnClick={true}
            optionComponent={[Function]}
            options={
              Array [
                Object {
                  "label": "ANALYSIS 2",
                  "value": "efgh",
                },
              ]
            }
            pageSize={5}
            placeholder="Select..."
            removeSelected={true}
            required={false}
            rtl={false}
            scrollMenuIntoView={true}
            searchable={true}
            simpleValue={false}
            tabSelectsValue={true}
            trimFilter={true}
            value={null}
            valueComponent={[Function]}
            valueKey="value"
          >
            <div
              className="Select is-clearable is-searchable Select--single"
            >
              <div
                className="Select-control"
                onKeyDown={[Function]}
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
              >
                <span
                  className="Select-multi-value-wrapper"
                  id="react-select-2--value"
                >
                  <div
                    className="Select-placeholder"
                  >
                    Select...
                  </div>
                  <AutosizeInput
                    aria-activedescendant="react-select-2--value"
                    aria-expanded="false"
                    aria-haspopup="false"
                    aria-owns=""
                    className="Select-input"
                    injectStyles={true}
                    minWidth="5"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    required={false}
                    role="combobox"
                    value=""
                  />
                </span>
                <span
                  className="Select-arrow-zone"
                  onMouseDown={[Function]}
                >
                  <span
                    className="Select-arrow"
                    onMouseDown={[Function]}
                  />
                </span>
              </div>
            </div>
          </Select>
        </div>
      </Group>
      <p>
        Total jobs within 60 minutes (average instantaneous accessibility)
      </p>
      <Legend
        breaks={
          Array [
            100,
            500,
            1000,
            2000,
          ]
        }
        colors={
          Array [
            "rgba(241, 237, 246, 0.42)",
            "rgba(188, 200, 224, 0.42)",
            "rgba(116, 169, 207, 0.42)",
            "rgba(43, 140, 190, 0.42)",
            "rgba(4, 90, 142, 0.42)",
          ]
        }
        min={0}
      >
        <ul
          className="Legend"
        >
          <Break
            bottom={0}
            color="rgba(241, 237, 246, 0.42)"
            top={100}
          >
            <li
              className="Legend-Item"
              style={
                Object {
                  "backgroundColor": "rgb(241, 237, 246)",
                  "color": "#000",
                }
              }
            >
              0
              –
              100
            </li>
          </Break>
          <Break
            bottom={100}
            color="rgba(188, 200, 224, 0.42)"
            top={500}
          >
            <li
              className="Legend-Item"
              style={
                Object {
                  "backgroundColor": "rgb(188, 200, 224)",
                  "color": "#000",
                }
              }
            >
              100
              –
              500
            </li>
          </Break>
          <Break
            bottom={500}
            color="rgba(116, 169, 207, 0.42)"
            top={1000}
          >
            <li
              className="Legend-Item"
              style={
                Object {
                  "backgroundColor": "rgb(116, 169, 207)",
                  "color": "#000",
                }
              }
            >
              500
              –
              1,000
            </li>
          </Break>
          <Break
            bottom={1000}
            color="rgba(43, 140, 190, 0.42)"
            top={2000}
          >
            <li
              className="Legend-Item"
              style={
                Object {
                  "backgroundColor": "rgb(43, 140, 190)",
                  "color": "#fff",
                }
              }
            >
              1,000
              –
              2,000
            </li>
          </Break>
        </ul>
      </Legend>
      <div>
        <Group
          label="Aggregate results to"
        >
          <div
            className="form-group"
          >
            <label
              htmlFor="aggregate-results-to-input-1"
            >
              Aggregate results to
            </label>
            <Select
              arrowRenderer={[Function]}
              autosize={true}
              backspaceRemoves={true}
              backspaceToRemoveMessage="Press backspace to remove {label}"
              clearAllText="Clear all"
              clearRenderer={[Function]}
              clearValueText="Clear value"
              clearable={true}
              closeOnSelect={true}
              deleteRemoves={true}
              delimiter=","
              disabled={false}
              escapeClearsValue={true}
              filterOptions={[Function]}
              ignoreAccents={true}
              ignoreCase={true}
              inputProps={Object {}}
              isLoading={false}
              joinValues={false}
              labelKey="label"
              matchPos="any"
              matchProp="any"
              menuBuffer={0}
              menuRenderer={[Function]}
              multi={false}
              name="aggregateTo"
              noResultsText="No results found"
              onBlurResetsInput={true}
              onChange={[Function]}
              onCloseResetsInput={true}
              onSelectResetsInput={true}
              openOnClick={true}
              optionComponent={[Function]}
              options={
                Array [
                  Object {
                    "label": "Upload new aggregation area",
                    "value": "new-aggregation-area",
                  },
                ]
              }
              pageSize={5}
              placeholder="Select..."
              removeSelected={true}
              required={false}
              rtl={false}
              scrollMenuIntoView={true}
              searchable={true}
              simpleValue={false}
              tabSelectsValue={true}
              trimFilter={true}
              valueComponent={[Function]}
              valueKey="value"
            >
              <div
                className="Select is-clearable is-searchable Select--single"
              >
                <div
                  className="Select-control"
                  onKeyDown={[Function]}
                  onMouseDown={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                >
                  <span
                    className="Select-multi-value-wrapper"
                    id="react-select-3--value"
                  >
                    <div
                      className="Select-placeholder"
                    >
                      Select...
                    </div>
                    <AutosizeInput
                      aria-activedescendant="react-select-3--value"
                      aria-expanded="false"
                      aria-haspopup="false"
                      aria-owns=""
                      className="Select-input"
                      injectStyles={true}
                      minWidth="5"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      required={false}
                      role="combobox"
                      value=""
                    />
                  </span>
                  <span
                    className="Select-arrow-zone"
                    onMouseDown={[Function]}
                  >
                    <span
                      className="Select-arrow"
                      onMouseDown={[Function]}
                    />
                  </span>
                </div>
              </div>
            </Select>
          </div>
        </Group>
      </div>
      <Group
        label="Export to GIS"
      >
        <div
          className="form-group"
        >
          <label
            htmlFor="export-to-gis-input-2"
          >
            Export to GIS
          </label>
          <Button
            block={true}
            onClick={[Function]}
            style="info"
          >
            <a
              className="btn btn-info btn-block"
              href="#"
              onClick={[Function]}
              tabIndex={0}
            >
              Download ANALYSIS 1
            </a>
          </Button>
        </div>
      </Group>
    </div>
  </RegionalResults>
</Provider>
`;
