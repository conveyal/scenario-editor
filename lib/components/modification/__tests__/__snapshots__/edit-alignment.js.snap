// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component EditAlignment snapshot(mount) 1`] = `
<EditAlignment
  allStops={Array []}
  disabled={false}
  extendFromEnd={false}
  mapState={
    Object {
      "modificationId": "1234",
      "state": null,
    }
  }
  modification={
    Object {
      "_id": "1234",
      "accessGroup": "accessGroupName",
      "bidirectional": false,
      "createdAt": "2017-11-08T12:30:50.133Z",
      "createdBy": "person@gmail.com",
      "description": "Mock description",
      "entries": Array [],
      "feed": "1",
      "name": "Test Modification",
      "nonce": "12345",
      "projectId": "1",
      "routes": Array [
        "route1",
      ],
      "segments": Array [
        Object {
          "fromStopId": "1",
          "geometry": Object {
            "coordinates": Array [
              Array [
                -122.0246,
                36.9707,
              ],
              Array [
                -122.0279,
                37.049,
              ],
              Array [
                -121.9799,
                37.2299,
              ],
              Array [
                -121.9445,
                37.324,
              ],
              Array [
                -121.936,
                37.353,
              ],
              Array [
                -121.924,
                37.365,
              ],
            ],
            "type": "LineString",
          },
          "spacing": 3000,
          "stopAtEnd": false,
          "stopAtStart": false,
          "toStopId": null,
        },
      ],
      "timetables": Array [
        Object {
          "_id": "timetable-id",
          "dwellTime": 10,
          "dwellTimes": Array [
            12,
          ],
          "endTime": 57600,
          "exactTimes": false,
          "friday": true,
          "headwaySecs": 900,
          "modificationId": "1234",
          "modificationName": "Test Modification",
          "monday": true,
          "name": "Test timetable",
          "patternTrips": Array [
            "abcd",
          ],
          "phaseAtStop": "",
          "phaseFromStop": "",
          "phaseFromTimetable": "",
          "phaseSeconds": 300,
          "saturday": false,
          "segmentSpeeds": Array [],
          "sourceTrip": "abcd",
          "startTime": 28800,
          "sunday": false,
          "thursday": true,
          "tuesday": true,
          "wednesday": true,
        },
      ],
      "trips": Array [
        "abcd",
      ],
      "type": "add-trip-pattern",
      "updatedAt": "2017-11-08T12:31:19.602Z",
      "updatedBy": "person@gmail.com",
      "variants": Array [
        true,
      ],
    }
  }
  numberOfStops={16}
  segmentDistances={
    Array [
      45.22,
    ]
  }
  update={[MockFunction]}
>
  <Stack
    allStops={Array []}
    disabled={false}
    extendFromEnd={false}
    mapState={
      Object {
        "modificationId": "1234",
        "state": null,
      }
    }
    segmentDistances={
      Array [
        45.22,
      ]
    }
    spacing={4}
  >
    <Styled(div)
      __css={
        Object {
          "& > *:not(style) ~ *:not(style)": Object {
            "marginStart": 0,
            "marginTop": 4,
          },
        }
      }
      allStops={Array []}
      className="chakra-stack"
      disabled={false}
      display="flex"
      extendFromEnd={false}
      flexDirection="column"
      mapState={
        Object {
          "modificationId": "1234",
          "state": null,
        }
      }
      segmentDistances={
        Array [
          45.22,
        ]
      }
    >
      <div
        allStops={Array []}
        className="chakra-stack css-4daikc"
        disabled={false}
        extendFromEnd={false}
        mapState={
          Object {
            "modificationId": "1234",
            "state": null,
          }
        }
        segmentDistances={
          Array [
            45.22,
          ]
        }
      >
        <Heading
          key=".1"
          size="sm"
        >
          <Styled(h2)
            __css={
              Object {
                "fontFamily": "heading",
                "fontSize": "md",
                "fontWeight": "bold",
                "lineHeight": 1.2,
              }
            }
            className="chakra-heading"
          >
            <h2
              className="chakra-heading css-14g9y4z"
            >
              Route Geometry
            </h2>
          </Styled(h2)>
        </Heading>
        <Text
          key=".3"
        >
          <Styled(p)
            __css={Object {}}
            className="chakra-text"
          >
            <p
              className="chakra-text css-0"
            >
              16 stops over 45.21 km
            </p>
          </Styled(p)>
        </Text>
        <Button
          colorScheme="yellow"
          isFullWidth={true}
          key=".4"
          leftIcon={<FaPencilAlt />}
          onClick={[Function]}
        >
          <Styled(button)
            __css={
              Object {
                "_active": Object {
                  "bg": "yellow.600",
                },
                "_disabled": Object {
                  "boxShadow": "none",
                  "cursor": "not-allowed",
                  "opacity": 0.4,
                },
                "_focus": Object {
                  "boxShadow": "outline",
                },
                "_hover": Object {
                  "_disabled": Object {
                    "bg": "yellow.400",
                  },
                  "bg": "yellow.500",
                },
                "alignItems": "center",
                "appearance": "none",
                "bg": "yellow.400",
                "borderRadius": "md",
                "color": "black",
                "display": "inline-flex",
                "fontSize": "md",
                "fontWeight": "semibold",
                "h": 10,
                "justifyContent": "center",
                "lineHeight": "1.2",
                "minW": 10,
                "outline": "none",
                "position": "relative",
                "px": 4,
                "transition": "all 250ms",
                "userSelect": "none",
                "verticalAlign": "middle",
                "whiteSpace": "nowrap",
                "width": "100%",
              }
            }
            className="chakra-button"
            onClick={[Function]}
            type="button"
          >
            <button
              className="chakra-button css-x5p3va"
              onClick={[Function]}
              type="button"
            >
              <ButtonIcon
                marginEnd="0.5rem"
              >
                <Styled(span)
                  className="chakra-button__icon"
                  marginEnd="0.5rem"
                >
                  <span
                    className="chakra-button__icon css-ktvjz1"
                  >
                    <FaPencilAlt
                      aria-hidden={true}
                      focusable={false}
                    >
                      <IconBase
                        aria-hidden={true}
                        attr={
                          Object {
                            "viewBox": "0 0 512 512",
                          }
                        }
                        focusable={false}
                      >
                        <svg
                          aria-hidden={true}
                          fill="currentColor"
                          focusable={false}
                          height="1em"
                          stroke="currentColor"
                          strokeWidth="0"
                          style={
                            Object {
                              "color": undefined,
                            }
                          }
                          viewBox="0 0 512 512"
                          width="1em"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M497.9 142.1l-46.1 46.1c-4.7 4.7-12.3 4.7-17 0l-111-111c-4.7-4.7-4.7-12.3 0-17l46.1-46.1c18.7-18.7 49.1-18.7 67.9 0l60.1 60.1c18.8 18.7 18.8 49.1 0 67.9zM284.2 99.8L21.6 362.4.4 483.9c-2.9 16.4 11.4 30.6 27.8 27.8l121.5-21.3 262.6-262.6c4.7-4.7 4.7-12.3 0-17l-111-111c-4.8-4.7-12.4-4.7-17.1 0zM124.1 339.9c-5.5-5.5-5.5-14.3 0-19.8l154-154c5.5-5.5 14.3-5.5 19.8 0s5.5 14.3 0 19.8l-154 154c-5.5 5.5-14.3 5.5-19.8 0zM88 424h48v36.3l-64.5 11.3-31.1-31.1L51.7 376H88v48z"
                            key="0"
                          />
                        </svg>
                      </IconBase>
                    </FaPencilAlt>
                  </span>
                </Styled(span)>
              </ButtonIcon>
              Edit route geometry
            </button>
          </Styled(button)>
        </Button>
        <Checkbox
          fontWeight="normal"
          isChecked={true}
          key=".6"
          onChange={[Function]}
        >
          <Styled(label)
            __css={Object {}}
            className="chakra-checkbox"
            fontWeight="normal"
          >
            <label
              className="chakra-checkbox css-wun7cp"
            >
              <input
                checked={true}
                className="chakra-checkbox__input"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                style={
                  Object {
                    "border": "0px",
                    "clip": "rect(0px, 0px, 0px, 0px)",
                    "height": "1px",
                    "margin": "-1px",
                    "overflow": "hidden",
                    "padding": "0px",
                    "position": "absolute",
                    "whiteSpace": "nowrap",
                    "width": "1px",
                  }
                }
                type="checkbox"
              />
              <Styled(span)
                __css={
                  Object {
                    "_checked": Object {
                      "_disabled": Object {
                        "bg": "gray.200",
                        "borderColor": "gray.200",
                        "color": "gray.500",
                      },
                      "_hover": Object {
                        "bg": "blue.600",
                        "borderColor": "blue.600",
                      },
                      "bg": "blue.500",
                      "borderColor": "blue.500",
                      "color": "white",
                    },
                    "_disabled": Object {
                      "bg": "gray.100",
                      "borderColor": "gray.100",
                    },
                    "_focus": Object {
                      "boxShadow": "outline",
                    },
                    "_indeterminate": Object {
                      "bg": "blue.500",
                      "borderColor": "blue.500",
                      "color": "white",
                    },
                    "_invalid": Object {
                      "borderColor": "red.500",
                    },
                    "border": "2px solid",
                    "borderColor": "inherit",
                    "borderRadius": "sm",
                    "color": "white",
                    "h": 4,
                    "transition": "box-shadow 250ms",
                    "w": 4,
                  }
                }
                aria-hidden={true}
                className="chakra-checkbox__control"
                data-checked=""
                onMouseDown={[Function]}
                onMouseEnter={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
              >
                <span
                  aria-hidden={true}
                  className="chakra-checkbox__control css-co2d90"
                  data-checked=""
                  onMouseDown={[Function]}
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                >
                  <CheckboxIcon
                    __css={
                      Object {
                        "color": undefined,
                        "fontSize": "0.625rem",
                        "opacity": 1,
                        "transform": "scale(1)",
                        "transition": "transform 200ms",
                      }
                    }
                    isChecked={true}
                  >
                    <CheckboxTransition
                      open={true}
                    >
                      <AnimatePresence
                        initial={false}
                      >
                        <PresenceChild
                          initial={false}
                          isPresent={true}
                          key=""
                          presenceAffectsLayout={true}
                        >
                          <ForwardRef(MotionComponent)
                            animate="checked"
                            exit="unchecked"
                            initial="unchecked"
                            style={
                              Object {
                                "alignItems": "center",
                                "display": "flex",
                                "height": "100%",
                                "justifyContent": "center",
                              }
                            }
                            variants={
                              Object {
                                "checked": Object {
                                  "scale": 1,
                                },
                                "unchecked": Object {
                                  "scale": 0.5,
                                },
                              }
                            }
                          >
                            <div
                              style={
                                Object {
                                  "alignItems": "center",
                                  "display": "flex",
                                  "height": "100%",
                                  "justifyContent": "center",
                                  "transform": "none",
                                }
                              }
                            >
                              <CheckIcon
                                __css={
                                  Object {
                                    "color": undefined,
                                    "fontSize": "0.625rem",
                                    "opacity": 1,
                                    "transform": "scale(1)",
                                    "transition": "transform 200ms",
                                  }
                                }
                              >
                                <ForwardRef(MotionComponent)
                                  __css={
                                    Object {
                                      "color": undefined,
                                      "fontSize": "0.625rem",
                                      "opacity": 1,
                                      "transform": "scale(1)",
                                      "transition": "transform 200ms",
                                    }
                                  }
                                  style={
                                    Object {
                                      "fill": "none",
                                      "stroke": "currentColor",
                                      "strokeDasharray": 16,
                                      "strokeWidth": 2,
                                    }
                                  }
                                  variants={
                                    Object {
                                      "checked": Object {
                                        "opacity": 1,
                                        "strokeDashoffset": 0,
                                        "transition": Object {
                                          "duration": 0.2,
                                        },
                                      },
                                      "unchecked": Object {
                                        "opacity": 0,
                                        "strokeDashoffset": 16,
                                      },
                                    }
                                  }
                                  viewBox="0 0 12 10"
                                  width="1.2em"
                                >
                                  <Styled(svg)
                                    __css={
                                      Object {
                                        "color": undefined,
                                        "fontSize": "0.625rem",
                                        "opacity": 1,
                                        "transform": "scale(1)",
                                        "transition": "transform 200ms",
                                      }
                                    }
                                    style={
                                      Object {
                                        "fill": "none",
                                        "opacity": 1,
                                        "stroke": "currentColor",
                                        "strokeDasharray": 16,
                                        "strokeDashoffset": 0,
                                        "strokeWidth": 2,
                                      }
                                    }
                                    variants={
                                      Object {
                                        "checked": Object {
                                          "opacity": 1,
                                          "strokeDashoffset": 0,
                                          "transition": Object {
                                            "duration": 0.2,
                                          },
                                        },
                                        "unchecked": Object {
                                          "opacity": 0,
                                          "strokeDashoffset": 16,
                                        },
                                      }
                                    }
                                    viewBox="0 0 12 10"
                                    width="1.2em"
                                  >
                                    <svg
                                      className="css-da6t8b"
                                      style={
                                        Object {
                                          "fill": "none",
                                          "opacity": 1,
                                          "stroke": "currentColor",
                                          "strokeDasharray": 16,
                                          "strokeDashoffset": 0,
                                          "strokeWidth": 2,
                                        }
                                      }
                                      variants={
                                        Object {
                                          "checked": Object {
                                            "opacity": 1,
                                            "strokeDashoffset": 0,
                                            "transition": Object {
                                              "duration": 0.2,
                                            },
                                          },
                                          "unchecked": Object {
                                            "opacity": 0,
                                            "strokeDashoffset": 16,
                                          },
                                        }
                                      }
                                      viewBox="0 0 12 10"
                                    >
                                      <polyline
                                        points="1.5 6 4.5 9 10.5 1"
                                      />
                                    </svg>
                                  </Styled(svg)>
                                  <Component
                                    __css={
                                      Object {
                                        "color": undefined,
                                        "fontSize": "0.625rem",
                                        "opacity": 1,
                                        "transform": "scale(1)",
                                        "transition": "transform 200ms",
                                      }
                                    }
                                    key="animation"
                                    style={
                                      Object {
                                        "fill": "none",
                                        "stroke": "currentColor",
                                        "strokeDasharray": 16,
                                        "strokeWidth": 2,
                                      }
                                    }
                                    variants={
                                      Object {
                                        "checked": Object {
                                          "opacity": 1,
                                          "strokeDashoffset": 0,
                                          "transition": Object {
                                            "duration": 0.2,
                                          },
                                        },
                                        "unchecked": Object {
                                          "opacity": 0,
                                          "strokeDashoffset": 16,
                                        },
                                      }
                                    }
                                    viewBox="0 0 12 10"
                                    visualElement={
                                      Object {
                                        "addChild": [Function],
                                        "addValue": [Function],
                                        "addVariantChild": [Function],
                                        "animationState": Object {
                                          "animateChanges": [Function],
                                          "getState": [Function],
                                          "isAnimated": [Function],
                                          "setActive": [Function],
                                          "setAnimateFunction": [Function],
                                        },
                                        "blockInitialAnimation": true,
                                        "build": [Function],
                                        "clearAllListeners": [Function],
                                        "clearState": [Function],
                                        "current": <svg
                                          class="css-da6t8b"
                                          style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                          variants="[object Object]"
                                          viewBox="0 0 12 10"
                                        >
                                          <polyline
                                            points="1.5 6 4.5 9 10.5 1"
                                          />
                                        </svg>,
                                        "depth": 1,
                                        "enableLayoutProjection": [Function],
                                        "forEachValue": [Function],
                                        "getBaseTarget": [Function],
                                        "getClosestVariantNode": [Function],
                                        "getDefaultTransition": [Function],
                                        "getInstance": [Function],
                                        "getLatestValues": [Function],
                                        "getLayoutId": [Function],
                                        "getLayoutState": [Function],
                                        "getProjectionAnimationProgress": [Function],
                                        "getProps": [Function],
                                        "getStaticValue": [Function],
                                        "getValue": [Function],
                                        "getVariant": [Function],
                                        "getVariantContext": [Function],
                                        "hasValue": [Function],
                                        "isHoverEventsEnabled": true,
                                        "isMounted": [Function],
                                        "isPresenceRoot": false,
                                        "isPresent": true,
                                        "isStatic": false,
                                        "isVisible": undefined,
                                        "lockProjectionTarget": [Function],
                                        "makeTargetAnimatable": [Function],
                                        "manuallyAnimateOnMount": false,
                                        "measureViewportBox": [Function],
                                        "notifyAnimationComplete": [Function],
                                        "notifyAnimationStart": [Function],
                                        "notifyBeforeLayoutMeasure": [Function],
                                        "notifyLayoutAnimationComplete": [Function],
                                        "notifyLayoutMeasure": [Function],
                                        "notifyLayoutReady": [Function],
                                        "notifyLayoutUpdate": [Function],
                                        "notifyRender": [Function],
                                        "notifySetAxisTarget": [Function],
                                        "notifyUpdate": [Function],
                                        "notifyViewportBoxUpdate": [Function],
                                        "onAnimationComplete": [Function],
                                        "onAnimationStart": [Function],
                                        "onBeforeLayoutMeasure": [Function],
                                        "onLayoutAnimationComplete": [Function],
                                        "onLayoutMeasure": [Function],
                                        "onLayoutUpdate": [Function],
                                        "onRender": [Function],
                                        "onSetAxisTarget": [Function],
                                        "onUpdate": [Function],
                                        "onViewportBoxUpdate": [Function],
                                        "path": Array [
                                          Object {
                                            "addChild": [Function],
                                            "addValue": [Function],
                                            "addVariantChild": [Function],
                                            "animationState": Object {
                                              "animateChanges": [Function],
                                              "getState": [Function],
                                              "isAnimated": [Function],
                                              "setActive": [Function],
                                              "setAnimateFunction": [Function],
                                            },
                                            "blockInitialAnimation": true,
                                            "build": [Function],
                                            "clearAllListeners": [Function],
                                            "clearState": [Function],
                                            "current": <div
                                              style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                            >
                                              <svg
                                                class="css-da6t8b"
                                                style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                                variants="[object Object]"
                                                viewBox="0 0 12 10"
                                              >
                                                <polyline
                                                  points="1.5 6 4.5 9 10.5 1"
                                                />
                                              </svg>
                                            </div>,
                                            "depth": 0,
                                            "enableLayoutProjection": [Function],
                                            "forEachValue": [Function],
                                            "getBaseTarget": [Function],
                                            "getClosestVariantNode": [Function],
                                            "getDefaultTransition": [Function],
                                            "getInstance": [Function],
                                            "getLatestValues": [Function],
                                            "getLayoutId": [Function],
                                            "getLayoutState": [Function],
                                            "getProjectionAnimationProgress": [Function],
                                            "getProps": [Function],
                                            "getStaticValue": [Function],
                                            "getValue": [Function],
                                            "getVariant": [Function],
                                            "getVariantContext": [Function],
                                            "hasValue": [Function],
                                            "isHoverEventsEnabled": true,
                                            "isMounted": [Function],
                                            "isPresenceRoot": true,
                                            "isPresent": true,
                                            "isStatic": false,
                                            "isVisible": undefined,
                                            "lockProjectionTarget": [Function],
                                            "makeTargetAnimatable": [Function],
                                            "manuallyAnimateOnMount": false,
                                            "measureViewportBox": [Function],
                                            "notifyAnimationComplete": [Function],
                                            "notifyAnimationStart": [Function],
                                            "notifyBeforeLayoutMeasure": [Function],
                                            "notifyLayoutAnimationComplete": [Function],
                                            "notifyLayoutMeasure": [Function],
                                            "notifyLayoutReady": [Function],
                                            "notifyLayoutUpdate": [Function],
                                            "notifyRender": [Function],
                                            "notifySetAxisTarget": [Function],
                                            "notifyUpdate": [Function],
                                            "notifyViewportBoxUpdate": [Function],
                                            "onAnimationComplete": [Function],
                                            "onAnimationStart": [Function],
                                            "onBeforeLayoutMeasure": [Function],
                                            "onLayoutAnimationComplete": [Function],
                                            "onLayoutMeasure": [Function],
                                            "onLayoutUpdate": [Function],
                                            "onRender": [Function],
                                            "onSetAxisTarget": [Function],
                                            "onUpdate": [Function],
                                            "onViewportBoxUpdate": [Function],
                                            "path": Array [],
                                            "pointTo": [Function],
                                            "presence": 0,
                                            "presenceId": 0,
                                            "projection": Object {
                                              "isEnabled": false,
                                              "isTargetLocked": false,
                                              "target": Object {
                                                "x": Object {
                                                  "max": 1,
                                                  "min": 0,
                                                },
                                                "y": Object {
                                                  "max": 1,
                                                  "min": 0,
                                                },
                                              },
                                              "targetFinal": Object {
                                                "x": Object {
                                                  "max": 1,
                                                  "min": 0,
                                                },
                                                "y": Object {
                                                  "max": 1,
                                                  "min": 0,
                                                },
                                              },
                                            },
                                            "readValue": [Function],
                                            "rebaseProjectionTarget": [Function],
                                            "ref": [Function],
                                            "removeValue": [Function],
                                            "resetTransform": [Function],
                                            "scheduleRender": [Function],
                                            "scheduleUpdateLayoutProjection": [Function],
                                            "setBaseTarget": [Function],
                                            "setCrossfader": [Function],
                                            "setProjectionTargetAxis": [Function],
                                            "setProps": [Function],
                                            "setStaticValue": [Function],
                                            "setVisibility": [Function],
                                            "snapshotViewportBox": [Function],
                                            "sortNodePosition": [Function],
                                            "startLayoutAnimation": [Function],
                                            "stopLayoutAnimation": [Function],
                                            "suspendHoverEvents": [Function],
                                            "syncRender": [Function],
                                            "treeType": "dom",
                                            "unlockProjectionTarget": [Function],
                                            "updateLayoutMeasurement": [Function],
                                            "updateLayoutProjection": [Function],
                                            "updatePropListeners": [Function],
                                            "variantChildren": Set {
                                              [Circular],
                                            },
                                            "withoutTransform": [Function],
                                          },
                                        ],
                                        "pointTo": [Function],
                                        "presence": 0,
                                        "presenceId": 0,
                                        "projection": Object {
                                          "isEnabled": false,
                                          "isTargetLocked": false,
                                          "target": Object {
                                            "x": Object {
                                              "max": 1,
                                              "min": 0,
                                            },
                                            "y": Object {
                                              "max": 1,
                                              "min": 0,
                                            },
                                          },
                                          "targetFinal": Object {
                                            "x": Object {
                                              "max": 1,
                                              "min": 0,
                                            },
                                            "y": Object {
                                              "max": 1,
                                              "min": 0,
                                            },
                                          },
                                        },
                                        "readValue": [Function],
                                        "rebaseProjectionTarget": [Function],
                                        "ref": [Function],
                                        "removeValue": [Function],
                                        "resetTransform": [Function],
                                        "scheduleRender": [Function],
                                        "scheduleUpdateLayoutProjection": [Function],
                                        "setBaseTarget": [Function],
                                        "setCrossfader": [Function],
                                        "setProjectionTargetAxis": [Function],
                                        "setProps": [Function],
                                        "setStaticValue": [Function],
                                        "setVisibility": [Function],
                                        "snapshotViewportBox": [Function],
                                        "sortNodePosition": [Function],
                                        "startLayoutAnimation": [Function],
                                        "stopLayoutAnimation": [Function],
                                        "suspendHoverEvents": [Function],
                                        "syncRender": [Function],
                                        "treeType": "dom",
                                        "unlockProjectionTarget": [Function],
                                        "updateLayoutMeasurement": [Function],
                                        "updateLayoutProjection": [Function],
                                        "updatePropListeners": [Function],
                                        "variantChildren": Set {},
                                        "withoutTransform": [Function],
                                      }
                                    }
                                    width="1.2em"
                                  />
                                </ForwardRef(MotionComponent)>
                              </CheckIcon>
                            </div>
                            <Component
                              animate="checked"
                              exit="unchecked"
                              initial="unchecked"
                              key="animation"
                              style={
                                Object {
                                  "alignItems": "center",
                                  "display": "flex",
                                  "height": "100%",
                                  "justifyContent": "center",
                                }
                              }
                              variants={
                                Object {
                                  "checked": Object {
                                    "scale": 1,
                                  },
                                  "unchecked": Object {
                                    "scale": 0.5,
                                  },
                                }
                              }
                              visualElement={
                                Object {
                                  "addChild": [Function],
                                  "addValue": [Function],
                                  "addVariantChild": [Function],
                                  "animationState": Object {
                                    "animateChanges": [Function],
                                    "getState": [Function],
                                    "isAnimated": [Function],
                                    "setActive": [Function],
                                    "setAnimateFunction": [Function],
                                  },
                                  "blockInitialAnimation": true,
                                  "build": [Function],
                                  "clearAllListeners": [Function],
                                  "clearState": [Function],
                                  "current": <div
                                    style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                  >
                                    <svg
                                      class="css-da6t8b"
                                      style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                      variants="[object Object]"
                                      viewBox="0 0 12 10"
                                    >
                                      <polyline
                                        points="1.5 6 4.5 9 10.5 1"
                                      />
                                    </svg>
                                  </div>,
                                  "depth": 0,
                                  "enableLayoutProjection": [Function],
                                  "forEachValue": [Function],
                                  "getBaseTarget": [Function],
                                  "getClosestVariantNode": [Function],
                                  "getDefaultTransition": [Function],
                                  "getInstance": [Function],
                                  "getLatestValues": [Function],
                                  "getLayoutId": [Function],
                                  "getLayoutState": [Function],
                                  "getProjectionAnimationProgress": [Function],
                                  "getProps": [Function],
                                  "getStaticValue": [Function],
                                  "getValue": [Function],
                                  "getVariant": [Function],
                                  "getVariantContext": [Function],
                                  "hasValue": [Function],
                                  "isHoverEventsEnabled": true,
                                  "isMounted": [Function],
                                  "isPresenceRoot": true,
                                  "isPresent": true,
                                  "isStatic": false,
                                  "isVisible": undefined,
                                  "lockProjectionTarget": [Function],
                                  "makeTargetAnimatable": [Function],
                                  "manuallyAnimateOnMount": false,
                                  "measureViewportBox": [Function],
                                  "notifyAnimationComplete": [Function],
                                  "notifyAnimationStart": [Function],
                                  "notifyBeforeLayoutMeasure": [Function],
                                  "notifyLayoutAnimationComplete": [Function],
                                  "notifyLayoutMeasure": [Function],
                                  "notifyLayoutReady": [Function],
                                  "notifyLayoutUpdate": [Function],
                                  "notifyRender": [Function],
                                  "notifySetAxisTarget": [Function],
                                  "notifyUpdate": [Function],
                                  "notifyViewportBoxUpdate": [Function],
                                  "onAnimationComplete": [Function],
                                  "onAnimationStart": [Function],
                                  "onBeforeLayoutMeasure": [Function],
                                  "onLayoutAnimationComplete": [Function],
                                  "onLayoutMeasure": [Function],
                                  "onLayoutUpdate": [Function],
                                  "onRender": [Function],
                                  "onSetAxisTarget": [Function],
                                  "onUpdate": [Function],
                                  "onViewportBoxUpdate": [Function],
                                  "path": Array [],
                                  "pointTo": [Function],
                                  "presence": 0,
                                  "presenceId": 0,
                                  "projection": Object {
                                    "isEnabled": false,
                                    "isTargetLocked": false,
                                    "target": Object {
                                      "x": Object {
                                        "max": 1,
                                        "min": 0,
                                      },
                                      "y": Object {
                                        "max": 1,
                                        "min": 0,
                                      },
                                    },
                                    "targetFinal": Object {
                                      "x": Object {
                                        "max": 1,
                                        "min": 0,
                                      },
                                      "y": Object {
                                        "max": 1,
                                        "min": 0,
                                      },
                                    },
                                  },
                                  "readValue": [Function],
                                  "rebaseProjectionTarget": [Function],
                                  "ref": [Function],
                                  "removeValue": [Function],
                                  "resetTransform": [Function],
                                  "scheduleRender": [Function],
                                  "scheduleUpdateLayoutProjection": [Function],
                                  "setBaseTarget": [Function],
                                  "setCrossfader": [Function],
                                  "setProjectionTargetAxis": [Function],
                                  "setProps": [Function],
                                  "setStaticValue": [Function],
                                  "setVisibility": [Function],
                                  "snapshotViewportBox": [Function],
                                  "sortNodePosition": [Function],
                                  "startLayoutAnimation": [Function],
                                  "stopLayoutAnimation": [Function],
                                  "suspendHoverEvents": [Function],
                                  "syncRender": [Function],
                                  "treeType": "dom",
                                  "unlockProjectionTarget": [Function],
                                  "updateLayoutMeasurement": [Function],
                                  "updateLayoutProjection": [Function],
                                  "updatePropListeners": [Function],
                                  "variantChildren": Set {
                                    Object {
                                      "addChild": [Function],
                                      "addValue": [Function],
                                      "addVariantChild": [Function],
                                      "animationState": Object {
                                        "animateChanges": [Function],
                                        "getState": [Function],
                                        "isAnimated": [Function],
                                        "setActive": [Function],
                                        "setAnimateFunction": [Function],
                                      },
                                      "blockInitialAnimation": true,
                                      "build": [Function],
                                      "clearAllListeners": [Function],
                                      "clearState": [Function],
                                      "current": <svg
                                        class="css-da6t8b"
                                        style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                        variants="[object Object]"
                                        viewBox="0 0 12 10"
                                      >
                                        <polyline
                                          points="1.5 6 4.5 9 10.5 1"
                                        />
                                      </svg>,
                                      "depth": 1,
                                      "enableLayoutProjection": [Function],
                                      "forEachValue": [Function],
                                      "getBaseTarget": [Function],
                                      "getClosestVariantNode": [Function],
                                      "getDefaultTransition": [Function],
                                      "getInstance": [Function],
                                      "getLatestValues": [Function],
                                      "getLayoutId": [Function],
                                      "getLayoutState": [Function],
                                      "getProjectionAnimationProgress": [Function],
                                      "getProps": [Function],
                                      "getStaticValue": [Function],
                                      "getValue": [Function],
                                      "getVariant": [Function],
                                      "getVariantContext": [Function],
                                      "hasValue": [Function],
                                      "isHoverEventsEnabled": true,
                                      "isMounted": [Function],
                                      "isPresenceRoot": false,
                                      "isPresent": true,
                                      "isStatic": false,
                                      "isVisible": undefined,
                                      "lockProjectionTarget": [Function],
                                      "makeTargetAnimatable": [Function],
                                      "manuallyAnimateOnMount": false,
                                      "measureViewportBox": [Function],
                                      "notifyAnimationComplete": [Function],
                                      "notifyAnimationStart": [Function],
                                      "notifyBeforeLayoutMeasure": [Function],
                                      "notifyLayoutAnimationComplete": [Function],
                                      "notifyLayoutMeasure": [Function],
                                      "notifyLayoutReady": [Function],
                                      "notifyLayoutUpdate": [Function],
                                      "notifyRender": [Function],
                                      "notifySetAxisTarget": [Function],
                                      "notifyUpdate": [Function],
                                      "notifyViewportBoxUpdate": [Function],
                                      "onAnimationComplete": [Function],
                                      "onAnimationStart": [Function],
                                      "onBeforeLayoutMeasure": [Function],
                                      "onLayoutAnimationComplete": [Function],
                                      "onLayoutMeasure": [Function],
                                      "onLayoutUpdate": [Function],
                                      "onRender": [Function],
                                      "onSetAxisTarget": [Function],
                                      "onUpdate": [Function],
                                      "onViewportBoxUpdate": [Function],
                                      "path": Array [
                                        [Circular],
                                      ],
                                      "pointTo": [Function],
                                      "presence": 0,
                                      "presenceId": 0,
                                      "projection": Object {
                                        "isEnabled": false,
                                        "isTargetLocked": false,
                                        "target": Object {
                                          "x": Object {
                                            "max": 1,
                                            "min": 0,
                                          },
                                          "y": Object {
                                            "max": 1,
                                            "min": 0,
                                          },
                                        },
                                        "targetFinal": Object {
                                          "x": Object {
                                            "max": 1,
                                            "min": 0,
                                          },
                                          "y": Object {
                                            "max": 1,
                                            "min": 0,
                                          },
                                        },
                                      },
                                      "readValue": [Function],
                                      "rebaseProjectionTarget": [Function],
                                      "ref": [Function],
                                      "removeValue": [Function],
                                      "resetTransform": [Function],
                                      "scheduleRender": [Function],
                                      "scheduleUpdateLayoutProjection": [Function],
                                      "setBaseTarget": [Function],
                                      "setCrossfader": [Function],
                                      "setProjectionTargetAxis": [Function],
                                      "setProps": [Function],
                                      "setStaticValue": [Function],
                                      "setVisibility": [Function],
                                      "snapshotViewportBox": [Function],
                                      "sortNodePosition": [Function],
                                      "startLayoutAnimation": [Function],
                                      "stopLayoutAnimation": [Function],
                                      "suspendHoverEvents": [Function],
                                      "syncRender": [Function],
                                      "treeType": "dom",
                                      "unlockProjectionTarget": [Function],
                                      "updateLayoutMeasurement": [Function],
                                      "updateLayoutProjection": [Function],
                                      "updatePropListeners": [Function],
                                      "variantChildren": Set {},
                                      "withoutTransform": [Function],
                                    },
                                  },
                                  "withoutTransform": [Function],
                                }
                              }
                            />
                            <Component
                              animate="checked"
                              exit="unchecked"
                              initial="unchecked"
                              key="exit"
                              style={
                                Object {
                                  "alignItems": "center",
                                  "display": "flex",
                                  "height": "100%",
                                  "justifyContent": "center",
                                }
                              }
                              variants={
                                Object {
                                  "checked": Object {
                                    "scale": 1,
                                  },
                                  "unchecked": Object {
                                    "scale": 0.5,
                                  },
                                }
                              }
                              visualElement={
                                Object {
                                  "addChild": [Function],
                                  "addValue": [Function],
                                  "addVariantChild": [Function],
                                  "animationState": Object {
                                    "animateChanges": [Function],
                                    "getState": [Function],
                                    "isAnimated": [Function],
                                    "setActive": [Function],
                                    "setAnimateFunction": [Function],
                                  },
                                  "blockInitialAnimation": true,
                                  "build": [Function],
                                  "clearAllListeners": [Function],
                                  "clearState": [Function],
                                  "current": <div
                                    style="display: flex; align-items: center; justify-content: center; height: 100%; transform: none;"
                                  >
                                    <svg
                                      class="css-da6t8b"
                                      style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                      variants="[object Object]"
                                      viewBox="0 0 12 10"
                                    >
                                      <polyline
                                        points="1.5 6 4.5 9 10.5 1"
                                      />
                                    </svg>
                                  </div>,
                                  "depth": 0,
                                  "enableLayoutProjection": [Function],
                                  "forEachValue": [Function],
                                  "getBaseTarget": [Function],
                                  "getClosestVariantNode": [Function],
                                  "getDefaultTransition": [Function],
                                  "getInstance": [Function],
                                  "getLatestValues": [Function],
                                  "getLayoutId": [Function],
                                  "getLayoutState": [Function],
                                  "getProjectionAnimationProgress": [Function],
                                  "getProps": [Function],
                                  "getStaticValue": [Function],
                                  "getValue": [Function],
                                  "getVariant": [Function],
                                  "getVariantContext": [Function],
                                  "hasValue": [Function],
                                  "isHoverEventsEnabled": true,
                                  "isMounted": [Function],
                                  "isPresenceRoot": true,
                                  "isPresent": true,
                                  "isStatic": false,
                                  "isVisible": undefined,
                                  "lockProjectionTarget": [Function],
                                  "makeTargetAnimatable": [Function],
                                  "manuallyAnimateOnMount": false,
                                  "measureViewportBox": [Function],
                                  "notifyAnimationComplete": [Function],
                                  "notifyAnimationStart": [Function],
                                  "notifyBeforeLayoutMeasure": [Function],
                                  "notifyLayoutAnimationComplete": [Function],
                                  "notifyLayoutMeasure": [Function],
                                  "notifyLayoutReady": [Function],
                                  "notifyLayoutUpdate": [Function],
                                  "notifyRender": [Function],
                                  "notifySetAxisTarget": [Function],
                                  "notifyUpdate": [Function],
                                  "notifyViewportBoxUpdate": [Function],
                                  "onAnimationComplete": [Function],
                                  "onAnimationStart": [Function],
                                  "onBeforeLayoutMeasure": [Function],
                                  "onLayoutAnimationComplete": [Function],
                                  "onLayoutMeasure": [Function],
                                  "onLayoutUpdate": [Function],
                                  "onRender": [Function],
                                  "onSetAxisTarget": [Function],
                                  "onUpdate": [Function],
                                  "onViewportBoxUpdate": [Function],
                                  "path": Array [],
                                  "pointTo": [Function],
                                  "presence": 0,
                                  "presenceId": 0,
                                  "projection": Object {
                                    "isEnabled": false,
                                    "isTargetLocked": false,
                                    "target": Object {
                                      "x": Object {
                                        "max": 1,
                                        "min": 0,
                                      },
                                      "y": Object {
                                        "max": 1,
                                        "min": 0,
                                      },
                                    },
                                    "targetFinal": Object {
                                      "x": Object {
                                        "max": 1,
                                        "min": 0,
                                      },
                                      "y": Object {
                                        "max": 1,
                                        "min": 0,
                                      },
                                    },
                                  },
                                  "readValue": [Function],
                                  "rebaseProjectionTarget": [Function],
                                  "ref": [Function],
                                  "removeValue": [Function],
                                  "resetTransform": [Function],
                                  "scheduleRender": [Function],
                                  "scheduleUpdateLayoutProjection": [Function],
                                  "setBaseTarget": [Function],
                                  "setCrossfader": [Function],
                                  "setProjectionTargetAxis": [Function],
                                  "setProps": [Function],
                                  "setStaticValue": [Function],
                                  "setVisibility": [Function],
                                  "snapshotViewportBox": [Function],
                                  "sortNodePosition": [Function],
                                  "startLayoutAnimation": [Function],
                                  "stopLayoutAnimation": [Function],
                                  "suspendHoverEvents": [Function],
                                  "syncRender": [Function],
                                  "treeType": "dom",
                                  "unlockProjectionTarget": [Function],
                                  "updateLayoutMeasurement": [Function],
                                  "updateLayoutProjection": [Function],
                                  "updatePropListeners": [Function],
                                  "variantChildren": Set {
                                    Object {
                                      "addChild": [Function],
                                      "addValue": [Function],
                                      "addVariantChild": [Function],
                                      "animationState": Object {
                                        "animateChanges": [Function],
                                        "getState": [Function],
                                        "isAnimated": [Function],
                                        "setActive": [Function],
                                        "setAnimateFunction": [Function],
                                      },
                                      "blockInitialAnimation": true,
                                      "build": [Function],
                                      "clearAllListeners": [Function],
                                      "clearState": [Function],
                                      "current": <svg
                                        class="css-da6t8b"
                                        style="fill: none; stroke-width: 2; stroke: currentColor; stroke-dasharray: 16; opacity: 1; stroke-dashoffset: 0;"
                                        variants="[object Object]"
                                        viewBox="0 0 12 10"
                                      >
                                        <polyline
                                          points="1.5 6 4.5 9 10.5 1"
                                        />
                                      </svg>,
                                      "depth": 1,
                                      "enableLayoutProjection": [Function],
                                      "forEachValue": [Function],
                                      "getBaseTarget": [Function],
                                      "getClosestVariantNode": [Function],
                                      "getDefaultTransition": [Function],
                                      "getInstance": [Function],
                                      "getLatestValues": [Function],
                                      "getLayoutId": [Function],
                                      "getLayoutState": [Function],
                                      "getProjectionAnimationProgress": [Function],
                                      "getProps": [Function],
                                      "getStaticValue": [Function],
                                      "getValue": [Function],
                                      "getVariant": [Function],
                                      "getVariantContext": [Function],
                                      "hasValue": [Function],
                                      "isHoverEventsEnabled": true,
                                      "isMounted": [Function],
                                      "isPresenceRoot": false,
                                      "isPresent": true,
                                      "isStatic": false,
                                      "isVisible": undefined,
                                      "lockProjectionTarget": [Function],
                                      "makeTargetAnimatable": [Function],
                                      "manuallyAnimateOnMount": false,
                                      "measureViewportBox": [Function],
                                      "notifyAnimationComplete": [Function],
                                      "notifyAnimationStart": [Function],
                                      "notifyBeforeLayoutMeasure": [Function],
                                      "notifyLayoutAnimationComplete": [Function],
                                      "notifyLayoutMeasure": [Function],
                                      "notifyLayoutReady": [Function],
                                      "notifyLayoutUpdate": [Function],
                                      "notifyRender": [Function],
                                      "notifySetAxisTarget": [Function],
                                      "notifyUpdate": [Function],
                                      "notifyViewportBoxUpdate": [Function],
                                      "onAnimationComplete": [Function],
                                      "onAnimationStart": [Function],
                                      "onBeforeLayoutMeasure": [Function],
                                      "onLayoutAnimationComplete": [Function],
                                      "onLayoutMeasure": [Function],
                                      "onLayoutUpdate": [Function],
                                      "onRender": [Function],
                                      "onSetAxisTarget": [Function],
                                      "onUpdate": [Function],
                                      "onViewportBoxUpdate": [Function],
                                      "path": Array [
                                        [Circular],
                                      ],
                                      "pointTo": [Function],
                                      "presence": 0,
                                      "presenceId": 0,
                                      "projection": Object {
                                        "isEnabled": false,
                                        "isTargetLocked": false,
                                        "target": Object {
                                          "x": Object {
                                            "max": 1,
                                            "min": 0,
                                          },
                                          "y": Object {
                                            "max": 1,
                                            "min": 0,
                                          },
                                        },
                                        "targetFinal": Object {
                                          "x": Object {
                                            "max": 1,
                                            "min": 0,
                                          },
                                          "y": Object {
                                            "max": 1,
                                            "min": 0,
                                          },
                                        },
                                      },
                                      "readValue": [Function],
                                      "rebaseProjectionTarget": [Function],
                                      "ref": [Function],
                                      "removeValue": [Function],
                                      "resetTransform": [Function],
                                      "scheduleRender": [Function],
                                      "scheduleUpdateLayoutProjection": [Function],
                                      "setBaseTarget": [Function],
                                      "setCrossfader": [Function],
                                      "setProjectionTargetAxis": [Function],
                                      "setProps": [Function],
                                      "setStaticValue": [Function],
                                      "setVisibility": [Function],
                                      "snapshotViewportBox": [Function],
                                      "sortNodePosition": [Function],
                                      "startLayoutAnimation": [Function],
                                      "stopLayoutAnimation": [Function],
                                      "suspendHoverEvents": [Function],
                                      "syncRender": [Function],
                                      "treeType": "dom",
                                      "unlockProjectionTarget": [Function],
                                      "updateLayoutMeasurement": [Function],
                                      "updateLayoutProjection": [Function],
                                      "updatePropListeners": [Function],
                                      "variantChildren": Set {},
                                      "withoutTransform": [Function],
                                    },
                                  },
                                  "withoutTransform": [Function],
                                }
                              }
                            />
                          </ForwardRef(MotionComponent)>
                        </PresenceChild>
                      </AnimatePresence>
                    </CheckboxTransition>
                  </CheckboxIcon>
                </span>
              </Styled(span)>
              <Styled(span)
                __css={
                  Object {
                    "_disabled": Object {
                      "opacity": 0.4,
                    },
                    "fontSize": "md",
                    "marginStart": "0.5rem",
                    "userSelect": "none",
                  }
                }
                className="chakra-checkbox__label"
                data-checked=""
                onMouseDown={[Function]}
                onTouchStart={[Function]}
              >
                <span
                  className="chakra-checkbox__label css-sklcna"
                  data-checked=""
                  onMouseDown={[Function]}
                  onTouchStart={[Function]}
                >
                  Auto-create stops at set spacing
                </span>
              </Styled(span)>
            </label>
          </Styled(label)>
        </Checkbox>
        <NumberInput
          key=".7"
          label="Stop spacing"
          onChange={[Function]}
          test={[Function]}
          units="meters"
          value={3000}
        >
          <FormControl
            isInvalid={false}
          >
            <Styled(div)
              __css={
                Object {
                  "position": "relative",
                  "width": "100%",
                }
              }
              className="chakra-form-control"
              role="group"
            >
              <div
                className="chakra-form-control css-1kxonj9"
                role="group"
              >
                <FormLabel
                  htmlFor="00000000-0000-0000-0000-000000000000"
                >
                  <Styled(label)
                    __css={
                      Object {
                        "_disabled": Object {
                          "opacity": 0.4,
                        },
                        "display": "block",
                        "fontSize": "md",
                        "fontWeight": "medium",
                        "marginEnd": 3,
                        "mb": 2,
                        "opacity": 1,
                        "textAlign": "start",
                        "transition": "all 0.2s",
                      }
                    }
                    className="chakra-form__label"
                    htmlFor="00000000-0000-0000-0000-000000000000"
                    id="field-1-label"
                  >
                    <label
                      className="chakra-form__label css-1qqx8g3"
                      htmlFor="00000000-0000-0000-0000-000000000000"
                      id="field-1-label"
                    >
                      Stop spacing
                    </label>
                  </Styled(label)>
                </FormLabel>
                <ForwardRef
                  id="00000000-0000-0000-0000-000000000000"
                  isInvalid={false}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  placeholder=""
                  type="text"
                  units="meters"
                  value={3000}
                >
                  <InputGroup>
                    <Styled(div)
                      __css={
                        Object {
                          "display": "flex",
                          "position": "relative",
                          "width": "100%",
                        }
                      }
                      className="chakra-input__group"
                    >
                      <div
                        className="chakra-input__group css-4302v8"
                      >
                        <Input
                          id="00000000-0000-0000-0000-000000000000"
                          isInvalid={false}
                          key=".0"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          paddingRight={10}
                          placeholder=""
                          type="text"
                          value={3000}
                        >
                          <Styled(input)
                            __css={
                              Object {
                                "_disabled": Object {
                                  "cursor": "not-allowed",
                                  "opacity": 0.4,
                                },
                                "_focus": Object {
                                  "borderColor": "#3182ce",
                                  "boxShadow": "0 0 0 1px #3182ce",
                                  "zIndex": 1,
                                },
                                "_hover": Object {
                                  "borderColor": "gray.300",
                                },
                                "_invalid": Object {
                                  "borderColor": "#E53E3E",
                                  "boxShadow": "0 0 0 1px #E53E3E",
                                },
                                "_readOnly": Object {
                                  "boxShadow": "none !important",
                                  "userSelect": "all",
                                },
                                "appearance": "none",
                                "bg": "inherit",
                                "border": "1px solid",
                                "borderColor": "inherit",
                                "borderRadius": "md",
                                "fontSize": "md",
                                "h": 10,
                                "minWidth": 0,
                                "outline": 0,
                                "position": "relative",
                                "px": 4,
                                "transition": "all 0.2s",
                                "width": "100%",
                              }
                            }
                            className="chakra-input"
                            disabled={false}
                            id="00000000-0000-0000-0000-000000000000"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            paddingRight={10}
                            placeholder=""
                            readOnly={false}
                            required={false}
                            type="text"
                            value={3000}
                          >
                            <input
                              className="chakra-input css-1hmrg96"
                              disabled={false}
                              id="00000000-0000-0000-0000-000000000000"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder=""
                              readOnly={false}
                              required={false}
                              type="text"
                              value={3000}
                            />
                          </Styled(input)>
                        </Input>
                        <InputRightElement
                          color="gray.400"
                          key=".1"
                          mr={2}
                          userSelect="none"
                          width="unset"
                        >
                          <InputElement
                            className="chakra-input__right-element"
                            color="gray.400"
                            mr={2}
                            placement="right"
                            userSelect="none"
                            width="unset"
                          >
                            <Styled(div)
                              __css={
                                Object {
                                  "fontSize": "md",
                                  "height": 10,
                                  "paddingX": undefined,
                                  "right": "0",
                                  "width": 10,
                                }
                              }
                              className="chakra-input__right-element"
                              color="gray.400"
                              mr={2}
                              userSelect="none"
                              width="unset"
                            >
                              <div
                                className="chakra-input__right-element css-15qe6bf"
                              >
                                meters
                              </div>
                            </Styled(div)>
                          </InputElement>
                        </InputRightElement>
                      </div>
                    </Styled(div)>
                  </InputGroup>
                </ForwardRef>
              </div>
            </Styled(div)>
          </FormControl>
        </NumberInput>
        <Checkbox
          fontWeight="normal"
          isChecked={false}
          isDisabled={true}
          key=".8"
          onChange={[Function]}
        >
          <Styled(label)
            __css={Object {}}
            className="chakra-checkbox"
            data-disabled=""
            fontWeight="normal"
          >
            <label
              className="chakra-checkbox css-wun7cp"
              data-disabled=""
            >
              <input
                aria-disabled={true}
                checked={false}
                className="chakra-checkbox__input"
                disabled={true}
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                style={
                  Object {
                    "border": "0px",
                    "clip": "rect(0px, 0px, 0px, 0px)",
                    "height": "1px",
                    "margin": "-1px",
                    "overflow": "hidden",
                    "padding": "0px",
                    "position": "absolute",
                    "whiteSpace": "nowrap",
                    "width": "1px",
                  }
                }
                type="checkbox"
              />
              <Styled(span)
                __css={
                  Object {
                    "_checked": Object {
                      "_disabled": Object {
                        "bg": "gray.200",
                        "borderColor": "gray.200",
                        "color": "gray.500",
                      },
                      "_hover": Object {
                        "bg": "blue.600",
                        "borderColor": "blue.600",
                      },
                      "bg": "blue.500",
                      "borderColor": "blue.500",
                      "color": "white",
                    },
                    "_disabled": Object {
                      "bg": "gray.100",
                      "borderColor": "gray.100",
                    },
                    "_focus": Object {
                      "boxShadow": "outline",
                    },
                    "_indeterminate": Object {
                      "bg": "blue.500",
                      "borderColor": "blue.500",
                      "color": "white",
                    },
                    "_invalid": Object {
                      "borderColor": "red.500",
                    },
                    "border": "2px solid",
                    "borderColor": "inherit",
                    "borderRadius": "sm",
                    "color": "white",
                    "h": 4,
                    "transition": "box-shadow 250ms",
                    "w": 4,
                  }
                }
                aria-hidden={true}
                className="chakra-checkbox__control"
                data-disabled=""
                onMouseDown={[Function]}
                onMouseEnter={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
              >
                <span
                  aria-hidden={true}
                  className="chakra-checkbox__control css-co2d90"
                  data-disabled=""
                  onMouseDown={[Function]}
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                >
                  <CheckboxIcon
                    __css={
                      Object {
                        "color": undefined,
                        "fontSize": "0.625rem",
                        "opacity": 0,
                        "transform": "scale(0.95)",
                        "transition": "transform 200ms",
                      }
                    }
                    isChecked={false}
                  >
                    <CheckboxTransition>
                      <AnimatePresence
                        initial={false}
                      />
                    </CheckboxTransition>
                  </CheckboxIcon>
                </span>
              </Styled(span)>
              <Styled(span)
                __css={
                  Object {
                    "_disabled": Object {
                      "opacity": 0.4,
                    },
                    "fontSize": "md",
                    "marginStart": "0.5rem",
                    "userSelect": "none",
                  }
                }
                className="chakra-checkbox__label"
                data-disabled=""
                onMouseDown={[Function]}
                onTouchStart={[Function]}
              >
                <span
                  className="chakra-checkbox__label css-sklcna"
                  data-disabled=""
                  onMouseDown={[Function]}
                  onTouchStart={[Function]}
                >
                  Bidirectional
                </span>
              </Styled(span)>
            </label>
          </Styled(label)>
        </Checkbox>
        <ForwardRef
          key=".9"
          status="info"
        >
          <Styled(div)
            __css={
              Object {
                "alignItems": "center",
                "bg": "#bee3f8",
                "display": "flex",
                "overflow": "hidden",
                "position": "relative",
                "px": 4,
                "py": 3,
                "width": "100%",
              }
            }
            className="chakra-alert"
            role="alert"
          >
            <div
              className="chakra-alert css-1m76rph"
              role="alert"
            >
              Modification cannot be bidirectional because timetables in this modification have phasing information.
            </div>
          </Styled(div)>
        </ForwardRef>
      </div>
    </Styled(div)>
  </Stack>
</EditAlignment>
`;
